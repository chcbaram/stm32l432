
stm32l432_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000024  08006338  08006338  00016338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000e0  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800643c  0800643c  0001643c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000070  20000000  08006444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ram2         00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  9 .bss          00000930  20000070  20000070  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  200009a0  200009a0  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ce6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bdb  00000000  00000000  00031d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  00034968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a88  00000000  00000000  00035548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006934  00000000  00000000  00035fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003cef  00000000  00000000  0003c904  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000405f3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003484  00000000  00000000  00040670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006210 	.word	0x08006210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006210 	.word	0x08006210

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f001 b8f6 	b.w	8001474 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <selfrel_offset31>:
 800057c:	6803      	ldr	r3, [r0, #0]
 800057e:	005a      	lsls	r2, r3, #1
 8000580:	bf4c      	ite	mi
 8000582:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000586:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800058a:	4418      	add	r0, r3
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <search_EIT_table>:
 8000590:	b361      	cbz	r1, 80005ec <search_EIT_table+0x5c>
 8000592:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000596:	f101 3aff 	add.w	sl, r1, #4294967295
 800059a:	4690      	mov	r8, r2
 800059c:	4606      	mov	r6, r0
 800059e:	46d1      	mov	r9, sl
 80005a0:	2700      	movs	r7, #0
 80005a2:	eb07 0409 	add.w	r4, r7, r9
 80005a6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80005aa:	1064      	asrs	r4, r4, #1
 80005ac:	00e5      	lsls	r5, r4, #3
 80005ae:	1971      	adds	r1, r6, r5
 80005b0:	4608      	mov	r0, r1
 80005b2:	f7ff ffe3 	bl	800057c <selfrel_offset31>
 80005b6:	45a2      	cmp	sl, r4
 80005b8:	4683      	mov	fp, r0
 80005ba:	f105 0008 	add.w	r0, r5, #8
 80005be:	4430      	add	r0, r6
 80005c0:	d009      	beq.n	80005d6 <search_EIT_table+0x46>
 80005c2:	f7ff ffdb 	bl	800057c <selfrel_offset31>
 80005c6:	45c3      	cmp	fp, r8
 80005c8:	f100 30ff 	add.w	r0, r0, #4294967295
 80005cc:	d805      	bhi.n	80005da <search_EIT_table+0x4a>
 80005ce:	4540      	cmp	r0, r8
 80005d0:	d209      	bcs.n	80005e6 <search_EIT_table+0x56>
 80005d2:	1c67      	adds	r7, r4, #1
 80005d4:	e7e5      	b.n	80005a2 <search_EIT_table+0x12>
 80005d6:	45c3      	cmp	fp, r8
 80005d8:	d905      	bls.n	80005e6 <search_EIT_table+0x56>
 80005da:	42a7      	cmp	r7, r4
 80005dc:	d002      	beq.n	80005e4 <search_EIT_table+0x54>
 80005de:	f104 39ff 	add.w	r9, r4, #4294967295
 80005e2:	e7de      	b.n	80005a2 <search_EIT_table+0x12>
 80005e4:	2100      	movs	r1, #0
 80005e6:	4608      	mov	r0, r1
 80005e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005ec:	4608      	mov	r0, r1
 80005ee:	4770      	bx	lr

080005f0 <__gnu_unwind_get_pr_addr>:
 80005f0:	2801      	cmp	r0, #1
 80005f2:	d007      	beq.n	8000604 <__gnu_unwind_get_pr_addr+0x14>
 80005f4:	2802      	cmp	r0, #2
 80005f6:	d007      	beq.n	8000608 <__gnu_unwind_get_pr_addr+0x18>
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__gnu_unwind_get_pr_addr+0x1c>)
 80005fa:	2800      	cmp	r0, #0
 80005fc:	bf0c      	ite	eq
 80005fe:	4618      	moveq	r0, r3
 8000600:	2000      	movne	r0, #0
 8000602:	4770      	bx	lr
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <__gnu_unwind_get_pr_addr+0x20>)
 8000606:	4770      	bx	lr
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <__gnu_unwind_get_pr_addr+0x24>)
 800060a:	4770      	bx	lr
 800060c:	08000cf5 	.word	0x08000cf5
 8000610:	08000cf9 	.word	0x08000cf9
 8000614:	08000cfd 	.word	0x08000cfd

08000618 <get_eit_entry>:
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	4b24      	ldr	r3, [pc, #144]	; (80006ac <get_eit_entry+0x94>)
 800061c:	b083      	sub	sp, #12
 800061e:	4604      	mov	r4, r0
 8000620:	1e8d      	subs	r5, r1, #2
 8000622:	b37b      	cbz	r3, 8000684 <get_eit_entry+0x6c>
 8000624:	a901      	add	r1, sp, #4
 8000626:	4628      	mov	r0, r5
 8000628:	f3af 8000 	nop.w
 800062c:	b320      	cbz	r0, 8000678 <get_eit_entry+0x60>
 800062e:	9901      	ldr	r1, [sp, #4]
 8000630:	462a      	mov	r2, r5
 8000632:	f7ff ffad 	bl	8000590 <search_EIT_table>
 8000636:	4601      	mov	r1, r0
 8000638:	b1f0      	cbz	r0, 8000678 <get_eit_entry+0x60>
 800063a:	f7ff ff9f 	bl	800057c <selfrel_offset31>
 800063e:	684b      	ldr	r3, [r1, #4]
 8000640:	64a0      	str	r0, [r4, #72]	; 0x48
 8000642:	2b01      	cmp	r3, #1
 8000644:	d012      	beq.n	800066c <get_eit_entry+0x54>
 8000646:	2b00      	cmp	r3, #0
 8000648:	f101 0004 	add.w	r0, r1, #4
 800064c:	db20      	blt.n	8000690 <get_eit_entry+0x78>
 800064e:	f7ff ff95 	bl	800057c <selfrel_offset31>
 8000652:	2300      	movs	r3, #0
 8000654:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000656:	6523      	str	r3, [r4, #80]	; 0x50
 8000658:	6803      	ldr	r3, [r0, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db1c      	blt.n	8000698 <get_eit_entry+0x80>
 800065e:	f7ff ff8d 	bl	800057c <selfrel_offset31>
 8000662:	2300      	movs	r3, #0
 8000664:	6120      	str	r0, [r4, #16]
 8000666:	4618      	mov	r0, r3
 8000668:	b003      	add	sp, #12
 800066a:	bd30      	pop	{r4, r5, pc}
 800066c:	2300      	movs	r3, #0
 800066e:	6123      	str	r3, [r4, #16]
 8000670:	2305      	movs	r3, #5
 8000672:	4618      	mov	r0, r3
 8000674:	b003      	add	sp, #12
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	2300      	movs	r3, #0
 800067a:	6123      	str	r3, [r4, #16]
 800067c:	2309      	movs	r3, #9
 800067e:	4618      	mov	r0, r3
 8000680:	b003      	add	sp, #12
 8000682:	bd30      	pop	{r4, r5, pc}
 8000684:	490a      	ldr	r1, [pc, #40]	; (80006b0 <get_eit_entry+0x98>)
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <get_eit_entry+0x9c>)
 8000688:	1a09      	subs	r1, r1, r0
 800068a:	10c9      	asrs	r1, r1, #3
 800068c:	9101      	str	r1, [sp, #4]
 800068e:	e7cf      	b.n	8000630 <get_eit_entry+0x18>
 8000690:	2301      	movs	r3, #1
 8000692:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000694:	6523      	str	r3, [r4, #80]	; 0x50
 8000696:	e7df      	b.n	8000658 <get_eit_entry+0x40>
 8000698:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800069c:	f7ff ffa8 	bl	80005f0 <__gnu_unwind_get_pr_addr>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	6120      	str	r0, [r4, #16]
 80006a4:	bf14      	ite	ne
 80006a6:	2300      	movne	r3, #0
 80006a8:	2309      	moveq	r3, #9
 80006aa:	e7dc      	b.n	8000666 <get_eit_entry+0x4e>
 80006ac:	00000000 	.word	0x00000000
 80006b0:	0800643c 	.word	0x0800643c
 80006b4:	0800635c 	.word	0x0800635c

080006b8 <restore_non_core_regs>:
 80006b8:	6803      	ldr	r3, [r0, #0]
 80006ba:	07da      	lsls	r2, r3, #31
 80006bc:	b510      	push	{r4, lr}
 80006be:	4604      	mov	r4, r0
 80006c0:	d406      	bmi.n	80006d0 <restore_non_core_regs+0x18>
 80006c2:	079b      	lsls	r3, r3, #30
 80006c4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80006c8:	d509      	bpl.n	80006de <restore_non_core_regs+0x26>
 80006ca:	f000 fc51 	bl	8000f70 <__gnu_Unwind_Restore_VFP_D>
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	0759      	lsls	r1, r3, #29
 80006d2:	d509      	bpl.n	80006e8 <restore_non_core_regs+0x30>
 80006d4:	071a      	lsls	r2, r3, #28
 80006d6:	d50e      	bpl.n	80006f6 <restore_non_core_regs+0x3e>
 80006d8:	06db      	lsls	r3, r3, #27
 80006da:	d513      	bpl.n	8000704 <restore_non_core_regs+0x4c>
 80006dc:	bd10      	pop	{r4, pc}
 80006de:	f000 fc3f 	bl	8000f60 <__gnu_Unwind_Restore_VFP>
 80006e2:	6823      	ldr	r3, [r4, #0]
 80006e4:	0759      	lsls	r1, r3, #29
 80006e6:	d4f5      	bmi.n	80006d4 <restore_non_core_regs+0x1c>
 80006e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006ec:	f000 fc48 	bl	8000f80 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	071a      	lsls	r2, r3, #28
 80006f4:	d4f0      	bmi.n	80006d8 <restore_non_core_regs+0x20>
 80006f6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80006fa:	f000 fc49 	bl	8000f90 <__gnu_Unwind_Restore_WMMXD>
 80006fe:	6823      	ldr	r3, [r4, #0]
 8000700:	06db      	lsls	r3, r3, #27
 8000702:	d4eb      	bmi.n	80006dc <restore_non_core_regs+0x24>
 8000704:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800070c:	f000 bc84 	b.w	8001018 <__gnu_Unwind_Restore_WMMXC>

08000710 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000710:	6803      	ldr	r3, [r0, #0]
 8000712:	b103      	cbz	r3, 8000716 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000714:	4403      	add	r3, r0
 8000716:	4618      	mov	r0, r3
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop

0800071c <__gnu_unwind_24bit.isra.1>:
 800071c:	2009      	movs	r0, #9
 800071e:	4770      	bx	lr

08000720 <_Unwind_DebugHook>:
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop

08000724 <unwind_phase2>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	4604      	mov	r4, r0
 8000728:	460d      	mov	r5, r1
 800072a:	e008      	b.n	800073e <unwind_phase2+0x1a>
 800072c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800072e:	6163      	str	r3, [r4, #20]
 8000730:	462a      	mov	r2, r5
 8000732:	6923      	ldr	r3, [r4, #16]
 8000734:	4621      	mov	r1, r4
 8000736:	2001      	movs	r0, #1
 8000738:	4798      	blx	r3
 800073a:	2808      	cmp	r0, #8
 800073c:	d108      	bne.n	8000750 <unwind_phase2+0x2c>
 800073e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000740:	4620      	mov	r0, r4
 8000742:	f7ff ff69 	bl	8000618 <get_eit_entry>
 8000746:	4606      	mov	r6, r0
 8000748:	2800      	cmp	r0, #0
 800074a:	d0ef      	beq.n	800072c <unwind_phase2+0x8>
 800074c:	f005 fd14 	bl	8006178 <abort>
 8000750:	2807      	cmp	r0, #7
 8000752:	d1fb      	bne.n	800074c <unwind_phase2+0x28>
 8000754:	4630      	mov	r0, r6
 8000756:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000758:	f7ff ffe2 	bl	8000720 <_Unwind_DebugHook>
 800075c:	1d28      	adds	r0, r5, #4
 800075e:	f000 fbf3 	bl	8000f48 <__restore_core_regs>
 8000762:	bf00      	nop

08000764 <unwind_phase2_forced>:
 8000764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000768:	1d0c      	adds	r4, r1, #4
 800076a:	4605      	mov	r5, r0
 800076c:	4692      	mov	sl, r2
 800076e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000770:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000774:	ae03      	add	r6, sp, #12
 8000776:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800077a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800077c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800077e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000780:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000784:	ac02      	add	r4, sp, #8
 8000786:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800078a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800078e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000792:	2300      	movs	r3, #0
 8000794:	4628      	mov	r0, r5
 8000796:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000798:	6023      	str	r3, [r4, #0]
 800079a:	f7ff ff3d 	bl	8000618 <get_eit_entry>
 800079e:	f1ba 0f00 	cmp.w	sl, #0
 80007a2:	4607      	mov	r7, r0
 80007a4:	bf14      	ite	ne
 80007a6:	260a      	movne	r6, #10
 80007a8:	2609      	moveq	r6, #9
 80007aa:	b17f      	cbz	r7, 80007cc <unwind_phase2_forced+0x68>
 80007ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007ae:	f046 0110 	orr.w	r1, r6, #16
 80007b2:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007b6:	462a      	mov	r2, r5
 80007b8:	6463      	str	r3, [r4, #68]	; 0x44
 80007ba:	2001      	movs	r0, #1
 80007bc:	462b      	mov	r3, r5
 80007be:	47c0      	blx	r8
 80007c0:	bb78      	cbnz	r0, 8000822 <unwind_phase2_forced+0xbe>
 80007c2:	4638      	mov	r0, r7
 80007c4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007ce:	616b      	str	r3, [r5, #20]
 80007d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007d4:	4621      	mov	r1, r4
 80007d6:	a87a      	add	r0, sp, #488	; 0x1e8
 80007d8:	f005 fc3e 	bl	8006058 <memcpy>
 80007dc:	692b      	ldr	r3, [r5, #16]
 80007de:	aa7a      	add	r2, sp, #488	; 0x1e8
 80007e0:	4629      	mov	r1, r5
 80007e2:	4630      	mov	r0, r6
 80007e4:	4798      	blx	r3
 80007e6:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80007e8:	4682      	mov	sl, r0
 80007ea:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007ee:	4631      	mov	r1, r6
 80007f0:	6463      	str	r3, [r4, #68]	; 0x44
 80007f2:	462a      	mov	r2, r5
 80007f4:	462b      	mov	r3, r5
 80007f6:	2001      	movs	r0, #1
 80007f8:	47c0      	blx	r8
 80007fa:	b990      	cbnz	r0, 8000822 <unwind_phase2_forced+0xbe>
 80007fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000800:	a97a      	add	r1, sp, #488	; 0x1e8
 8000802:	4620      	mov	r0, r4
 8000804:	f005 fc28 	bl	8006058 <memcpy>
 8000808:	f1ba 0f08 	cmp.w	sl, #8
 800080c:	d106      	bne.n	800081c <unwind_phase2_forced+0xb8>
 800080e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000810:	4628      	mov	r0, r5
 8000812:	f7ff ff01 	bl	8000618 <get_eit_entry>
 8000816:	2609      	movs	r6, #9
 8000818:	4607      	mov	r7, r0
 800081a:	e7c6      	b.n	80007aa <unwind_phase2_forced+0x46>
 800081c:	f1ba 0f07 	cmp.w	sl, #7
 8000820:	d005      	beq.n	800082e <unwind_phase2_forced+0xca>
 8000822:	2709      	movs	r7, #9
 8000824:	4638      	mov	r0, r7
 8000826:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082e:	4638      	mov	r0, r7
 8000830:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000832:	f7ff ff75 	bl	8000720 <_Unwind_DebugHook>
 8000836:	a803      	add	r0, sp, #12
 8000838:	f000 fb86 	bl	8000f48 <__restore_core_regs>

0800083c <_Unwind_GetCFA>:
 800083c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800083e:	4770      	bx	lr

08000840 <__gnu_Unwind_RaiseException>:
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000844:	640b      	str	r3, [r1, #64]	; 0x40
 8000846:	1d0e      	adds	r6, r1, #4
 8000848:	460f      	mov	r7, r1
 800084a:	4604      	mov	r4, r0
 800084c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800084e:	b0f9      	sub	sp, #484	; 0x1e4
 8000850:	ad01      	add	r5, sp, #4
 8000852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000854:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000858:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800085a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800085c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000860:	f04f 36ff 	mov.w	r6, #4294967295
 8000864:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000868:	9600      	str	r6, [sp, #0]
 800086a:	e006      	b.n	800087a <__gnu_Unwind_RaiseException+0x3a>
 800086c:	6923      	ldr	r3, [r4, #16]
 800086e:	466a      	mov	r2, sp
 8000870:	4621      	mov	r1, r4
 8000872:	4798      	blx	r3
 8000874:	2808      	cmp	r0, #8
 8000876:	4605      	mov	r5, r0
 8000878:	d108      	bne.n	800088c <__gnu_Unwind_RaiseException+0x4c>
 800087a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800087c:	4620      	mov	r0, r4
 800087e:	f7ff fecb 	bl	8000618 <get_eit_entry>
 8000882:	2800      	cmp	r0, #0
 8000884:	d0f2      	beq.n	800086c <__gnu_Unwind_RaiseException+0x2c>
 8000886:	2009      	movs	r0, #9
 8000888:	b079      	add	sp, #484	; 0x1e4
 800088a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088c:	4668      	mov	r0, sp
 800088e:	f7ff ff13 	bl	80006b8 <restore_non_core_regs>
 8000892:	2d06      	cmp	r5, #6
 8000894:	d1f7      	bne.n	8000886 <__gnu_Unwind_RaiseException+0x46>
 8000896:	4639      	mov	r1, r7
 8000898:	4620      	mov	r0, r4
 800089a:	f7ff ff43 	bl	8000724 <unwind_phase2>
 800089e:	bf00      	nop

080008a0 <__gnu_Unwind_ForcedUnwind>:
 80008a0:	b430      	push	{r4, r5}
 80008a2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80008a4:	60c1      	str	r1, [r0, #12]
 80008a6:	6182      	str	r2, [r0, #24]
 80008a8:	4619      	mov	r1, r3
 80008aa:	641d      	str	r5, [r3, #64]	; 0x40
 80008ac:	2200      	movs	r2, #0
 80008ae:	bc30      	pop	{r4, r5}
 80008b0:	e758      	b.n	8000764 <unwind_phase2_forced>
 80008b2:	bf00      	nop

080008b4 <__gnu_Unwind_Resume>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	68c6      	ldr	r6, [r0, #12]
 80008b8:	6943      	ldr	r3, [r0, #20]
 80008ba:	640b      	str	r3, [r1, #64]	; 0x40
 80008bc:	b126      	cbz	r6, 80008c8 <__gnu_Unwind_Resume+0x14>
 80008be:	2201      	movs	r2, #1
 80008c0:	f7ff ff50 	bl	8000764 <unwind_phase2_forced>
 80008c4:	f005 fc58 	bl	8006178 <abort>
 80008c8:	6903      	ldr	r3, [r0, #16]
 80008ca:	460a      	mov	r2, r1
 80008cc:	4604      	mov	r4, r0
 80008ce:	460d      	mov	r5, r1
 80008d0:	4601      	mov	r1, r0
 80008d2:	2002      	movs	r0, #2
 80008d4:	4798      	blx	r3
 80008d6:	2807      	cmp	r0, #7
 80008d8:	d007      	beq.n	80008ea <__gnu_Unwind_Resume+0x36>
 80008da:	2808      	cmp	r0, #8
 80008dc:	d103      	bne.n	80008e6 <__gnu_Unwind_Resume+0x32>
 80008de:	4629      	mov	r1, r5
 80008e0:	4620      	mov	r0, r4
 80008e2:	f7ff ff1f 	bl	8000724 <unwind_phase2>
 80008e6:	f005 fc47 	bl	8006178 <abort>
 80008ea:	4630      	mov	r0, r6
 80008ec:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008ee:	f7ff ff17 	bl	8000720 <_Unwind_DebugHook>
 80008f2:	1d28      	adds	r0, r5, #4
 80008f4:	f000 fb28 	bl	8000f48 <__restore_core_regs>

080008f8 <__gnu_Unwind_Resume_or_Rethrow>:
 80008f8:	68c2      	ldr	r2, [r0, #12]
 80008fa:	b11a      	cbz	r2, 8000904 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80008fc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008fe:	640a      	str	r2, [r1, #64]	; 0x40
 8000900:	2200      	movs	r2, #0
 8000902:	e72f      	b.n	8000764 <unwind_phase2_forced>
 8000904:	e79c      	b.n	8000840 <__gnu_Unwind_RaiseException>
 8000906:	bf00      	nop

08000908 <_Unwind_Complete>:
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <_Unwind_DeleteException>:
 800090c:	6883      	ldr	r3, [r0, #8]
 800090e:	b113      	cbz	r3, 8000916 <_Unwind_DeleteException+0xa>
 8000910:	4601      	mov	r1, r0
 8000912:	2001      	movs	r0, #1
 8000914:	4718      	bx	r3
 8000916:	4770      	bx	lr

08000918 <_Unwind_VRS_Get>:
 8000918:	b500      	push	{lr}
 800091a:	2904      	cmp	r1, #4
 800091c:	d807      	bhi.n	800092e <_Unwind_VRS_Get+0x16>
 800091e:	e8df f001 	tbb	[pc, r1]
 8000922:	0903      	.short	0x0903
 8000924:	0906      	.short	0x0906
 8000926:	09          	.byte	0x09
 8000927:	00          	.byte	0x00
 8000928:	b90b      	cbnz	r3, 800092e <_Unwind_VRS_Get+0x16>
 800092a:	2a0f      	cmp	r2, #15
 800092c:	d905      	bls.n	800093a <_Unwind_VRS_Get+0x22>
 800092e:	2002      	movs	r0, #2
 8000930:	f85d fb04 	ldr.w	pc, [sp], #4
 8000934:	2001      	movs	r0, #1
 8000936:	f85d fb04 	ldr.w	pc, [sp], #4
 800093a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800093e:	4618      	mov	r0, r3
 8000940:	6853      	ldr	r3, [r2, #4]
 8000942:	9a01      	ldr	r2, [sp, #4]
 8000944:	6013      	str	r3, [r2, #0]
 8000946:	f85d fb04 	ldr.w	pc, [sp], #4
 800094a:	bf00      	nop

0800094c <_Unwind_GetGR>:
 800094c:	b510      	push	{r4, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	2300      	movs	r3, #0
 8000952:	ac03      	add	r4, sp, #12
 8000954:	460a      	mov	r2, r1
 8000956:	9400      	str	r4, [sp, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f7ff ffdd 	bl	8000918 <_Unwind_VRS_Get>
 800095e:	9803      	ldr	r0, [sp, #12]
 8000960:	b004      	add	sp, #16
 8000962:	bd10      	pop	{r4, pc}

08000964 <_Unwind_VRS_Set>:
 8000964:	b500      	push	{lr}
 8000966:	2904      	cmp	r1, #4
 8000968:	d807      	bhi.n	800097a <_Unwind_VRS_Set+0x16>
 800096a:	e8df f001 	tbb	[pc, r1]
 800096e:	0903      	.short	0x0903
 8000970:	0906      	.short	0x0906
 8000972:	09          	.byte	0x09
 8000973:	00          	.byte	0x00
 8000974:	b90b      	cbnz	r3, 800097a <_Unwind_VRS_Set+0x16>
 8000976:	2a0f      	cmp	r2, #15
 8000978:	d905      	bls.n	8000986 <_Unwind_VRS_Set+0x22>
 800097a:	2002      	movs	r0, #2
 800097c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000980:	2001      	movs	r0, #1
 8000982:	f85d fb04 	ldr.w	pc, [sp], #4
 8000986:	9901      	ldr	r1, [sp, #4]
 8000988:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800098c:	6809      	ldr	r1, [r1, #0]
 800098e:	6051      	str	r1, [r2, #4]
 8000990:	4618      	mov	r0, r3
 8000992:	f85d fb04 	ldr.w	pc, [sp], #4
 8000996:	bf00      	nop

08000998 <_Unwind_SetGR>:
 8000998:	b510      	push	{r4, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	ac04      	add	r4, sp, #16
 800099e:	2300      	movs	r3, #0
 80009a0:	f844 2d04 	str.w	r2, [r4, #-4]!
 80009a4:	460a      	mov	r2, r1
 80009a6:	9400      	str	r4, [sp, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f7ff ffdb 	bl	8000964 <_Unwind_VRS_Set>
 80009ae:	b004      	add	sp, #16
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	bf00      	nop

080009b4 <__gnu_Unwind_Backtrace>:
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	1d15      	adds	r5, r2, #4
 80009bc:	4607      	mov	r7, r0
 80009be:	460e      	mov	r6, r1
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80009c6:	ac17      	add	r4, sp, #92	; 0x5c
 80009c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009d6:	f04f 35ff 	mov.w	r5, #4294967295
 80009da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009de:	9516      	str	r5, [sp, #88]	; 0x58
 80009e0:	e010      	b.n	8000a04 <__gnu_Unwind_Backtrace+0x50>
 80009e2:	a816      	add	r0, sp, #88	; 0x58
 80009e4:	f7ff ffd8 	bl	8000998 <_Unwind_SetGR>
 80009e8:	4631      	mov	r1, r6
 80009ea:	a816      	add	r0, sp, #88	; 0x58
 80009ec:	47b8      	blx	r7
 80009ee:	aa16      	add	r2, sp, #88	; 0x58
 80009f0:	4669      	mov	r1, sp
 80009f2:	b978      	cbnz	r0, 8000a14 <__gnu_Unwind_Backtrace+0x60>
 80009f4:	9b04      	ldr	r3, [sp, #16]
 80009f6:	2008      	movs	r0, #8
 80009f8:	4798      	blx	r3
 80009fa:	2805      	cmp	r0, #5
 80009fc:	4604      	mov	r4, r0
 80009fe:	d00a      	beq.n	8000a16 <__gnu_Unwind_Backtrace+0x62>
 8000a00:	2809      	cmp	r0, #9
 8000a02:	d007      	beq.n	8000a14 <__gnu_Unwind_Backtrace+0x60>
 8000a04:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000a06:	4668      	mov	r0, sp
 8000a08:	f7ff fe06 	bl	8000618 <get_eit_entry>
 8000a0c:	466a      	mov	r2, sp
 8000a0e:	210c      	movs	r1, #12
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d0e6      	beq.n	80009e2 <__gnu_Unwind_Backtrace+0x2e>
 8000a14:	2409      	movs	r4, #9
 8000a16:	a816      	add	r0, sp, #88	; 0x58
 8000a18:	f7ff fe4e 	bl	80006b8 <restore_non_core_regs>
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a24 <__gnu_unwind_pr_common>:
 8000a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a28:	460d      	mov	r5, r1
 8000a2a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000a2c:	b08b      	sub	sp, #44	; 0x2c
 8000a2e:	1d0c      	adds	r4, r1, #4
 8000a30:	6809      	ldr	r1, [r1, #0]
 8000a32:	9107      	str	r1, [sp, #28]
 8000a34:	4691      	mov	r9, r2
 8000a36:	9408      	str	r4, [sp, #32]
 8000a38:	f000 0b03 	and.w	fp, r0, #3
 8000a3c:	461e      	mov	r6, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d160      	bne.n	8000b04 <__gnu_unwind_pr_common+0xe0>
 8000a42:	0209      	lsls	r1, r1, #8
 8000a44:	2303      	movs	r3, #3
 8000a46:	9107      	str	r1, [sp, #28]
 8000a48:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000a4c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a50:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a52:	f1bb 0f02 	cmp.w	fp, #2
 8000a56:	bf08      	it	eq
 8000a58:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a5a:	f013 0301 	ands.w	r3, r3, #1
 8000a5e:	d140      	bne.n	8000ae2 <__gnu_unwind_pr_common+0xbe>
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	f000 0308 	and.w	r3, r0, #8
 8000a66:	9303      	str	r3, [sp, #12]
 8000a68:	f8d4 8000 	ldr.w	r8, [r4]
 8000a6c:	f1b8 0f00 	cmp.w	r8, #0
 8000a70:	d039      	beq.n	8000ae6 <__gnu_unwind_pr_common+0xc2>
 8000a72:	2e02      	cmp	r6, #2
 8000a74:	d043      	beq.n	8000afe <__gnu_unwind_pr_common+0xda>
 8000a76:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a7a:	8867      	ldrh	r7, [r4, #2]
 8000a7c:	3404      	adds	r4, #4
 8000a7e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a80:	f027 0a01 	bic.w	sl, r7, #1
 8000a84:	210f      	movs	r1, #15
 8000a86:	4648      	mov	r0, r9
 8000a88:	449a      	add	sl, r3
 8000a8a:	f7ff ff5f 	bl	800094c <_Unwind_GetGR>
 8000a8e:	4582      	cmp	sl, r0
 8000a90:	d833      	bhi.n	8000afa <__gnu_unwind_pr_common+0xd6>
 8000a92:	f028 0301 	bic.w	r3, r8, #1
 8000a96:	449a      	add	sl, r3
 8000a98:	4550      	cmp	r0, sl
 8000a9a:	bf2c      	ite	cs
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	007f      	lsls	r7, r7, #1
 8000aa2:	f007 0702 	and.w	r7, r7, #2
 8000aa6:	f008 0801 	and.w	r8, r8, #1
 8000aaa:	ea47 0708 	orr.w	r7, r7, r8
 8000aae:	2f01      	cmp	r7, #1
 8000ab0:	d03e      	beq.n	8000b30 <__gnu_unwind_pr_common+0x10c>
 8000ab2:	d335      	bcc.n	8000b20 <__gnu_unwind_pr_common+0xfc>
 8000ab4:	2f02      	cmp	r7, #2
 8000ab6:	d11c      	bne.n	8000af2 <__gnu_unwind_pr_common+0xce>
 8000ab8:	6823      	ldr	r3, [r4, #0]
 8000aba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000abe:	9202      	str	r2, [sp, #8]
 8000ac0:	f1bb 0f00 	cmp.w	fp, #0
 8000ac4:	d176      	bne.n	8000bb4 <__gnu_unwind_pr_common+0x190>
 8000ac6:	b128      	cbz	r0, 8000ad4 <__gnu_unwind_pr_common+0xb0>
 8000ac8:	9903      	ldr	r1, [sp, #12]
 8000aca:	2900      	cmp	r1, #0
 8000acc:	d07e      	beq.n	8000bcc <__gnu_unwind_pr_common+0x1a8>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	f000 80a6 	beq.w	8000c20 <__gnu_unwind_pr_common+0x1fc>
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db77      	blt.n	8000bc8 <__gnu_unwind_pr_common+0x1a4>
 8000ad8:	9b02      	ldr	r3, [sp, #8]
 8000ada:	3301      	adds	r3, #1
 8000adc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000ae0:	e7c2      	b.n	8000a68 <__gnu_unwind_pr_common+0x44>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	2e02      	cmp	r6, #2
 8000ae8:	dd3e      	ble.n	8000b68 <__gnu_unwind_pr_common+0x144>
 8000aea:	f7ff fe17 	bl	800071c <__gnu_unwind_24bit.isra.1>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d040      	beq.n	8000b74 <__gnu_unwind_pr_common+0x150>
 8000af2:	2009      	movs	r0, #9
 8000af4:	b00b      	add	sp, #44	; 0x2c
 8000af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000afa:	2000      	movs	r0, #0
 8000afc:	e7d0      	b.n	8000aa0 <__gnu_unwind_pr_common+0x7c>
 8000afe:	6867      	ldr	r7, [r4, #4]
 8000b00:	3408      	adds	r4, #8
 8000b02:	e7bc      	b.n	8000a7e <__gnu_unwind_pr_common+0x5a>
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	dca3      	bgt.n	8000a50 <__gnu_unwind_pr_common+0x2c>
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	0409      	lsls	r1, r1, #16
 8000b0e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000b12:	2302      	movs	r3, #2
 8000b14:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000b18:	9107      	str	r1, [sp, #28]
 8000b1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000b1e:	e797      	b.n	8000a50 <__gnu_unwind_pr_common+0x2c>
 8000b20:	f1bb 0f00 	cmp.w	fp, #0
 8000b24:	d002      	beq.n	8000b2c <__gnu_unwind_pr_common+0x108>
 8000b26:	2800      	cmp	r0, #0
 8000b28:	f040 80bd 	bne.w	8000ca6 <__gnu_unwind_pr_common+0x282>
 8000b2c:	3404      	adds	r4, #4
 8000b2e:	e79b      	b.n	8000a68 <__gnu_unwind_pr_common+0x44>
 8000b30:	f1bb 0f00 	cmp.w	fp, #0
 8000b34:	d125      	bne.n	8000b82 <__gnu_unwind_pr_common+0x15e>
 8000b36:	b1a8      	cbz	r0, 8000b64 <__gnu_unwind_pr_common+0x140>
 8000b38:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000b3c:	1c99      	adds	r1, r3, #2
 8000b3e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b42:	d0d6      	beq.n	8000af2 <__gnu_unwind_pr_common+0xce>
 8000b44:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b48:	3301      	adds	r3, #1
 8000b4a:	9106      	str	r1, [sp, #24]
 8000b4c:	f000 80a3 	beq.w	8000c96 <__gnu_unwind_pr_common+0x272>
 8000b50:	1d20      	adds	r0, r4, #4
 8000b52:	f7ff fddd 	bl	8000710 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b56:	ab06      	add	r3, sp, #24
 8000b58:	4601      	mov	r1, r0
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f3af 8000 	nop.w
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d177      	bne.n	8000c54 <__gnu_unwind_pr_common+0x230>
 8000b64:	3408      	adds	r4, #8
 8000b66:	e77f      	b.n	8000a68 <__gnu_unwind_pr_common+0x44>
 8000b68:	a907      	add	r1, sp, #28
 8000b6a:	4648      	mov	r0, r9
 8000b6c:	f000 faee 	bl	800114c <__gnu_unwind_execute>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d1be      	bne.n	8000af2 <__gnu_unwind_pr_common+0xce>
 8000b74:	9b01      	ldr	r3, [sp, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d15c      	bne.n	8000c34 <__gnu_unwind_pr_common+0x210>
 8000b7a:	2008      	movs	r0, #8
 8000b7c:	b00b      	add	sp, #44	; 0x2c
 8000b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b82:	210d      	movs	r1, #13
 8000b84:	4648      	mov	r0, r9
 8000b86:	6a2f      	ldr	r7, [r5, #32]
 8000b88:	f7ff fee0 	bl	800094c <_Unwind_GetGR>
 8000b8c:	4287      	cmp	r7, r0
 8000b8e:	d1e9      	bne.n	8000b64 <__gnu_unwind_pr_common+0x140>
 8000b90:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b92:	429c      	cmp	r4, r3
 8000b94:	d1e6      	bne.n	8000b64 <__gnu_unwind_pr_common+0x140>
 8000b96:	4620      	mov	r0, r4
 8000b98:	f7ff fcf0 	bl	800057c <selfrel_offset31>
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	4648      	mov	r0, r9
 8000ba2:	f7ff fef9 	bl	8000998 <_Unwind_SetGR>
 8000ba6:	4648      	mov	r0, r9
 8000ba8:	462a      	mov	r2, r5
 8000baa:	2100      	movs	r1, #0
 8000bac:	f7ff fef4 	bl	8000998 <_Unwind_SetGR>
 8000bb0:	2007      	movs	r0, #7
 8000bb2:	e79f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000bb4:	210d      	movs	r1, #13
 8000bb6:	4648      	mov	r0, r9
 8000bb8:	6a2f      	ldr	r7, [r5, #32]
 8000bba:	f7ff fec7 	bl	800094c <_Unwind_GetGR>
 8000bbe:	4287      	cmp	r7, r0
 8000bc0:	d058      	beq.n	8000c74 <__gnu_unwind_pr_common+0x250>
 8000bc2:	6823      	ldr	r3, [r4, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	da87      	bge.n	8000ad8 <__gnu_unwind_pr_common+0xb4>
 8000bc8:	3404      	adds	r4, #4
 8000bca:	e785      	b.n	8000ad8 <__gnu_unwind_pr_common+0xb4>
 8000bcc:	9b02      	ldr	r3, [sp, #8]
 8000bce:	b33b      	cbz	r3, 8000c20 <__gnu_unwind_pr_common+0x1fc>
 8000bd0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000bd4:	1d27      	adds	r7, r4, #4
 8000bd6:	f8cd b010 	str.w	fp, [sp, #16]
 8000bda:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000bde:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000be2:	9605      	str	r6, [sp, #20]
 8000be4:	46a3      	mov	fp, r4
 8000be6:	461c      	mov	r4, r3
 8000be8:	e002      	b.n	8000bf0 <__gnu_unwind_pr_common+0x1cc>
 8000bea:	45b2      	cmp	sl, r6
 8000bec:	46b0      	mov	r8, r6
 8000bee:	d016      	beq.n	8000c1e <__gnu_unwind_pr_common+0x1fa>
 8000bf0:	4638      	mov	r0, r7
 8000bf2:	9406      	str	r4, [sp, #24]
 8000bf4:	f7ff fd8c 	bl	8000710 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bf8:	ab06      	add	r3, sp, #24
 8000bfa:	4601      	mov	r1, r0
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f3af 8000 	nop.w
 8000c04:	f108 0601 	add.w	r6, r8, #1
 8000c08:	3704      	adds	r7, #4
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d0ed      	beq.n	8000bea <__gnu_unwind_pr_common+0x1c6>
 8000c0e:	9b02      	ldr	r3, [sp, #8]
 8000c10:	9e05      	ldr	r6, [sp, #20]
 8000c12:	4543      	cmp	r3, r8
 8000c14:	465c      	mov	r4, fp
 8000c16:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000c1a:	d1d2      	bne.n	8000bc2 <__gnu_unwind_pr_common+0x19e>
 8000c1c:	e000      	b.n	8000c20 <__gnu_unwind_pr_common+0x1fc>
 8000c1e:	465c      	mov	r4, fp
 8000c20:	4648      	mov	r0, r9
 8000c22:	210d      	movs	r1, #13
 8000c24:	f7ff fe92 	bl	800094c <_Unwind_GetGR>
 8000c28:	9b06      	ldr	r3, [sp, #24]
 8000c2a:	6228      	str	r0, [r5, #32]
 8000c2c:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c2e:	626b      	str	r3, [r5, #36]	; 0x24
 8000c30:	2006      	movs	r0, #6
 8000c32:	e75f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4648      	mov	r0, r9
 8000c38:	f7ff fe88 	bl	800094c <_Unwind_GetGR>
 8000c3c:	210e      	movs	r1, #14
 8000c3e:	4602      	mov	r2, r0
 8000c40:	4648      	mov	r0, r9
 8000c42:	f7ff fea9 	bl	8000998 <_Unwind_SetGR>
 8000c46:	4648      	mov	r0, r9
 8000c48:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <__gnu_unwind_pr_common+0x2cc>)
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f7ff fea4 	bl	8000998 <_Unwind_SetGR>
 8000c50:	2007      	movs	r0, #7
 8000c52:	e74f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000c54:	4607      	mov	r7, r0
 8000c56:	210d      	movs	r1, #13
 8000c58:	4648      	mov	r0, r9
 8000c5a:	f7ff fe77 	bl	800094c <_Unwind_GetGR>
 8000c5e:	2f02      	cmp	r7, #2
 8000c60:	6228      	str	r0, [r5, #32]
 8000c62:	d11d      	bne.n	8000ca0 <__gnu_unwind_pr_common+0x27c>
 8000c64:	462b      	mov	r3, r5
 8000c66:	9a06      	ldr	r2, [sp, #24]
 8000c68:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c6c:	626b      	str	r3, [r5, #36]	; 0x24
 8000c6e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c70:	2006      	movs	r0, #6
 8000c72:	e73f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000c74:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c76:	429c      	cmp	r4, r3
 8000c78:	d1a3      	bne.n	8000bc2 <__gnu_unwind_pr_common+0x19e>
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	18a3      	adds	r3, r4, r2
 8000c80:	9902      	ldr	r1, [sp, #8]
 8000c82:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c84:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c86:	632a      	str	r2, [r5, #48]	; 0x30
 8000c88:	636b      	str	r3, [r5, #52]	; 0x34
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	42bb      	cmp	r3, r7
 8000c8e:	db1d      	blt.n	8000ccc <__gnu_unwind_pr_common+0x2a8>
 8000c90:	2301      	movs	r3, #1
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	e720      	b.n	8000ad8 <__gnu_unwind_pr_common+0xb4>
 8000c96:	4648      	mov	r0, r9
 8000c98:	210d      	movs	r1, #13
 8000c9a:	f7ff fe57 	bl	800094c <_Unwind_GetGR>
 8000c9e:	6228      	str	r0, [r5, #32]
 8000ca0:	9b06      	ldr	r3, [sp, #24]
 8000ca2:	626b      	str	r3, [r5, #36]	; 0x24
 8000ca4:	e7e3      	b.n	8000c6e <__gnu_unwind_pr_common+0x24a>
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f7ff fc68 	bl	800057c <selfrel_offset31>
 8000cac:	3404      	adds	r4, #4
 8000cae:	4606      	mov	r6, r0
 8000cb0:	63ac      	str	r4, [r5, #56]	; 0x38
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	f43f af1a 	beq.w	8000af2 <__gnu_unwind_pr_common+0xce>
 8000cbe:	4648      	mov	r0, r9
 8000cc0:	4632      	mov	r2, r6
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f7ff fe68 	bl	8000998 <_Unwind_SetGR>
 8000cc8:	2007      	movs	r0, #7
 8000cca:	e713      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000ccc:	4608      	mov	r0, r1
 8000cce:	3001      	adds	r0, #1
 8000cd0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000cd4:	f7ff fc52 	bl	800057c <selfrel_offset31>
 8000cd8:	210f      	movs	r1, #15
 8000cda:	4602      	mov	r2, r0
 8000cdc:	4648      	mov	r0, r9
 8000cde:	f7ff fe5b 	bl	8000998 <_Unwind_SetGR>
 8000ce2:	4648      	mov	r0, r9
 8000ce4:	462a      	mov	r2, r5
 8000ce6:	4639      	mov	r1, r7
 8000ce8:	f7ff fe56 	bl	8000998 <_Unwind_SetGR>
 8000cec:	2007      	movs	r0, #7
 8000cee:	e701      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000cf0:	00000000 	.word	0x00000000

08000cf4 <__aeabi_unwind_cpp_pr0>:
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e695      	b.n	8000a24 <__gnu_unwind_pr_common>

08000cf8 <__aeabi_unwind_cpp_pr1>:
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e693      	b.n	8000a24 <__gnu_unwind_pr_common>

08000cfc <__aeabi_unwind_cpp_pr2>:
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e691      	b.n	8000a24 <__gnu_unwind_pr_common>

08000d00 <_Unwind_VRS_Pop>:
 8000d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d02:	4604      	mov	r4, r0
 8000d04:	b0c5      	sub	sp, #276	; 0x114
 8000d06:	2904      	cmp	r1, #4
 8000d08:	d80d      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d0a:	e8df f001 	tbb	[pc, r1]
 8000d0e:	0353      	.short	0x0353
 8000d10:	310c      	.short	0x310c
 8000d12:	0f          	.byte	0x0f
 8000d13:	00          	.byte	0x00
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000d1a:	b295      	uxth	r5, r2
 8000d1c:	d162      	bne.n	8000de4 <_Unwind_VRS_Pop+0xe4>
 8000d1e:	1972      	adds	r2, r6, r5
 8000d20:	2a10      	cmp	r2, #16
 8000d22:	f240 809b 	bls.w	8000e5c <_Unwind_VRS_Pop+0x15c>
 8000d26:	2002      	movs	r0, #2
 8000d28:	b045      	add	sp, #276	; 0x114
 8000d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1fa      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d30:	2a10      	cmp	r2, #16
 8000d32:	d8f8      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d34:	6823      	ldr	r3, [r4, #0]
 8000d36:	06d8      	lsls	r0, r3, #27
 8000d38:	f100 80c6 	bmi.w	8000ec8 <_Unwind_VRS_Pop+0x1c8>
 8000d3c:	ae22      	add	r6, sp, #136	; 0x88
 8000d3e:	4630      	mov	r0, r6
 8000d40:	9201      	str	r2, [sp, #4]
 8000d42:	f000 f973 	bl	800102c <__gnu_Unwind_Save_WMMXC>
 8000d46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d48:	9a01      	ldr	r2, [sp, #4]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2501      	movs	r5, #1
 8000d4e:	fa05 f103 	lsl.w	r1, r5, r3
 8000d52:	4211      	tst	r1, r2
 8000d54:	d003      	beq.n	8000d5e <_Unwind_VRS_Pop+0x5e>
 8000d56:	6801      	ldr	r1, [r0, #0]
 8000d58:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000d5c:	3004      	adds	r0, #4
 8000d5e:	3301      	adds	r3, #1
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d1f4      	bne.n	8000d4e <_Unwind_VRS_Pop+0x4e>
 8000d64:	63a0      	str	r0, [r4, #56]	; 0x38
 8000d66:	4630      	mov	r0, r6
 8000d68:	f000 f956 	bl	8001018 <__gnu_Unwind_Restore_WMMXC>
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	e7db      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d1d8      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d74:	0c15      	lsrs	r5, r2, #16
 8000d76:	b297      	uxth	r7, r2
 8000d78:	19eb      	adds	r3, r5, r7
 8000d7a:	2b10      	cmp	r3, #16
 8000d7c:	d8d3      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	071e      	lsls	r6, r3, #28
 8000d82:	f100 80b5 	bmi.w	8000ef0 <_Unwind_VRS_Pop+0x1f0>
 8000d86:	ae22      	add	r6, sp, #136	; 0x88
 8000d88:	4630      	mov	r0, r6
 8000d8a:	f000 f923 	bl	8000fd4 <__gnu_Unwind_Save_WMMXD>
 8000d8e:	00ed      	lsls	r5, r5, #3
 8000d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d92:	b14f      	cbz	r7, 8000da8 <_Unwind_VRS_Pop+0xa8>
 8000d94:	3d04      	subs	r5, #4
 8000d96:	1971      	adds	r1, r6, r5
 8000d98:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000da0:	f841 2f04 	str.w	r2, [r1, #4]!
 8000da4:	4283      	cmp	r3, r0
 8000da6:	d1f9      	bne.n	8000d9c <_Unwind_VRS_Pop+0x9c>
 8000da8:	4630      	mov	r0, r6
 8000daa:	63a3      	str	r3, [r4, #56]	; 0x38
 8000dac:	f000 f8f0 	bl	8000f90 <__gnu_Unwind_Restore_WMMXD>
 8000db0:	2000      	movs	r0, #0
 8000db2:	e7b9      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1b6      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000db8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000dba:	b297      	uxth	r7, r2
 8000dbc:	1d20      	adds	r0, r4, #4
 8000dbe:	2601      	movs	r6, #1
 8000dc0:	fa06 f103 	lsl.w	r1, r6, r3
 8000dc4:	4239      	tst	r1, r7
 8000dc6:	f103 0301 	add.w	r3, r3, #1
 8000dca:	d002      	beq.n	8000dd2 <_Unwind_VRS_Pop+0xd2>
 8000dcc:	6829      	ldr	r1, [r5, #0]
 8000dce:	6001      	str	r1, [r0, #0]
 8000dd0:	3504      	adds	r5, #4
 8000dd2:	2b10      	cmp	r3, #16
 8000dd4:	f100 0004 	add.w	r0, r0, #4
 8000dd8:	d1f2      	bne.n	8000dc0 <_Unwind_VRS_Pop+0xc0>
 8000dda:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000dde:	d13b      	bne.n	8000e58 <_Unwind_VRS_Pop+0x158>
 8000de0:	63a5      	str	r5, [r4, #56]	; 0x38
 8000de2:	e7a1      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d19e      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000de8:	1977      	adds	r7, r6, r5
 8000dea:	2f20      	cmp	r7, #32
 8000dec:	d89b      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000dee:	2e0f      	cmp	r6, #15
 8000df0:	d966      	bls.n	8000ec0 <_Unwind_VRS_Pop+0x1c0>
 8000df2:	462f      	mov	r7, r5
 8000df4:	2d00      	cmp	r5, #0
 8000df6:	d13a      	bne.n	8000e6e <_Unwind_VRS_Pop+0x16e>
 8000df8:	462a      	mov	r2, r5
 8000dfa:	2700      	movs	r7, #0
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e00:	dd72      	ble.n	8000ee8 <_Unwind_VRS_Pop+0x1e8>
 8000e02:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000e06:	4601      	mov	r1, r0
 8000e08:	a844      	add	r0, sp, #272	; 0x110
 8000e0a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000e0e:	388c      	subs	r0, #140	; 0x8c
 8000e10:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e14:	f840 5f04 	str.w	r5, [r0, #4]!
 8000e18:	4291      	cmp	r1, r2
 8000e1a:	d1f9      	bne.n	8000e10 <_Unwind_VRS_Pop+0x110>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	b197      	cbz	r7, 8000e46 <_Unwind_VRS_Pop+0x146>
 8000e20:	2e10      	cmp	r6, #16
 8000e22:	4632      	mov	r2, r6
 8000e24:	a944      	add	r1, sp, #272	; 0x110
 8000e26:	bf38      	it	cc
 8000e28:	2210      	movcc	r2, #16
 8000e2a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000e2e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000e32:	0079      	lsls	r1, r7, #1
 8000e34:	3a04      	subs	r2, #4
 8000e36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000e3a:	f850 5b04 	ldr.w	r5, [r0], #4
 8000e3e:	f842 5f04 	str.w	r5, [r2, #4]!
 8000e42:	4288      	cmp	r0, r1
 8000e44:	d1f9      	bne.n	8000e3a <_Unwind_VRS_Pop+0x13a>
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d048      	beq.n	8000edc <_Unwind_VRS_Pop+0x1dc>
 8000e4a:	2e0f      	cmp	r6, #15
 8000e4c:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e4e:	d933      	bls.n	8000eb8 <_Unwind_VRS_Pop+0x1b8>
 8000e50:	b117      	cbz	r7, 8000e58 <_Unwind_VRS_Pop+0x158>
 8000e52:	a802      	add	r0, sp, #8
 8000e54:	f000 f894 	bl	8000f80 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e765      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000e5c:	2e0f      	cmp	r6, #15
 8000e5e:	f63f af62 	bhi.w	8000d26 <_Unwind_VRS_Pop+0x26>
 8000e62:	2700      	movs	r7, #0
 8000e64:	6822      	ldr	r2, [r4, #0]
 8000e66:	07d1      	lsls	r1, r2, #31
 8000e68:	d417      	bmi.n	8000e9a <_Unwind_VRS_Pop+0x19a>
 8000e6a:	2f00      	cmp	r7, #0
 8000e6c:	d060      	beq.n	8000f30 <_Unwind_VRS_Pop+0x230>
 8000e6e:	6822      	ldr	r2, [r4, #0]
 8000e70:	0751      	lsls	r1, r2, #29
 8000e72:	d445      	bmi.n	8000f00 <_Unwind_VRS_Pop+0x200>
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d04d      	beq.n	8000f14 <_Unwind_VRS_Pop+0x214>
 8000e78:	2e0f      	cmp	r6, #15
 8000e7a:	d806      	bhi.n	8000e8a <_Unwind_VRS_Pop+0x18a>
 8000e7c:	a822      	add	r0, sp, #136	; 0x88
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	f000 f87a 	bl	8000f78 <__gnu_Unwind_Save_VFP_D>
 8000e84:	9b01      	ldr	r3, [sp, #4]
 8000e86:	2f00      	cmp	r7, #0
 8000e88:	d0b6      	beq.n	8000df8 <_Unwind_VRS_Pop+0xf8>
 8000e8a:	a802      	add	r0, sp, #8
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	f000 f87b 	bl	8000f88 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e92:	9b01      	ldr	r3, [sp, #4]
 8000e94:	f1c6 0210 	rsb	r2, r6, #16
 8000e98:	e7b0      	b.n	8000dfc <_Unwind_VRS_Pop+0xfc>
 8000e9a:	f022 0101 	bic.w	r1, r2, #1
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	6021      	str	r1, [r4, #0]
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	d03b      	beq.n	8000f20 <_Unwind_VRS_Pop+0x220>
 8000ea8:	f022 0203 	bic.w	r2, r2, #3
 8000eac:	f840 2b48 	str.w	r2, [r0], #72
 8000eb0:	f000 f85a 	bl	8000f68 <__gnu_Unwind_Save_VFP>
 8000eb4:	9b01      	ldr	r3, [sp, #4]
 8000eb6:	e7d8      	b.n	8000e6a <_Unwind_VRS_Pop+0x16a>
 8000eb8:	a822      	add	r0, sp, #136	; 0x88
 8000eba:	f000 f859 	bl	8000f70 <__gnu_Unwind_Restore_VFP_D>
 8000ebe:	e7c7      	b.n	8000e50 <_Unwind_VRS_Pop+0x150>
 8000ec0:	2f10      	cmp	r7, #16
 8000ec2:	d9ce      	bls.n	8000e62 <_Unwind_VRS_Pop+0x162>
 8000ec4:	3f10      	subs	r7, #16
 8000ec6:	e7cd      	b.n	8000e64 <_Unwind_VRS_Pop+0x164>
 8000ec8:	f023 0310 	bic.w	r3, r3, #16
 8000ecc:	6023      	str	r3, [r4, #0]
 8000ece:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ed2:	9201      	str	r2, [sp, #4]
 8000ed4:	f000 f8aa 	bl	800102c <__gnu_Unwind_Save_WMMXC>
 8000ed8:	9a01      	ldr	r2, [sp, #4]
 8000eda:	e72f      	b.n	8000d3c <_Unwind_VRS_Pop+0x3c>
 8000edc:	3104      	adds	r1, #4
 8000ede:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ee0:	a822      	add	r0, sp, #136	; 0x88
 8000ee2:	f000 f83d 	bl	8000f60 <__gnu_Unwind_Restore_VFP>
 8000ee6:	e7b7      	b.n	8000e58 <_Unwind_VRS_Pop+0x158>
 8000ee8:	2f00      	cmp	r7, #0
 8000eea:	d199      	bne.n	8000e20 <_Unwind_VRS_Pop+0x120>
 8000eec:	4601      	mov	r1, r0
 8000eee:	e7aa      	b.n	8000e46 <_Unwind_VRS_Pop+0x146>
 8000ef0:	f023 0308 	bic.w	r3, r3, #8
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000efa:	f000 f86b 	bl	8000fd4 <__gnu_Unwind_Save_WMMXD>
 8000efe:	e742      	b.n	8000d86 <_Unwind_VRS_Pop+0x86>
 8000f00:	4620      	mov	r0, r4
 8000f02:	f022 0204 	bic.w	r2, r2, #4
 8000f06:	f840 2bd0 	str.w	r2, [r0], #208
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	f000 f83c 	bl	8000f88 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f10:	9b01      	ldr	r3, [sp, #4]
 8000f12:	e7af      	b.n	8000e74 <_Unwind_VRS_Pop+0x174>
 8000f14:	a822      	add	r0, sp, #136	; 0x88
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	f000 f826 	bl	8000f68 <__gnu_Unwind_Save_VFP>
 8000f1c:	9b01      	ldr	r3, [sp, #4]
 8000f1e:	e7b9      	b.n	8000e94 <_Unwind_VRS_Pop+0x194>
 8000f20:	f041 0102 	orr.w	r1, r1, #2
 8000f24:	f840 1b48 	str.w	r1, [r0], #72
 8000f28:	f000 f826 	bl	8000f78 <__gnu_Unwind_Save_VFP_D>
 8000f2c:	9b01      	ldr	r3, [sp, #4]
 8000f2e:	e79c      	b.n	8000e6a <_Unwind_VRS_Pop+0x16a>
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d003      	beq.n	8000f3c <_Unwind_VRS_Pop+0x23c>
 8000f34:	2e0f      	cmp	r6, #15
 8000f36:	f63f af5f 	bhi.w	8000df8 <_Unwind_VRS_Pop+0xf8>
 8000f3a:	e79f      	b.n	8000e7c <_Unwind_VRS_Pop+0x17c>
 8000f3c:	a822      	add	r0, sp, #136	; 0x88
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	f000 f812 	bl	8000f68 <__gnu_Unwind_Save_VFP>
 8000f44:	9b01      	ldr	r3, [sp, #4]
 8000f46:	e757      	b.n	8000df8 <_Unwind_VRS_Pop+0xf8>

08000f48 <__restore_core_regs>:
 8000f48:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f4c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f50:	469c      	mov	ip, r3
 8000f52:	46a6      	mov	lr, r4
 8000f54:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f58:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f5c:	46e5      	mov	sp, ip
 8000f5e:	bd00      	pop	{pc}

08000f60 <__gnu_Unwind_Restore_VFP>:
 8000f60:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__gnu_Unwind_Save_VFP>:
 8000f68:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <__gnu_Unwind_Restore_VFP_D>:
 8000f70:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <__gnu_Unwind_Save_VFP_D>:
 8000f78:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f80:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f88:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__gnu_Unwind_Restore_WMMXD>:
 8000f90:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f94:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f98:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f9c:	ecf0 3102 	ldfe	f3, [r0], #8
 8000fa0:	ecf0 4102 	ldfe	f4, [r0], #8
 8000fa4:	ecf0 5102 	ldfe	f5, [r0], #8
 8000fa8:	ecf0 6102 	ldfe	f6, [r0], #8
 8000fac:	ecf0 7102 	ldfe	f7, [r0], #8
 8000fb0:	ecf0 8102 	ldfp	f0, [r0], #8
 8000fb4:	ecf0 9102 	ldfp	f1, [r0], #8
 8000fb8:	ecf0 a102 	ldfp	f2, [r0], #8
 8000fbc:	ecf0 b102 	ldfp	f3, [r0], #8
 8000fc0:	ecf0 c102 	ldfp	f4, [r0], #8
 8000fc4:	ecf0 d102 	ldfp	f5, [r0], #8
 8000fc8:	ecf0 e102 	ldfp	f6, [r0], #8
 8000fcc:	ecf0 f102 	ldfp	f7, [r0], #8
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__gnu_Unwind_Save_WMMXD>:
 8000fd4:	ece0 0102 	stfe	f0, [r0], #8
 8000fd8:	ece0 1102 	stfe	f1, [r0], #8
 8000fdc:	ece0 2102 	stfe	f2, [r0], #8
 8000fe0:	ece0 3102 	stfe	f3, [r0], #8
 8000fe4:	ece0 4102 	stfe	f4, [r0], #8
 8000fe8:	ece0 5102 	stfe	f5, [r0], #8
 8000fec:	ece0 6102 	stfe	f6, [r0], #8
 8000ff0:	ece0 7102 	stfe	f7, [r0], #8
 8000ff4:	ece0 8102 	stfp	f0, [r0], #8
 8000ff8:	ece0 9102 	stfp	f1, [r0], #8
 8000ffc:	ece0 a102 	stfp	f2, [r0], #8
 8001000:	ece0 b102 	stfp	f3, [r0], #8
 8001004:	ece0 c102 	stfp	f4, [r0], #8
 8001008:	ece0 d102 	stfp	f5, [r0], #8
 800100c:	ece0 e102 	stfp	f6, [r0], #8
 8001010:	ece0 f102 	stfp	f7, [r0], #8
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__gnu_Unwind_Restore_WMMXC>:
 8001018:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800101c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001020:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001024:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__gnu_Unwind_Save_WMMXC>:
 800102c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001030:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001034:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001038:	fca0 b101 	stc2	1, cr11, [r0], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_Unwind_RaiseException>:
 8001040:	46ec      	mov	ip, sp
 8001042:	b500      	push	{lr}
 8001044:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001048:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001054:	a901      	add	r1, sp, #4
 8001056:	f7ff fbf3 	bl	8000840 <__gnu_Unwind_RaiseException>
 800105a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800105e:	b012      	add	sp, #72	; 0x48
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <_Unwind_Resume>:
 8001064:	46ec      	mov	ip, sp
 8001066:	b500      	push	{lr}
 8001068:	e92d 5000 	stmdb	sp!, {ip, lr}
 800106c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001078:	a901      	add	r1, sp, #4
 800107a:	f7ff fc1b 	bl	80008b4 <__gnu_Unwind_Resume>
 800107e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001082:	b012      	add	sp, #72	; 0x48
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <_Unwind_Resume_or_Rethrow>:
 8001088:	46ec      	mov	ip, sp
 800108a:	b500      	push	{lr}
 800108c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001090:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	e92d 000c 	stmdb	sp!, {r2, r3}
 800109c:	a901      	add	r1, sp, #4
 800109e:	f7ff fc2b 	bl	80008f8 <__gnu_Unwind_Resume_or_Rethrow>
 80010a2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010a6:	b012      	add	sp, #72	; 0x48
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Unwind_ForcedUnwind>:
 80010ac:	46ec      	mov	ip, sp
 80010ae:	b500      	push	{lr}
 80010b0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010b4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010c0:	ab01      	add	r3, sp, #4
 80010c2:	f7ff fbed 	bl	80008a0 <__gnu_Unwind_ForcedUnwind>
 80010c6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ca:	b012      	add	sp, #72	; 0x48
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <_Unwind_Backtrace>:
 80010d0:	46ec      	mov	ip, sp
 80010d2:	b500      	push	{lr}
 80010d4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010d8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010e4:	aa01      	add	r2, sp, #4
 80010e6:	f7ff fc65 	bl	80009b4 <__gnu_Unwind_Backtrace>
 80010ea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ee:	b012      	add	sp, #72	; 0x48
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <next_unwind_byte>:
 80010f4:	7a02      	ldrb	r2, [r0, #8]
 80010f6:	b91a      	cbnz	r2, 8001100 <next_unwind_byte+0xc>
 80010f8:	7a43      	ldrb	r3, [r0, #9]
 80010fa:	b943      	cbnz	r3, 800110e <next_unwind_byte+0x1a>
 80010fc:	20b0      	movs	r0, #176	; 0xb0
 80010fe:	4770      	bx	lr
 8001100:	6803      	ldr	r3, [r0, #0]
 8001102:	3a01      	subs	r2, #1
 8001104:	7202      	strb	r2, [r0, #8]
 8001106:	021a      	lsls	r2, r3, #8
 8001108:	6002      	str	r2, [r0, #0]
 800110a:	0e18      	lsrs	r0, r3, #24
 800110c:	4770      	bx	lr
 800110e:	6842      	ldr	r2, [r0, #4]
 8001110:	3b01      	subs	r3, #1
 8001112:	b410      	push	{r4}
 8001114:	7243      	strb	r3, [r0, #9]
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	2103      	movs	r1, #3
 800111a:	1d14      	adds	r4, r2, #4
 800111c:	7201      	strb	r1, [r0, #8]
 800111e:	021a      	lsls	r2, r3, #8
 8001120:	6044      	str	r4, [r0, #4]
 8001122:	6002      	str	r2, [r0, #0]
 8001124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001128:	0e18      	lsrs	r0, r3, #24
 800112a:	4770      	bx	lr

0800112c <_Unwind_GetGR.constprop.0>:
 800112c:	b500      	push	{lr}
 800112e:	b085      	sub	sp, #20
 8001130:	aa03      	add	r2, sp, #12
 8001132:	2300      	movs	r3, #0
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	220c      	movs	r2, #12
 800113a:	f7ff fbed 	bl	8000918 <_Unwind_VRS_Get>
 800113e:	9803      	ldr	r0, [sp, #12]
 8001140:	b005      	add	sp, #20
 8001142:	f85d fb04 	ldr.w	pc, [sp], #4
 8001146:	bf00      	nop

08001148 <unwind_UCB_from_context>:
 8001148:	e7f0      	b.n	800112c <_Unwind_GetGR.constprop.0>
 800114a:	bf00      	nop

0800114c <__gnu_unwind_execute>:
 800114c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001150:	4606      	mov	r6, r0
 8001152:	b085      	sub	sp, #20
 8001154:	460f      	mov	r7, r1
 8001156:	f04f 0800 	mov.w	r8, #0
 800115a:	4638      	mov	r0, r7
 800115c:	f7ff ffca 	bl	80010f4 <next_unwind_byte>
 8001160:	28b0      	cmp	r0, #176	; 0xb0
 8001162:	4604      	mov	r4, r0
 8001164:	d023      	beq.n	80011ae <__gnu_unwind_execute+0x62>
 8001166:	0605      	lsls	r5, r0, #24
 8001168:	d427      	bmi.n	80011ba <__gnu_unwind_execute+0x6e>
 800116a:	2300      	movs	r3, #0
 800116c:	f10d 090c 	add.w	r9, sp, #12
 8001170:	4619      	mov	r1, r3
 8001172:	0085      	lsls	r5, r0, #2
 8001174:	220d      	movs	r2, #13
 8001176:	f8cd 9000 	str.w	r9, [sp]
 800117a:	4630      	mov	r0, r6
 800117c:	f7ff fbcc 	bl	8000918 <_Unwind_VRS_Get>
 8001180:	b2ed      	uxtb	r5, r5
 8001182:	9b03      	ldr	r3, [sp, #12]
 8001184:	f8cd 9000 	str.w	r9, [sp]
 8001188:	0660      	lsls	r0, r4, #25
 800118a:	f105 0504 	add.w	r5, r5, #4
 800118e:	bf4c      	ite	mi
 8001190:	1b5d      	submi	r5, r3, r5
 8001192:	18ed      	addpl	r5, r5, r3
 8001194:	2300      	movs	r3, #0
 8001196:	4619      	mov	r1, r3
 8001198:	220d      	movs	r2, #13
 800119a:	4630      	mov	r0, r6
 800119c:	9503      	str	r5, [sp, #12]
 800119e:	f7ff fbe1 	bl	8000964 <_Unwind_VRS_Set>
 80011a2:	4638      	mov	r0, r7
 80011a4:	f7ff ffa6 	bl	80010f4 <next_unwind_byte>
 80011a8:	28b0      	cmp	r0, #176	; 0xb0
 80011aa:	4604      	mov	r4, r0
 80011ac:	d1db      	bne.n	8001166 <__gnu_unwind_execute+0x1a>
 80011ae:	f1b8 0f00 	cmp.w	r8, #0
 80011b2:	f000 8095 	beq.w	80012e0 <__gnu_unwind_execute+0x194>
 80011b6:	2000      	movs	r0, #0
 80011b8:	e01c      	b.n	80011f4 <__gnu_unwind_execute+0xa8>
 80011ba:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80011be:	2b80      	cmp	r3, #128	; 0x80
 80011c0:	d05d      	beq.n	800127e <__gnu_unwind_execute+0x132>
 80011c2:	2b90      	cmp	r3, #144	; 0x90
 80011c4:	d019      	beq.n	80011fa <__gnu_unwind_execute+0xae>
 80011c6:	2ba0      	cmp	r3, #160	; 0xa0
 80011c8:	d02c      	beq.n	8001224 <__gnu_unwind_execute+0xd8>
 80011ca:	2bb0      	cmp	r3, #176	; 0xb0
 80011cc:	d03f      	beq.n	800124e <__gnu_unwind_execute+0x102>
 80011ce:	2bc0      	cmp	r3, #192	; 0xc0
 80011d0:	d06c      	beq.n	80012ac <__gnu_unwind_execute+0x160>
 80011d2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80011d6:	2bd0      	cmp	r3, #208	; 0xd0
 80011d8:	d10b      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 80011da:	f000 0207 	and.w	r2, r0, #7
 80011de:	3201      	adds	r2, #1
 80011e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011e4:	2305      	movs	r3, #5
 80011e6:	2101      	movs	r1, #1
 80011e8:	4630      	mov	r0, r6
 80011ea:	f7ff fd89 	bl	8000d00 <_Unwind_VRS_Pop>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d0b3      	beq.n	800115a <__gnu_unwind_execute+0xe>
 80011f2:	2009      	movs	r0, #9
 80011f4:	b005      	add	sp, #20
 80011f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011fa:	f000 030d 	and.w	r3, r0, #13
 80011fe:	2b0d      	cmp	r3, #13
 8001200:	d0f7      	beq.n	80011f2 <__gnu_unwind_execute+0xa6>
 8001202:	ad03      	add	r5, sp, #12
 8001204:	2300      	movs	r3, #0
 8001206:	f000 020f 	and.w	r2, r0, #15
 800120a:	4619      	mov	r1, r3
 800120c:	9500      	str	r5, [sp, #0]
 800120e:	4630      	mov	r0, r6
 8001210:	f7ff fb82 	bl	8000918 <_Unwind_VRS_Get>
 8001214:	2300      	movs	r3, #0
 8001216:	9500      	str	r5, [sp, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	220d      	movs	r2, #13
 800121c:	4630      	mov	r0, r6
 800121e:	f7ff fba1 	bl	8000964 <_Unwind_VRS_Set>
 8001222:	e79a      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001224:	43c2      	mvns	r2, r0
 8001226:	f002 0307 	and.w	r3, r2, #7
 800122a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800122e:	411a      	asrs	r2, r3
 8001230:	0701      	lsls	r1, r0, #28
 8001232:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	bf48      	it	mi
 800123c:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001240:	4619      	mov	r1, r3
 8001242:	4630      	mov	r0, r6
 8001244:	f7ff fd5c 	bl	8000d00 <_Unwind_VRS_Pop>
 8001248:	2800      	cmp	r0, #0
 800124a:	d1d2      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 800124c:	e785      	b.n	800115a <__gnu_unwind_execute+0xe>
 800124e:	28b1      	cmp	r0, #177	; 0xb1
 8001250:	d057      	beq.n	8001302 <__gnu_unwind_execute+0x1b6>
 8001252:	28b2      	cmp	r0, #178	; 0xb2
 8001254:	d068      	beq.n	8001328 <__gnu_unwind_execute+0x1dc>
 8001256:	28b3      	cmp	r0, #179	; 0xb3
 8001258:	f000 8095 	beq.w	8001386 <__gnu_unwind_execute+0x23a>
 800125c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001260:	2bb4      	cmp	r3, #180	; 0xb4
 8001262:	d0c6      	beq.n	80011f2 <__gnu_unwind_execute+0xa6>
 8001264:	f000 0207 	and.w	r2, r0, #7
 8001268:	3201      	adds	r2, #1
 800126a:	2301      	movs	r3, #1
 800126c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001270:	4619      	mov	r1, r3
 8001272:	4630      	mov	r0, r6
 8001274:	f7ff fd44 	bl	8000d00 <_Unwind_VRS_Pop>
 8001278:	2800      	cmp	r0, #0
 800127a:	d1ba      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 800127c:	e76d      	b.n	800115a <__gnu_unwind_execute+0xe>
 800127e:	4638      	mov	r0, r7
 8001280:	f7ff ff38 	bl	80010f4 <next_unwind_byte>
 8001284:	0224      	lsls	r4, r4, #8
 8001286:	4304      	orrs	r4, r0
 8001288:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800128c:	d0b1      	beq.n	80011f2 <__gnu_unwind_execute+0xa6>
 800128e:	0124      	lsls	r4, r4, #4
 8001290:	2300      	movs	r3, #0
 8001292:	b2a2      	uxth	r2, r4
 8001294:	4619      	mov	r1, r3
 8001296:	4630      	mov	r0, r6
 8001298:	f7ff fd32 	bl	8000d00 <_Unwind_VRS_Pop>
 800129c:	2800      	cmp	r0, #0
 800129e:	d1a8      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 80012a0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80012a4:	bf18      	it	ne
 80012a6:	f04f 0801 	movne.w	r8, #1
 80012aa:	e756      	b.n	800115a <__gnu_unwind_execute+0xe>
 80012ac:	28c6      	cmp	r0, #198	; 0xc6
 80012ae:	d07d      	beq.n	80013ac <__gnu_unwind_execute+0x260>
 80012b0:	28c7      	cmp	r0, #199	; 0xc7
 80012b2:	f000 8086 	beq.w	80013c2 <__gnu_unwind_execute+0x276>
 80012b6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80012ba:	2bc0      	cmp	r3, #192	; 0xc0
 80012bc:	f000 8094 	beq.w	80013e8 <__gnu_unwind_execute+0x29c>
 80012c0:	28c8      	cmp	r0, #200	; 0xc8
 80012c2:	f000 809f 	beq.w	8001404 <__gnu_unwind_execute+0x2b8>
 80012c6:	28c9      	cmp	r0, #201	; 0xc9
 80012c8:	d193      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 80012ca:	4638      	mov	r0, r7
 80012cc:	f7ff ff12 	bl	80010f4 <next_unwind_byte>
 80012d0:	0302      	lsls	r2, r0, #12
 80012d2:	f000 000f 	and.w	r0, r0, #15
 80012d6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80012da:	3001      	adds	r0, #1
 80012dc:	4302      	orrs	r2, r0
 80012de:	e781      	b.n	80011e4 <__gnu_unwind_execute+0x98>
 80012e0:	ac03      	add	r4, sp, #12
 80012e2:	4643      	mov	r3, r8
 80012e4:	220e      	movs	r2, #14
 80012e6:	4641      	mov	r1, r8
 80012e8:	9400      	str	r4, [sp, #0]
 80012ea:	4630      	mov	r0, r6
 80012ec:	f7ff fb14 	bl	8000918 <_Unwind_VRS_Get>
 80012f0:	9400      	str	r4, [sp, #0]
 80012f2:	4630      	mov	r0, r6
 80012f4:	4643      	mov	r3, r8
 80012f6:	220f      	movs	r2, #15
 80012f8:	4641      	mov	r1, r8
 80012fa:	f7ff fb33 	bl	8000964 <_Unwind_VRS_Set>
 80012fe:	4640      	mov	r0, r8
 8001300:	e778      	b.n	80011f4 <__gnu_unwind_execute+0xa8>
 8001302:	4638      	mov	r0, r7
 8001304:	f7ff fef6 	bl	80010f4 <next_unwind_byte>
 8001308:	2800      	cmp	r0, #0
 800130a:	f43f af72 	beq.w	80011f2 <__gnu_unwind_execute+0xa6>
 800130e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001312:	f47f af6e 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 8001316:	4602      	mov	r2, r0
 8001318:	4619      	mov	r1, r3
 800131a:	4630      	mov	r0, r6
 800131c:	f7ff fcf0 	bl	8000d00 <_Unwind_VRS_Pop>
 8001320:	2800      	cmp	r0, #0
 8001322:	f47f af66 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 8001326:	e718      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001328:	2300      	movs	r3, #0
 800132a:	f10d 090c 	add.w	r9, sp, #12
 800132e:	220d      	movs	r2, #13
 8001330:	4619      	mov	r1, r3
 8001332:	f8cd 9000 	str.w	r9, [sp]
 8001336:	4630      	mov	r0, r6
 8001338:	f7ff faee 	bl	8000918 <_Unwind_VRS_Get>
 800133c:	4638      	mov	r0, r7
 800133e:	f7ff fed9 	bl	80010f4 <next_unwind_byte>
 8001342:	0602      	lsls	r2, r0, #24
 8001344:	f04f 0402 	mov.w	r4, #2
 8001348:	d50c      	bpl.n	8001364 <__gnu_unwind_execute+0x218>
 800134a:	9b03      	ldr	r3, [sp, #12]
 800134c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001350:	40a0      	lsls	r0, r4
 8001352:	4403      	add	r3, r0
 8001354:	4638      	mov	r0, r7
 8001356:	9303      	str	r3, [sp, #12]
 8001358:	f7ff fecc 	bl	80010f4 <next_unwind_byte>
 800135c:	0603      	lsls	r3, r0, #24
 800135e:	f104 0407 	add.w	r4, r4, #7
 8001362:	d4f2      	bmi.n	800134a <__gnu_unwind_execute+0x1fe>
 8001364:	9b03      	ldr	r3, [sp, #12]
 8001366:	f8cd 9000 	str.w	r9, [sp]
 800136a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800136e:	40a2      	lsls	r2, r4
 8001370:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001374:	2300      	movs	r3, #0
 8001376:	4414      	add	r4, r2
 8001378:	4619      	mov	r1, r3
 800137a:	220d      	movs	r2, #13
 800137c:	4630      	mov	r0, r6
 800137e:	9403      	str	r4, [sp, #12]
 8001380:	f7ff faf0 	bl	8000964 <_Unwind_VRS_Set>
 8001384:	e6e9      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001386:	4638      	mov	r0, r7
 8001388:	f7ff feb4 	bl	80010f4 <next_unwind_byte>
 800138c:	0301      	lsls	r1, r0, #12
 800138e:	f000 000f 	and.w	r0, r0, #15
 8001392:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001396:	1c42      	adds	r2, r0, #1
 8001398:	2301      	movs	r3, #1
 800139a:	430a      	orrs	r2, r1
 800139c:	4630      	mov	r0, r6
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fcae 	bl	8000d00 <_Unwind_VRS_Pop>
 80013a4:	2800      	cmp	r0, #0
 80013a6:	f47f af24 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013aa:	e6d6      	b.n	800115a <__gnu_unwind_execute+0xe>
 80013ac:	4638      	mov	r0, r7
 80013ae:	f7ff fea1 	bl	80010f4 <next_unwind_byte>
 80013b2:	0301      	lsls	r1, r0, #12
 80013b4:	f000 000f 	and.w	r0, r0, #15
 80013b8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80013bc:	1c42      	adds	r2, r0, #1
 80013be:	2303      	movs	r3, #3
 80013c0:	e7eb      	b.n	800139a <__gnu_unwind_execute+0x24e>
 80013c2:	4638      	mov	r0, r7
 80013c4:	f7ff fe96 	bl	80010f4 <next_unwind_byte>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	f43f af12 	beq.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013ce:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80013d2:	f47f af0e 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013d6:	4602      	mov	r2, r0
 80013d8:	2104      	movs	r1, #4
 80013da:	4630      	mov	r0, r6
 80013dc:	f7ff fc90 	bl	8000d00 <_Unwind_VRS_Pop>
 80013e0:	2800      	cmp	r0, #0
 80013e2:	f47f af06 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013e6:	e6b8      	b.n	800115a <__gnu_unwind_execute+0xe>
 80013e8:	f000 020f 	and.w	r2, r0, #15
 80013ec:	3201      	adds	r2, #1
 80013ee:	2303      	movs	r3, #3
 80013f0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80013f4:	4619      	mov	r1, r3
 80013f6:	4630      	mov	r0, r6
 80013f8:	f7ff fc82 	bl	8000d00 <_Unwind_VRS_Pop>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	f47f aef8 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 8001402:	e6aa      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001404:	4638      	mov	r0, r7
 8001406:	f7ff fe75 	bl	80010f4 <next_unwind_byte>
 800140a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800140e:	f000 030f 	and.w	r3, r0, #15
 8001412:	3210      	adds	r2, #16
 8001414:	3301      	adds	r3, #1
 8001416:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800141a:	e6e3      	b.n	80011e4 <__gnu_unwind_execute+0x98>

0800141c <__gnu_unwind_frame>:
 800141c:	b510      	push	{r4, lr}
 800141e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001420:	b084      	sub	sp, #16
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	2003      	movs	r0, #3
 8001426:	f88d 000c 	strb.w	r0, [sp, #12]
 800142a:	79dc      	ldrb	r4, [r3, #7]
 800142c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001430:	0212      	lsls	r2, r2, #8
 8001432:	3308      	adds	r3, #8
 8001434:	4608      	mov	r0, r1
 8001436:	a901      	add	r1, sp, #4
 8001438:	9201      	str	r2, [sp, #4]
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	f7ff fe86 	bl	800114c <__gnu_unwind_execute>
 8001440:	b004      	add	sp, #16
 8001442:	bd10      	pop	{r4, pc}

08001444 <_Unwind_GetRegionStart>:
 8001444:	b508      	push	{r3, lr}
 8001446:	f7ff fe7f 	bl	8001148 <unwind_UCB_from_context>
 800144a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800144c:	bd08      	pop	{r3, pc}
 800144e:	bf00      	nop

08001450 <_Unwind_GetLanguageSpecificData>:
 8001450:	b508      	push	{r3, lr}
 8001452:	f7ff fe79 	bl	8001148 <unwind_UCB_from_context>
 8001456:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001458:	79c3      	ldrb	r3, [r0, #7]
 800145a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800145e:	3008      	adds	r0, #8
 8001460:	bd08      	pop	{r3, pc}
 8001462:	bf00      	nop

08001464 <_Unwind_GetTextRelBase>:
 8001464:	b508      	push	{r3, lr}
 8001466:	f004 fe87 	bl	8006178 <abort>
 800146a:	bf00      	nop

0800146c <_Unwind_GetDataRelBase>:
 800146c:	b508      	push	{r3, lr}
 800146e:	f7ff fff9 	bl	8001464 <_Unwind_GetTextRelBase>
 8001472:	bf00      	nop

08001474 <__aeabi_idiv0>:
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <_Z6apInitv>:




void apInit(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);
 800147c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001480:	2000      	movs	r0, #0
 8001482:	f000 fc25 	bl	8001cd0 <uartOpen>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <_Z6apMainv>:

void apMain(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  uint32_t pre_time;


  while(1)
  {
    if (millis()-pre_time >= 500)
 8001492:	f000 fb4f 	bl	8001b34 <millis>
 8001496:	4602      	mov	r2, r0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f240 12f3 	movw	r2, #499	; 0x1f3
 80014a0:	4293      	cmp	r3, r2
 80014a2:	bf8c      	ite	hi
 80014a4:	2301      	movhi	r3, #1
 80014a6:	2300      	movls	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <_Z6apMainv+0x30>
    {
      pre_time = millis();
 80014ae:	f000 fb41 	bl	8001b34 <millis>
 80014b2:	4603      	mov	r3, r0
 80014b4:	607b      	str	r3, [r7, #4]
      ledToggle(_DEF_LED1);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 fb92 	bl	8001be0 <ledToggle>
    }

    if (uartAvailable(_DEF_UART1) > 0)
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 fcc5 	bl	8001e4c <uartAvailable>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf14      	ite	ne
 80014c8:	2301      	movne	r3, #1
 80014ca:	2300      	moveq	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0df      	beq.n	8001492 <_Z6apMainv+0x6>
    {
      logPrintf("rx : 0x%X\n", uartRead(_DEF_UART1));
 80014d2:	2000      	movs	r0, #0
 80014d4:	f000 fdaa 	bl	800202c <uartRead>
 80014d8:	4603      	mov	r3, r0
 80014da:	4619      	mov	r1, r3
 80014dc:	4801      	ldr	r0, [pc, #4]	; (80014e4 <_Z6apMainv+0x58>)
 80014de:	f003 ff47 	bl	8005370 <iprintf>
    if (millis()-pre_time >= 500)
 80014e2:	e7d6      	b.n	8001492 <_Z6apMainv+0x6>
 80014e4:	08006228 	.word	0x08006228

080014e8 <bspInit>:
extern int32_t uartWrite(uint8_t channel, uint8_t *p_data, uint32_t length);



void bspInit(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
  HAL_Init();
 80014ee:	f000 ff27 	bl	8002340 <HAL_Init>


  SystemClock_Config();
 80014f2:	f000 f82f 	bl	8001554 <SystemClock_Config>


  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <bspInit+0x48>)
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <bspInit+0x48>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <bspInit+0x48>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <bspInit+0x48>)
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <bspInit+0x48>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <bspInit+0x48>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <__io_putchar>:


int __io_putchar(int ch)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  //ITM_SendChar(ch);
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2201      	movs	r2, #1
 8001540:	4619      	mov	r1, r3
 8001542:	2000      	movs	r0, #0
 8001544:	f000 fd28 	bl	8001f98 <uartWrite>

  return 1;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0ac      	sub	sp, #176	; 0xb0
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800155e:	2244      	movs	r2, #68	; 0x44
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fefc 	bl	8005360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2254      	movs	r2, #84	; 0x54
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f003 feee 	bl	8005360 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001584:	f001 fd20 	bl	8002fc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001588:	4a31      	ldr	r2, [pc, #196]	; (8001650 <SystemClock_Config+0xfc>)
 800158a:	4b31      	ldr	r3, [pc, #196]	; (8001650 <SystemClock_Config+0xfc>)
 800158c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001590:	f023 0318 	bic.w	r3, r3, #24
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001598:	2306      	movs	r3, #6
 800159a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800159c:	2301      	movs	r3, #1
 800159e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a6:	2310      	movs	r3, #16
 80015a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015bc:	230a      	movs	r3, #10
 80015be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015c2:	2307      	movs	r3, #7
 80015c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 fd69 	bl	80030b0 <HAL_RCC_OscConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015e4:	f000 f836 	bl	8001654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e8:	230f      	movs	r3, #15
 80015ea:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ec:	2303      	movs	r3, #3
 80015ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001600:	2104      	movs	r1, #4
 8001602:	4618      	mov	r0, r3
 8001604:	f002 f942 	bl	800388c <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800160e:	f000 f821 	bl	8001654 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 8001612:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 8001616:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800161c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001620:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f002 fb35 	bl	8003c94 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001630:	f000 f810 	bl	8001654 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001634:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001638:	f001 fce4 	bl	8003004 <HAL_PWREx_ControlVoltageScaling>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001642:	f000 f807 	bl	8001654 <Error_Handler>
  }
}
 8001646:	bf00      	nop
 8001648:	37b0      	adds	r7, #176	; 0xb0
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <Error_Handler>:

void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  while(1)
 8001658:	e7fe      	b.n	8001658 <Error_Handler+0x4>
	...

0800165c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001660:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <SystemInit+0x64>)
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <SystemInit+0x64>)
 8001664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800166c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <SystemInit+0x68>)
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <SystemInit+0x68>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <SystemInit+0x68>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <SystemInit+0x68>)
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <SystemInit+0x68>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800168c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001690:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <SystemInit+0x68>)
 8001694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001698:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SystemInit+0x68>)
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <SystemInit+0x68>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <SystemInit+0x68>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SystemInit+0x64>)
 80016ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b2:	609a      	str	r2, [r3, #8]
#endif
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	40021000 	.word	0x40021000

080016c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001700 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016ce:	e003      	b.n	80016d8 <LoopCopyDataInit>

080016d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016d6:	3104      	adds	r1, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <LoopForever+0xe>)
	adds	r2, r0, r1
 80016dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016e0:	d3f6      	bcc.n	80016d0 <CopyDataInit>
	ldr	r2, =_sbss
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016e4:	e002      	b.n	80016ec <LoopFillZerobss>

080016e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016e8:	f842 3b04 	str.w	r3, [r2], #4

080016ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <LoopForever+0x16>)
	cmp	r2, r3
 80016ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016f0:	d3f9      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016f2:	f7ff ffb3 	bl	800165c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f6:	f003 fe0f 	bl	8005318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fa:	f003 fdfb 	bl	80052f4 <main>

080016fe <LoopForever>:

LoopForever:
    b LoopForever
 80016fe:	e7fe      	b.n	80016fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001700:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8001704:	08006444 	.word	0x08006444
	ldr	r0, =_sdata
 8001708:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800170c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001710:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001714:	200009a0 	.word	0x200009a0

08001718 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_IRQHandler>

0800171a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800172c:	e7fe      	b.n	800172c <HardFault_Handler+0x4>

0800172e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001732:	e7fe      	b.n	8001732 <MemManage_Handler+0x4>

08001734 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001738:	e7fe      	b.n	8001738 <BusFault_Handler+0x4>

0800173a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800173e:	e7fe      	b.n	800173e <UsageFault_Handler+0x4>

08001740 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800176e:	f000 fe41 	bl	80023f4 <HAL_IncTick>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <_sbrk>:




caddr_t _sbrk(int incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end,*min_stack_ptr;

  if (heap_end == 0)
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <_sbrk+0x60>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x16>
    heap_end = &end;
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <_sbrk+0x60>)
 800178a:	4a14      	ldr	r2, [pc, #80]	; (80017dc <_sbrk+0x64>)
 800178c:	601a      	str	r2, [r3, #0]

  prev_heap_end = heap_end;
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <_sbrk+0x60>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]

#ifdef FreeRTOS
  /* Use the NVIC offset register to locate the main stack pointer. */
  min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <_sbrk+0x68>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	60bb      	str	r3, [r7, #8]
  /* Locate the STACK bottom address */
  min_stack_ptr -= MAX_STACK_SIZE;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80017a2:	60bb      	str	r3, [r7, #8]

  if (heap_end + incr > min_stack_ptr)
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <_sbrk+0x60>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	441a      	add	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d907      	bls.n	80017c2 <_sbrk+0x4a>
  if (heap_end + incr > stack_ptr)
#endif
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 80017b2:	f003 fdab 	bl	800530c <__errno>
 80017b6:	4602      	mov	r2, r0
 80017b8:	230c      	movs	r3, #12
 80017ba:	6013      	str	r3, [r2, #0]
    return (caddr_t) -1;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
 80017c0:	e006      	b.n	80017d0 <_sbrk+0x58>
  }

  heap_end += incr;
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <_sbrk+0x60>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a03      	ldr	r2, [pc, #12]	; (80017d8 <_sbrk+0x60>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000008c 	.word	0x2000008c
 80017dc:	200009a0 	.word	0x200009a0
 80017e0:	e000ed08 	.word	0xe000ed08

080017e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return 1;
 80017e8:	2301      	movs	r3, #1
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <_kill>:

int _kill(int pid, int sig)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  errno = EINVAL;
 80017fe:	f003 fd85 	bl	800530c <__errno>
 8001802:	4602      	mov	r2, r0
 8001804:	2316      	movs	r3, #22
 8001806:	6013      	str	r3, [r2, #0]
  return -1;
 8001808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_exit>:

void _exit (int status)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ffe7 	bl	80017f4 <_kill>
  while (1) {}
 8001826:	e7fe      	b.n	8001826 <_exit+0x12>

08001828 <_write>:
}

int _write(int file, char *ptr, int len)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e009      	b.n	800184e <_write+0x26>
    {
       __io_putchar( *ptr++ );
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	60ba      	str	r2, [r7, #8]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fe76 	bl	8001534 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	dbf1      	blt.n	800183a <_write+0x12>
    }
  return len;
 8001856:	687b      	ldr	r3, [r7, #4]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_close>:

int _close(int file)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  printf("close 0x%X\n", file);
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4804      	ldr	r0, [pc, #16]	; (800187c <_close+0x1c>)
 800186c:	f003 fd80 	bl	8005370 <iprintf>

  return -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	08006234 	.word	0x08006234

08001880 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  st->st_mode = S_IFCHR;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001890:	605a      	str	r2, [r3, #4]
  return 0;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_isatty>:

int _isatty(int file)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return 1;
 80018a8:	2301      	movs	r3, #1
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b085      	sub	sp, #20
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  return 0;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_read>:

int _read(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  int DataIdx;
  int rx_data;


  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e03c      	b.n	800195c <_read+0x8c>
  {
    rx_data = __io_getchar();
 80018e2:	f3af 8000 	nop.w
 80018e6:	6138      	str	r0, [r7, #16]

    if (file == STDIN_FILENO)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d12d      	bne.n	800194a <_read+0x7a>
    {
      if (rx_data == '\n')
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b0a      	cmp	r3, #10
 80018f2:	d110      	bne.n	8001916 <_read+0x46>
      {
        *ptr++ = '\n'; __io_putchar(rx_data);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	60ba      	str	r2, [r7, #8]
 80018fa:	220a      	movs	r2, #10
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	6938      	ldr	r0, [r7, #16]
 8001900:	f7ff fe18 	bl	8001534 <__io_putchar>
        *ptr++ = EOF;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	22ff      	movs	r2, #255	; 0xff
 800190c:	701a      	strb	r2, [r3, #0]
        len = DataIdx + 1;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	607b      	str	r3, [r7, #4]
        break;
 8001914:	e026      	b.n	8001964 <_read+0x94>
      }
      else if (rx_data == 0x08)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	2b08      	cmp	r3, #8
 800191a:	d10c      	bne.n	8001936 <_read+0x66>
      {
        if (DataIdx > 0)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	dd19      	ble.n	8001956 <_read+0x86>
        {
          ptr--;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	3b01      	subs	r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
          DataIdx--;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3b01      	subs	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
          __io_putchar(rx_data);
 800192e:	6938      	ldr	r0, [r7, #16]
 8001930:	f7ff fe00 	bl	8001534 <__io_putchar>
 8001934:	e00f      	b.n	8001956 <_read+0x86>
        }
      }
      else
      {
        *ptr++ = rx_data;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	60ba      	str	r2, [r7, #8]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]
        __io_putchar(rx_data);
 8001942:	6938      	ldr	r0, [r7, #16]
 8001944:	f7ff fdf6 	bl	8001534 <__io_putchar>
 8001948:	e005      	b.n	8001956 <_read+0x86>
      }
    }
    else
    {
      *ptr++ = rx_data;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	60ba      	str	r2, [r7, #8]
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbbe      	blt.n	80018e2 <_read+0x12>
    }
  }

  return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800196e:	b480      	push	{r7}
 8001970:	b087      	sub	sp, #28
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800197a:	2301      	movs	r3, #1
 800197c:	75fb      	strb	r3, [r7, #23]


  p_node->ptr_in  = 0;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
  p_node->length  = length;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
  p_node->p_buf   = p_buf;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	60da      	str	r2, [r3, #12]

  if (p_node->p_buf == NULL)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d104      	bne.n	80019a8 <qbufferCreate+0x3a>
  {
    p_node->length = 0;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
    ret = false;
 80019a4:	2300      	movs	r3, #0
 80019a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b089      	sub	sp, #36	; 0x24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80019c2:	2301      	movs	r3, #1
 80019c4:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if (p_node->p_buf == NULL) return false;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <qbufferWrite+0x1c>
 80019ce:	2300      	movs	r3, #0
 80019d0:	e02d      	b.n	8001a2e <qbufferWrite+0x78>


  for (i=0; i<length; i++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e025      	b.n	8001a24 <qbufferWrite+0x6e>
  {
    index      = p_node->ptr_in;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_in + 1;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	61bb      	str	r3, [r7, #24]

    if (next_index == p_node->length)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d101      	bne.n	80019f4 <qbufferWrite+0x3e>
    {
      next_index = 0;;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
    }

    if (next_index != p_node->ptr_out)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d00c      	beq.n	8001a18 <qbufferWrite+0x62>
    {
      p_node->p_buf[index] = p_data[i];
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4413      	add	r3, r2
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	440a      	add	r2, r1
 8001a0c:	7812      	ldrb	r2, [r2, #0]
 8001a0e:	701a      	strb	r2, [r3, #0]
      p_node->ptr_in       = next_index;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e002      	b.n	8001a1e <qbufferWrite+0x68>
    }
    else
    {
      ret = false; // ERR_FULL
 8001a18:	2300      	movs	r3, #0
 8001a1a:	77fb      	strb	r3, [r7, #31]
      break;
 8001a1c:	e006      	b.n	8001a2c <qbufferWrite+0x76>
  for (i=0; i<length; i++)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d3d5      	bcc.n	80019d8 <qbufferWrite+0x22>
    }
  }

  return ret;
 8001a2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b089      	sub	sp, #36	; 0x24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001a46:	2301      	movs	r3, #1
 8001a48:	77fb      	strb	r3, [r7, #31]
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if (p_node->p_buf == NULL) return false;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <qbufferRead+0x1c>
 8001a52:	2300      	movs	r3, #0
 8001a54:	e02d      	b.n	8001ab2 <qbufferRead+0x78>


  for (i=0; i<length; i++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e025      	b.n	8001aa8 <qbufferRead+0x6e>
  {
    index      = p_node->ptr_out;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	613b      	str	r3, [r7, #16]
    next_index = p_node->ptr_out + 1;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	3301      	adds	r3, #1
 8001a68:	61bb      	str	r3, [r7, #24]

    if (next_index == p_node->length)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d101      	bne.n	8001a78 <qbufferRead+0x3e>
    {
      next_index = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61bb      	str	r3, [r7, #24]
    }

    if (index != p_node->ptr_in)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d00c      	beq.n	8001a9c <qbufferRead+0x62>
    {
      p_data[i]       = p_node->p_buf[index];
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	4413      	add	r3, r2
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	68d1      	ldr	r1, [r2, #12]
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	440a      	add	r2, r1
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	701a      	strb	r2, [r3, #0]
      p_node->ptr_out = next_index;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	e002      	b.n	8001aa2 <qbufferRead+0x68>
    }
    else
    {
      ret = false; // ERR_EMPTY
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	77fb      	strb	r3, [r7, #31]
      break;
 8001aa0:	e006      	b.n	8001ab0 <qbufferRead+0x76>
  for (i=0; i<length; i++)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d3d5      	bcc.n	8001a5c <qbufferRead+0x22>
    }
  }

  return ret;
 8001ab0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  uint32_t length;


  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	441a      	add	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6892      	ldr	r2, [r2, #8]
 8001ada:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ade:	fb02 f201 	mul.w	r2, r2, r1
 8001ae2:	1a9b      	subs	r3, r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]

  return length;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  p_node->ptr_in  = 0;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
  p_node->ptr_out = 0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	605a      	str	r2, [r3, #4]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <delayInit>:




bool delayInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return true;
 8001b18:	2301      	movs	r3, #1
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <millisInit>:
#include "millis.h"



bool millisInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return true;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <millis>:

uint32_t millis(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001b38:	f000 fc6e 	bl	8002418 <HAL_GetTick>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <ledInit>:

static bool is_init = false;


bool ledInit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef  gpio_init_structure;

  /* Configure the GPIO_LED pin */

  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]


  for (i=0; i<LED_MAX_CH; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e016      	b.n	8001b8a <ledInit+0x46>
  {
    gpio_init_structure.Pin = led_tbl[i].pin;
 8001b5c:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <ledInit+0x5c>)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	889b      	ldrh	r3, [r3, #4]
 8001b66:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(led_tbl[i].port, &gpio_init_structure);
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <ledInit+0x5c>)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b70:	463a      	mov	r2, r7
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 ffc1 	bl	8002afc <HAL_GPIO_Init>

    ledOff(i);
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f812 	bl	8001ba8 <ledOff>
  for (i=0; i<LED_MAX_CH; i++)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0e5      	beq.n	8001b5c <ledInit+0x18>
  }


  is_init = true;
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <ledInit+0x60>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]

  return true;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	08006298 	.word	0x08006298
 8001ba4:	20000090 	.word	0x20000090

08001ba8 <ledOff>:
    HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
  }
}

void ledOff(uint8_t ch)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  if (ch < LED_MAX_CH)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10c      	bne.n	8001bd2 <ledOff+0x2a>
  {
    HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <ledOff+0x34>)
 8001bbc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <ledOff+0x34>)
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	889b      	ldrh	r3, [r3, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f001 f9c9 	bl	8002f64 <HAL_GPIO_WritePin>
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	08006298 	.word	0x08006298

08001be0 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if (ch < LED_MAX_CH)
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10b      	bne.n	8001c08 <ledToggle+0x28>
  {
    HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <ledToggle+0x30>)
 8001bf4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <ledToggle+0x30>)
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	889b      	ldrh	r3, [r3, #4]
 8001c02:	4619      	mov	r1, r3
 8001c04:	f001 f9c6 	bl	8002f94 <HAL_GPIO_TogglePin>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	08006298 	.word	0x08006298

08001c14 <uartInit>:
void uartRxHandler(uint8_t channel);



bool uartInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
  uint8_t i;


  for (i=0; i<UART_MAX_CH; i++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	71fb      	strb	r3, [r7, #7]
 8001c1e:	e04a      	b.n	8001cb6 <uartInit+0xa2>
  {
    uart_tbl[i].is_open  = false;
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	4a2a      	ldr	r2, [pc, #168]	; (8001ccc <uartInit+0xb8>)
 8001c24:	f640 0134 	movw	r1, #2100	; 0x834
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].rx_mode  = UART_MODE_POLLING;
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4a25      	ldr	r2, [pc, #148]	; (8001ccc <uartInit+0xb8>)
 8001c36:	f640 0134 	movw	r1, #2100	; 0x834
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	3309      	adds	r3, #9
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_mode  = UART_MODE_POLLING;
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <uartInit+0xb8>)
 8001c4a:	f640 0134 	movw	r1, #2100	; 0x834
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	3308      	adds	r3, #8
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].tx_done  = false;
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <uartInit+0xb8>)
 8001c5e:	f640 0134 	movw	r1, #2100	; 0x834
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].txDoneISR = NULL;
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <uartInit+0xb8>)
 8001c74:	f640 0134 	movw	r1, #2100	; 0x834
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
    uart_tbl[i].err_cnt  = 0;
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <uartInit+0xb8>)
 8001c8a:	f640 0134 	movw	r1, #2100	; 0x834
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
    uart_tbl[i].hw_driver = UART_HW_NONE;
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <uartInit+0xb8>)
 8001ca0:	f640 0134 	movw	r1, #2100	; 0x834
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	330a      	adds	r3, #10
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
  for (i=0; i<UART_MAX_CH; i++)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	71fb      	strb	r3, [r7, #7]
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0b1      	beq.n	8001c20 <uartInit+0xc>
  }

  return true;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000094 	.word	0x20000094

08001cd0 <uartOpen>:

bool uartOpen(uint8_t channel, uint32_t baud)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
  uart_t *p_uart;


  if (channel >= UART_MAX_CH)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <uartOpen+0x1a>
  {
    return false;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e071      	b.n	8001dce <uartOpen+0xfe>
  }

  switch(channel)
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d16d      	bne.n	8001dcc <uartOpen+0xfc>
  {
    case _DEF_UART1:
      p_uart = &uart_tbl[channel];
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f640 0234 	movw	r2, #2100	; 0x834
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	4a37      	ldr	r2, [pc, #220]	; (8001dd8 <uartOpen+0x108>)
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]

      p_uart->baud      = baud;
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	605a      	str	r2, [r3, #4]
      p_uart->hw_driver = UART_HW_STM32_UART;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	729a      	strb	r2, [r3, #10]
      p_uart->rx_mode   = UART_MODE_DMA;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	725a      	strb	r2, [r3, #9]
      p_uart->tx_mode   = UART_MODE_POLLING;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2200      	movs	r2, #0
 8001d16:	721a      	strb	r2, [r3, #8]

      p_uart->hdma_rx = &hdma_usart2_rx;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <uartOpen+0x10c>)
 8001d1c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
      p_uart->handle =  &huart2;
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4a2f      	ldr	r2, [pc, #188]	; (8001de0 <uartOpen+0x110>)
 8001d24:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
      p_uart->handle->Instance = USART2;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001d2e:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <uartOpen+0x114>)
 8001d30:	601a      	str	r2, [r3, #0]

      p_uart->handle->Init.BaudRate     = baud;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
      p_uart->handle->Init.WordLength   = UART_WORDLENGTH_8B;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
      p_uart->handle->Init.StopBits     = UART_STOPBITS_1;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
      p_uart->handle->Init.Parity       = UART_PARITY_NONE;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
      p_uart->handle->Init.Mode         = UART_MODE_TX_RX;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001d60:	220c      	movs	r2, #12
 8001d62:	615a      	str	r2, [r3, #20]
      p_uart->handle->Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
      p_uart->handle->Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001d74:	2200      	movs	r2, #0
 8001d76:	61da      	str	r2, [r3, #28]
      p_uart->handle->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
      p_uart->handle->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001d88:	2200      	movs	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24


      qbufferCreate(&p_uart->qbuffer_rx, p_uart->rx_buf, UART_RX_BUF_LENGTH);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f603 000c 	addw	r0, r3, #2060	; 0x80c
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	330b      	adds	r3, #11
 8001d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f7ff fde7 	bl	800196e <qbufferCreate>

      HAL_UART_DeInit(p_uart->handle);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001da6:	4618      	mov	r0, r3
 8001da8:	f002 faa4 	bl	80042f4 <HAL_UART_DeInit>
      HAL_UART_Init(p_uart->handle);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 fa50 	bl	8004258 <HAL_UART_Init>

      p_uart->is_open  = true;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]

      uartStartRx(channel);
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 f811 	bl	8001de8 <uartStartRx>
      ret = true;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8001dca:	bf00      	nop
  }

  return ret;
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000094 	.word	0x20000094
 8001ddc:	200008d0 	.word	0x200008d0
 8001de0:	20000918 	.word	0x20000918
 8001de4:	40004400 	.word	0x40004400

08001de8 <uartStartRx>:
{
  uart_tbl[channel].txDoneISR = func;
}

void uartStartRx(uint8_t channel)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  uart_t *p_uart = &uart_tbl[channel];
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f640 0234 	movw	r2, #2100	; 0x834
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <uartStartRx+0x60>)
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]

  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	7a5b      	ldrb	r3, [r3, #9]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <uartStartRx+0x34>
  {
    HAL_UART_Receive_IT(p_uart->handle, p_uart->rx_buf, 1);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f8d3 0824 	ldr.w	r0, [r3, #2084]	; 0x824
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	330b      	adds	r3, #11
 8001e14:	2201      	movs	r2, #1
 8001e16:	4619      	mov	r1, r3
 8001e18:	f002 fb34 	bl	8004484 <HAL_UART_Receive_IT>
  }
  if (p_uart->rx_mode == UART_MODE_DMA)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	7a5b      	ldrb	r3, [r3, #9]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d10c      	bne.n	8001e3e <uartStartRx+0x56>
  {
    HAL_UART_Receive_DMA(p_uart->handle, (uint8_t *)p_uart->qbuffer_rx.p_buf, p_uart->qbuffer_rx.length);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f8d3 0824 	ldr.w	r0, [r3, #2084]	; 0x824
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f002 fc41 	bl	80046c0 <HAL_UART_Receive_DMA>
  }
}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000094 	.word	0x20000094

08001e4c <uartAvailable>:

  return ret;
}

uint32_t uartAvailable(uint8_t channel)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  uint32_t ret;
  uart_t *p_uart = &uart_tbl[channel];
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f640 0234 	movw	r2, #2100	; 0x834
 8001e5c:	fb02 f303 	mul.w	r3, r2, r3
 8001e60:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <uartAvailable+0x80>)
 8001e62:	4413      	add	r3, r2
 8001e64:	60bb      	str	r3, [r7, #8]


  if (channel >= UART_MAX_CH)
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <uartAvailable+0x24>
  {
    return 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e029      	b.n	8001ec4 <uartAvailable+0x78>
  if (p_uart->rx_mode == UART_MODE_VCP)
  {
    ret = vcpAvailable();
  }
#endif
  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	7a5b      	ldrb	r3, [r3, #9]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d10d      	bne.n	8001e94 <uartAvailable+0x48>
  {
    ret = qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f640 0234 	movw	r2, #2100	; 0x834
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8001e86:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <uartAvailable+0x80>)
 8001e88:	4413      	add	r3, r2
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fe16 	bl	8001abe <qbufferAvailable>
 8001e92:	60f8      	str	r0, [r7, #12]
  }
  if (p_uart->rx_mode == UART_MODE_DMA)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	7a5b      	ldrb	r3, [r3, #9]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d112      	bne.n	8001ec2 <uartAvailable+0x76>
  {
    p_uart->qbuffer_rx.ptr_in = p_uart->qbuffer_rx.length - ((DMA_Channel_TypeDef *)p_uart->hdma_rx->Instance)->CNDTR;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	1ad2      	subs	r2, r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    ret = qbufferAvailable(&p_uart->qbuffer_rx);
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fdff 	bl	8001abe <qbufferAvailable>
 8001ec0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000094 	.word	0x20000094

08001ed0 <uartFlush>:

void uartFlush(uint8_t channel)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if (uart_tbl[channel].rx_mode == UART_MODE_VCP)
  {
    vcpFlush();
  }
#endif
  if (uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT)
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4a2d      	ldr	r2, [pc, #180]	; (8001f94 <uartFlush+0xc4>)
 8001ede:	f640 0134 	movw	r1, #2100	; 0x834
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3309      	adds	r3, #9
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d10c      	bne.n	8001f0a <uartFlush+0x3a>
  {
    qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f640 0234 	movw	r2, #2100	; 0x834
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8001efe:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <uartFlush+0xc4>)
 8001f00:	4413      	add	r3, r2
 8001f02:	3304      	adds	r3, #4
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fdf5 	bl	8001af4 <qbufferFlush>
  }
  if (uart_tbl[channel].rx_mode == UART_MODE_DMA)
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <uartFlush+0xc4>)
 8001f0e:	f640 0134 	movw	r1, #2100	; 0x834
 8001f12:	fb01 f303 	mul.w	r3, r1, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	3309      	adds	r3, #9
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d134      	bne.n	8001f8a <uartFlush+0xba>
  {
    uart_tbl[channel].qbuffer_rx.ptr_in  = uart_tbl[channel].qbuffer_rx.length - ((DMA_Channel_TypeDef *)uart_tbl[channel].hdma_rx->Instance)->CNDTR;
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	79fa      	ldrb	r2, [r7, #7]
 8001f24:	491b      	ldr	r1, [pc, #108]	; (8001f94 <uartFlush+0xc4>)
 8001f26:	f640 0034 	movw	r0, #2100	; 0x834
 8001f2a:	fb00 f202 	mul.w	r2, r0, r2
 8001f2e:	440a      	add	r2, r1
 8001f30:	f602 0214 	addw	r2, r2, #2068	; 0x814
 8001f34:	6811      	ldr	r1, [r2, #0]
 8001f36:	79fa      	ldrb	r2, [r7, #7]
 8001f38:	4816      	ldr	r0, [pc, #88]	; (8001f94 <uartFlush+0xc4>)
 8001f3a:	f640 0434 	movw	r4, #2100	; 0x834
 8001f3e:	fb04 f202 	mul.w	r2, r4, r2
 8001f42:	4402      	add	r2, r0
 8001f44:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	6852      	ldr	r2, [r2, #4]
 8001f4e:	1a8a      	subs	r2, r1, r2
 8001f50:	4910      	ldr	r1, [pc, #64]	; (8001f94 <uartFlush+0xc4>)
 8001f52:	f640 0034 	movw	r0, #2100	; 0x834
 8001f56:	fb00 f303 	mul.w	r3, r0, r3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8001f60:	601a      	str	r2, [r3, #0]
    uart_tbl[channel].qbuffer_rx.ptr_out = uart_tbl[channel].qbuffer_rx.ptr_in;
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	490b      	ldr	r1, [pc, #44]	; (8001f94 <uartFlush+0xc4>)
 8001f68:	f640 0034 	movw	r0, #2100	; 0x834
 8001f6c:	fb00 f202 	mul.w	r2, r0, r2
 8001f70:	440a      	add	r2, r1
 8001f72:	f602 020c 	addw	r2, r2, #2060	; 0x80c
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	4906      	ldr	r1, [pc, #24]	; (8001f94 <uartFlush+0xc4>)
 8001f7a:	f640 0034 	movw	r0, #2100	; 0x834
 8001f7e:	fb00 f303 	mul.w	r3, r0, r3
 8001f82:	440b      	add	r3, r1
 8001f84:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8001f88:	601a      	str	r2, [r3, #0]
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd90      	pop	{r4, r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000094 	.word	0x20000094

08001f98 <uartWrite>:

  return ret;
}

int32_t uartWrite(uint8_t channel, uint8_t *p_data, uint32_t length)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	73fb      	strb	r3, [r7, #15]
  int32_t ret = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uart_t *p_uart = &uart_tbl[channel];
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	f640 0234 	movw	r2, #2100	; 0x834
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <uartWrite+0x90>)
 8001fb6:	4413      	add	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
  if (p_uart->tx_mode == UART_MODE_VCP)
  {
    vcpWrite(p_data, length);
  }
#endif
  if (p_uart->tx_mode == UART_MODE_POLLING)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	7a1b      	ldrb	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10e      	bne.n	8001fe0 <uartWrite+0x48>
  {
    if (HAL_UART_Transmit(p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f8d3 0824 	ldr.w	r0, [r3, #2084]	; 0x824
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	f002 f9c4 	bl	800435e <HAL_UART_Transmit>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <uartWrite+0x48>
    {
      ret = length;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	617b      	str	r3, [r7, #20]
    }
  }
  if (p_uart->tx_mode == UART_MODE_DMA)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	7a1b      	ldrb	r3, [r3, #8]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d11a      	bne.n	800201e <uartWrite+0x86>
  {
    p_uart->handle->gState = HAL_UART_STATE_READY;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001fee:	2220      	movs	r2, #32
 8001ff0:	675a      	str	r2, [r3, #116]	; 0x74

    HAL_DMA_PollForTransfer(p_uart->hdma_tx, HAL_DMA_FULL_TRANSFER, 100);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8001ff8:	2264      	movs	r2, #100	; 0x64
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fca5 	bl	800294c <HAL_DMA_PollForTransfer>

    if (HAL_UART_Transmit_DMA(p_uart->handle, p_data, length) == HAL_OK)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	b292      	uxth	r2, r2
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fada 	bl	80045c8 <HAL_UART_Transmit_DMA>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <uartWrite+0x86>
    {
      ret = length;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800201e:	697b      	ldr	r3, [r7, #20]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000094 	.word	0x20000094

0800202c <uartRead>:

uint8_t uartRead(uint8_t channel)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	72fb      	strb	r3, [r7, #11]
  uart_t *p_uart = &uart_tbl[channel];
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f640 0234 	movw	r2, #2100	; 0x834
 8002040:	fb02 f303 	mul.w	r3, r2, r3
 8002044:	4a10      	ldr	r2, [pc, #64]	; (8002088 <uartRead+0x5c>)
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  if (p_uart->rx_mode == UART_MODE_VCP)
  {
    ret = vcpRead();
  }
#endif
  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	7a5b      	ldrb	r3, [r3, #9]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d108      	bne.n	8002064 <uartRead+0x38>
  {
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8002058:	f107 010b 	add.w	r1, r7, #11
 800205c:	2201      	movs	r2, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fceb 	bl	8001a3a <qbufferRead>
  }
  if (p_uart->rx_mode == UART_MODE_DMA)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	7a5b      	ldrb	r3, [r3, #9]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d108      	bne.n	800207e <uartRead+0x52>
  {
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8002072:	f107 010b 	add.w	r1, r7, #11
 8002076:	2201      	movs	r2, #1
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fcde 	bl	8001a3a <qbufferRead>
  }
  return ret;
 800207e:	7afb      	ldrb	r3, [r7, #11]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000094 	.word	0x20000094

0800208c <uartRxHandler>:

  return ret;
}

void uartRxHandler(uint8_t channel)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  uart_t *p_uart = &uart_tbl[channel];
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f640 0234 	movw	r2, #2100	; 0x834
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <uartRxHandler+0x50>)
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]


  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	7a5b      	ldrb	r3, [r3, #9]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d112      	bne.n	80020d4 <uartRxHandler+0x48>
  {
    qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f603 000c 	addw	r0, r3, #2060	; 0x80c
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	330b      	adds	r3, #11
 80020b8:	2201      	movs	r2, #1
 80020ba:	4619      	mov	r1, r3
 80020bc:	f7ff fc7b 	bl	80019b6 <qbufferWrite>

    __HAL_UNLOCK(p_uart->handle);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    uartStartRx(channel);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fe8a 	bl	8001de8 <uartStartRx>
  }
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000094 	.word	0x20000094

080020e0 <uartErrHandler>:

void uartErrHandler(uint8_t channel)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  uartStartRx(channel);
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fe7b 	bl	8001de8 <uartStartRx>
  uartFlush(channel);
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff feeb 	bl	8001ed0 <uartFlush>

  uart_tbl[channel].err_cnt++;
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	490b      	ldr	r1, [pc, #44]	; (800212c <uartErrHandler+0x4c>)
 80020fe:	f640 0234 	movw	r2, #2100	; 0x834
 8002102:	fb02 f203 	mul.w	r2, r2, r3
 8002106:	440a      	add	r2, r1
 8002108:	f502 6203 	add.w	r2, r2, #2096	; 0x830
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	3201      	adds	r2, #1
 8002110:	4906      	ldr	r1, [pc, #24]	; (800212c <uartErrHandler+0x4c>)
 8002112:	f640 0034 	movw	r0, #2100	; 0x834
 8002116:	fb00 f303 	mul.w	r3, r0, r3
 800211a:	440b      	add	r3, r1
 800211c:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000094 	.word	0x20000094

08002130 <HAL_UART_TxCpltCallback>:

  uart_tbl[channel].err_cnt = 0;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if (UartHandle->Instance == uart_tbl[_DEF_UART1].handle->Instance)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_UART_ErrorCallback+0x40>)
 8002152:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d102      	bne.n	8002162 <HAL_UART_ErrorCallback+0x1e>
  {
    uartErrHandler(_DEF_UART1);
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff ffbf 	bl	80020e0 <uartErrHandler>
  }
  if (UartHandle->Instance == uart_tbl[_DEF_UART3].handle->Instance)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_UART_ErrorCallback+0x40>)
 8002168:	f503 53c4 	add.w	r3, r3, #6272	; 0x1880
 800216c:	330c      	adds	r3, #12
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d102      	bne.n	800217c <HAL_UART_ErrorCallback+0x38>
  {
    uartErrHandler(_DEF_UART3);
 8002176:	2002      	movs	r0, #2
 8002178:	f7ff ffb2 	bl	80020e0 <uartErrHandler>
  }
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000094 	.word	0x20000094

08002188 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == uart_tbl[_DEF_UART1].handle->Instance)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_UART_RxCpltCallback+0x28>)
 8002196:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d102      	bne.n	80021a6 <HAL_UART_RxCpltCallback+0x1e>
  {
    uartRxHandler(_DEF_UART1);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7ff ff73 	bl	800208c <uartRxHandler>
  }
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000094 	.word	0x20000094

080021b4 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	; 0x30
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0318 	add.w	r3, r7, #24
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]

  if(uartHandle->Instance==USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a3e      	ldr	r2, [pc, #248]	; (80022cc <HAL_UART_MspInit+0x118>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d175      	bne.n	80022c2 <HAL_UART_MspInit+0x10e>
  {
    uart_t *p_uart = &uart_tbl[_DEF_UART1];
 80021d6:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <HAL_UART_MspInit+0x11c>)
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c


    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021da:	4a3e      	ldr	r2, [pc, #248]	; (80022d4 <HAL_UART_MspInit+0x120>)
 80021dc:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_UART_MspInit+0x120>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <HAL_UART_MspInit+0x120>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <HAL_UART_MspInit+0x120>)
 80021f4:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <HAL_UART_MspInit+0x120>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fe:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <HAL_UART_MspInit+0x120>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800220a:	2304      	movs	r3, #4
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002216:	2303      	movs	r3, #3
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800221a:	2307      	movs	r3, #7
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221e:	f107 0318 	add.w	r3, r7, #24
 8002222:	4619      	mov	r1, r3
 8002224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002228:	f000 fc68 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800222c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223a:	2303      	movs	r3, #3
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800223e:	2303      	movs	r3, #3
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 0318 	add.w	r3, r7, #24
 8002246:	4619      	mov	r1, r3
 8002248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224c:	f000 fc56 	bl	8002afc <HAL_GPIO_Init>


    if (p_uart->rx_mode == UART_MODE_DMA)
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	7a5b      	ldrb	r3, [r3, #9]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d134      	bne.n	80022c2 <HAL_UART_MspInit+0x10e>
    {
      /* USART2 DMA Init */
      /* USART2_RX Init */
      __HAL_RCC_DMA1_CLK_ENABLE();
 8002258:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_UART_MspInit+0x120>)
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <HAL_UART_MspInit+0x120>)
 800225c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6493      	str	r3, [r2, #72]	; 0x48
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_UART_MspInit+0x120>)
 8002266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]

      hdma_usart2_rx.Instance = DMA1_Channel6;
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_UART_MspInit+0x124>)
 8002272:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <HAL_UART_MspInit+0x128>)
 8002274:	601a      	str	r2, [r3, #0]
      hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_UART_MspInit+0x124>)
 8002278:	2202      	movs	r2, #2
 800227a:	605a      	str	r2, [r3, #4]
      hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800227c:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_UART_MspInit+0x124>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
      hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_UART_MspInit+0x124>)
 8002284:	2200      	movs	r2, #0
 8002286:	60da      	str	r2, [r3, #12]
      hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_UART_MspInit+0x124>)
 800228a:	2280      	movs	r2, #128	; 0x80
 800228c:	611a      	str	r2, [r3, #16]
      hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_UART_MspInit+0x124>)
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
      hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002294:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <HAL_UART_MspInit+0x124>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
      hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_UART_MspInit+0x124>)
 800229c:	2220      	movs	r2, #32
 800229e:	61da      	str	r2, [r3, #28]
      hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_UART_MspInit+0x124>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	621a      	str	r2, [r3, #32]
      if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80022a6:	480c      	ldr	r0, [pc, #48]	; (80022d8 <HAL_UART_MspInit+0x124>)
 80022a8:	f000 f9a6 	bl	80025f8 <HAL_DMA_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_UART_MspInit+0x102>
      {
        Error_Handler();
 80022b2:	f7ff f9cf 	bl	8001654 <Error_Handler>
      }

      __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_UART_MspInit+0x124>)
 80022ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80022bc:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <HAL_UART_MspInit+0x124>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
}
 80022c2:	bf00      	nop
 80022c4:	3730      	adds	r7, #48	; 0x30
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40004400 	.word	0x40004400
 80022d0:	20000094 	.word	0x20000094
 80022d4:	40021000 	.word	0x40021000
 80022d8:	200008d0 	.word	0x200008d0
 80022dc:	4002006c 	.word	0x4002006c

080022e0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0b      	ldr	r2, [pc, #44]	; (800231c <HAL_UART_MspDeInit+0x3c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d110      	bne.n	8002314 <HAL_UART_MspDeInit+0x34>
  {
    __HAL_RCC_USART2_CLK_DISABLE();
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <HAL_UART_MspDeInit+0x40>)
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_UART_MspDeInit+0x40>)
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_15);
 80022fe:	f248 0104 	movw	r1, #32772	; 0x8004
 8002302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002306:	f000 fd63 	bl	8002dd0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fa2a 	bl	8002768 <HAL_DMA_DeInit>
  }
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40004400 	.word	0x40004400
 8002320:	40021000 	.word	0x40021000

08002324 <hwInit>:




void hwInit(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  bspInit();
 8002328:	f7ff f8de 	bl	80014e8 <bspInit>

  delayInit();
 800232c:	f7ff fbf2 	bl	8001b14 <delayInit>
  millisInit();
 8002330:	f7ff fbf8 	bl	8001b24 <millisInit>


  ledInit();
 8002334:	f7ff fc06 	bl	8001b44 <ledInit>
  uartInit();
 8002338:	f7ff fc6c 	bl	8001c14 <uartInit>
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234a:	2003      	movs	r0, #3
 800234c:	f000 f920 	bl	8002590 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002350:	200f      	movs	r0, #15
 8002352:	f000 f815 	bl	8002380 <HAL_InitTick>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	71fb      	strb	r3, [r7, #7]
 8002360:	e001      	b.n	8002366 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002362:	f000 f805 	bl	8002370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002366:	79fb      	ldrb	r3, [r7, #7]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_InitTick+0x68>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d022      	beq.n	80023da <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002394:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_InitTick+0x6c>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_InitTick+0x68>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f918 	bl	80025de <HAL_SYSTICK_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10f      	bne.n	80023d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b0f      	cmp	r3, #15
 80023b8:	d809      	bhi.n	80023ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ba:	2200      	movs	r2, #0
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	f04f 30ff 	mov.w	r0, #4294967295
 80023c2:	f000 f8f0 	bl	80025a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_InitTick+0x70>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	e007      	b.n	80023de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	e004      	b.n	80023de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e001      	b.n	80023de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023de:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000008 	.word	0x20000008
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000004 	.word	0x20000004

080023f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_IncTick+0x1c>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_IncTick+0x20>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4413      	add	r3, r2
 8002402:	4a03      	ldr	r2, [pc, #12]	; (8002410 <HAL_IncTick+0x1c>)
 8002404:	6013      	str	r3, [r2, #0]
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	20000998 	.word	0x20000998
 8002414:	20000008 	.word	0x20000008

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000998 	.word	0x20000998

08002430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800245c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002462:	4a04      	ldr	r2, [pc, #16]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	60d3      	str	r3, [r2, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <__NVIC_GetPriorityGrouping+0x18>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 0307 	and.w	r3, r3, #7
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	490d      	ldr	r1, [pc, #52]	; (80024e0 <__NVIC_SetPriority+0x4c>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	4909      	ldr	r1, [pc, #36]	; (80024e4 <__NVIC_SetPriority+0x50>)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3b04      	subs	r3, #4
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	2201      	movs	r2, #1
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	1e5a      	subs	r2, r3, #1
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	401a      	ands	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800252e:	2101      	movs	r1, #1
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	1e59      	subs	r1, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	4313      	orrs	r3, r2
         );
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800255c:	d301      	bcc.n	8002562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255e:	2301      	movs	r3, #1
 8002560:	e00f      	b.n	8002582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <SysTick_Config+0x40>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256a:	210f      	movs	r1, #15
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f7ff ff90 	bl	8002494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <SysTick_Config+0x40>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <SysTick_Config+0x40>)
 800257c:	2207      	movs	r2, #7
 800257e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	e000e010 	.word	0xe000e010

08002590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff49 	bl	8002430 <__NVIC_SetPriorityGrouping>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025b8:	f7ff ff5e 	bl	8002478 <__NVIC_GetPriorityGrouping>
 80025bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f7ff ff90 	bl	80024e8 <NVIC_EncodePriority>
 80025c8:	4602      	mov	r2, r0
 80025ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff5f 	bl	8002494 <__NVIC_SetPriority>
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ffb0 	bl	800254c <SysTick_Config>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e098      	b.n	800273c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	4b4d      	ldr	r3, [pc, #308]	; (8002748 <HAL_DMA_Init+0x150>)
 8002612:	429a      	cmp	r2, r3
 8002614:	d80f      	bhi.n	8002636 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	4b4b      	ldr	r3, [pc, #300]	; (800274c <HAL_DMA_Init+0x154>)
 800261e:	4413      	add	r3, r2
 8002620:	4a4b      	ldr	r2, [pc, #300]	; (8002750 <HAL_DMA_Init+0x158>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	009a      	lsls	r2, r3, #2
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a48      	ldr	r2, [pc, #288]	; (8002754 <HAL_DMA_Init+0x15c>)
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
 8002634:	e00e      	b.n	8002654 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_DMA_Init+0x160>)
 800263e:	4413      	add	r3, r2
 8002640:	4a43      	ldr	r2, [pc, #268]	; (8002750 <HAL_DMA_Init+0x158>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	009a      	lsls	r2, r3, #2
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a42      	ldr	r2, [pc, #264]	; (800275c <HAL_DMA_Init+0x164>)
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800266a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002678:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002684:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002690:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ae:	d039      	beq.n	8002724 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	4a27      	ldr	r2, [pc, #156]	; (8002754 <HAL_DMA_Init+0x15c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d11a      	bne.n	80026f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026ba:	4929      	ldr	r1, [pc, #164]	; (8002760 <HAL_DMA_Init+0x168>)
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <HAL_DMA_Init+0x168>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	f003 031c 	and.w	r3, r3, #28
 80026c8:	200f      	movs	r0, #15
 80026ca:	fa00 f303 	lsl.w	r3, r0, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	4013      	ands	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026d4:	4822      	ldr	r0, [pc, #136]	; (8002760 <HAL_DMA_Init+0x168>)
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_DMA_Init+0x168>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6859      	ldr	r1, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f003 031c 	and.w	r3, r3, #28
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	4313      	orrs	r3, r2
 80026ec:	6003      	str	r3, [r0, #0]
 80026ee:	e019      	b.n	8002724 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026f0:	491c      	ldr	r1, [pc, #112]	; (8002764 <HAL_DMA_Init+0x16c>)
 80026f2:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_DMA_Init+0x16c>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f003 031c 	and.w	r3, r3, #28
 80026fe:	200f      	movs	r0, #15
 8002700:	fa00 f303 	lsl.w	r3, r0, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	4013      	ands	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800270a:	4816      	ldr	r0, [pc, #88]	; (8002764 <HAL_DMA_Init+0x16c>)
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_DMA_Init+0x16c>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	f003 031c 	and.w	r3, r3, #28
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40020407 	.word	0x40020407
 800274c:	bffdfff8 	.word	0xbffdfff8
 8002750:	cccccccd 	.word	0xcccccccd
 8002754:	40020000 	.word	0x40020000
 8002758:	bffdfbf8 	.word	0xbffdfbf8
 800275c:	40020400 	.word	0x40020400
 8002760:	400200a8 	.word	0x400200a8
 8002764:	400204a8 	.word	0x400204a8

08002768 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e072      	b.n	8002860 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	4b36      	ldr	r3, [pc, #216]	; (800286c <HAL_DMA_DeInit+0x104>)
 8002792:	429a      	cmp	r2, r3
 8002794:	d80f      	bhi.n	80027b6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	4b34      	ldr	r3, [pc, #208]	; (8002870 <HAL_DMA_DeInit+0x108>)
 800279e:	4413      	add	r3, r2
 80027a0:	4a34      	ldr	r2, [pc, #208]	; (8002874 <HAL_DMA_DeInit+0x10c>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	009a      	lsls	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a31      	ldr	r2, [pc, #196]	; (8002878 <HAL_DMA_DeInit+0x110>)
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
 80027b4:	e00e      	b.n	80027d4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b2f      	ldr	r3, [pc, #188]	; (800287c <HAL_DMA_DeInit+0x114>)
 80027be:	4413      	add	r3, r2
 80027c0:	4a2c      	ldr	r2, [pc, #176]	; (8002874 <HAL_DMA_DeInit+0x10c>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	009a      	lsls	r2, r3, #2
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <HAL_DMA_DeInit+0x118>)
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027e4:	f002 021c 	and.w	r2, r2, #28
 80027e8:	2101      	movs	r1, #1
 80027ea:	fa01 f202 	lsl.w	r2, r1, r2
 80027ee:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	4a20      	ldr	r2, [pc, #128]	; (8002878 <HAL_DMA_DeInit+0x110>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10d      	bne.n	8002816 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027fa:	4922      	ldr	r1, [pc, #136]	; (8002884 <HAL_DMA_DeInit+0x11c>)
 80027fc:	4b21      	ldr	r3, [pc, #132]	; (8002884 <HAL_DMA_DeInit+0x11c>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f003 031c 	and.w	r3, r3, #28
 8002808:	200f      	movs	r0, #15
 800280a:	fa00 f303 	lsl.w	r3, r0, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	4013      	ands	r3, r2
 8002812:	600b      	str	r3, [r1, #0]
 8002814:	e00c      	b.n	8002830 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002816:	491c      	ldr	r1, [pc, #112]	; (8002888 <HAL_DMA_DeInit+0x120>)
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_DMA_DeInit+0x120>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002820:	f003 031c 	and.w	r3, r3, #28
 8002824:	200f      	movs	r0, #15
 8002826:	fa00 f303 	lsl.w	r3, r0, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	4013      	ands	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40020407 	.word	0x40020407
 8002870:	bffdfff8 	.word	0xbffdfff8
 8002874:	cccccccd 	.word	0xcccccccd
 8002878:	40020000 	.word	0x40020000
 800287c:	bffdfbf8 	.word	0xbffdfbf8
 8002880:	40020400 	.word	0x40020400
 8002884:	400200a8 	.word	0x400200a8
 8002888:	400204a8 	.word	0x400204a8

0800288c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_DMA_Start_IT+0x20>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e04b      	b.n	8002944 <HAL_DMA_Start_IT+0xb8>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d13a      	bne.n	8002936 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f8d8 	bl	8002a9a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	6812      	ldr	r2, [r2, #0]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	f042 020e 	orr.w	r2, r2, #14
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e00f      	b.n	8002924 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	f022 0204 	bic.w	r2, r2, #4
 8002912:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	f042 020a 	orr.w	r2, r2, #10
 8002922:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e005      	b.n	8002942 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800293e:	2302      	movs	r3, #2
 8002940:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002942:	7dfb      	ldrb	r3, [r7, #23]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel Specifies the DMA level complete.
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	460b      	mov	r3, r1
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	72fb      	strb	r3, [r7, #11]
  uint32_t temp;
  uint32_t tickstart;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d008      	beq.n	8002978 <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2204      	movs	r2, #4
 800296a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e08c      	b.n	8002a92 <HAL_DMA_PollForTransfer+0x146>
  }

  /* Polling mode not supported in circular mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800298c:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07f      	b.n	8002a92 <HAL_DMA_PollForTransfer+0x146>
  }

  /* Get the level transfer complete flag */
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d108      	bne.n	80029aa <HAL_DMA_PollForTransfer+0x5e>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	f003 031c 	and.w	r3, r3, #28
 80029a0:	2202      	movs	r2, #2
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	e007      	b.n	80029ba <HAL_DMA_PollForTransfer+0x6e>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f003 031c 	and.w	r3, r3, #28
 80029b2:	2204      	movs	r2, #4
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80029ba:	f7ff fd2d 	bl	8002418 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 80029c0:	e03f      	b.n	8002a42 <HAL_DMA_PollForTransfer+0xf6>
  {
    if((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1CU))) != 0U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f003 031c 	and.w	r3, r3, #28
 80029d0:	2108      	movs	r1, #8
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d016      	beq.n	8002a0a <HAL_DMA_PollForTransfer+0xbe>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029e4:	f002 021c 	and.w	r2, r2, #28
 80029e8:	2101      	movs	r1, #1
 80029ea:	fa01 f202 	lsl.w	r2, r1, r2
 80029ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e043      	b.n	8002a92 <HAL_DMA_PollForTransfer+0x146>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d017      	beq.n	8002a42 <HAL_DMA_PollForTransfer+0xf6>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) ||  (Timeout == 0U))
 8002a12:	f7ff fd01 	bl	8002418 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad2      	subs	r2, r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d802      	bhi.n	8002a28 <HAL_DMA_PollForTransfer+0xdc>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10c      	bne.n	8002a42 <HAL_DMA_PollForTransfer+0xf6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e027      	b.n	8002a92 <HAL_DMA_PollForTransfer+0x146>
  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0b8      	beq.n	80029c2 <HAL_DMA_PollForTransfer+0x76>
    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
  }
#endif /* DMAMUX1 */

  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8002a50:	7afb      	ldrb	r3, [r7, #11]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10e      	bne.n	8002a74 <HAL_DMA_PollForTransfer+0x128>
  {
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex& 0x1CU));
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a5e:	f002 021c 	and.w	r2, r2, #28
 8002a62:	2102      	movs	r1, #2
 8002a64:	fa01 f202 	lsl.w	r2, r1, r2
 8002a68:	605a      	str	r2, [r3, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8002a72:	e009      	b.n	8002a88 <HAL_DMA_PollForTransfer+0x13c>
  }
  else
  {
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU));
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a7c:	f002 021c 	and.w	r2, r2, #28
 8002a80:	2104      	movs	r1, #4
 8002a82:	fa01 f202 	lsl.w	r2, r1, r2
 8002a86:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ab0:	f002 021c 	and.w	r2, r2, #28
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b10      	cmp	r3, #16
 8002aca:	d108      	bne.n	8002ade <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002adc:	e007      	b.n	8002aee <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	60da      	str	r2, [r3, #12]
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0a:	e148      	b.n	8002d9e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 813a 	beq.w	8002d98 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x38>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b12      	cmp	r3, #18
 8002b32:	d123      	bne.n	8002b7c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	08da      	lsrs	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3208      	adds	r2, #8
 8002b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	08da      	lsrs	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3208      	adds	r2, #8
 8002b76:	6939      	ldr	r1, [r7, #16]
 8002b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d00b      	beq.n	8002bd0 <HAL_GPIO_Init+0xd4>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d007      	beq.n	8002bd0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bc4:	2b11      	cmp	r3, #17
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b12      	cmp	r3, #18
 8002bce:	d130      	bne.n	8002c32 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	2203      	movs	r2, #3
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c06:	2201      	movs	r2, #1
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f003 0201 	and.w	r2, r3, #1
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8094 	beq.w	8002d98 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c70:	4a52      	ldr	r2, [pc, #328]	; (8002dbc <HAL_GPIO_Init+0x2c0>)
 8002c72:	4b52      	ldr	r3, [pc, #328]	; (8002dbc <HAL_GPIO_Init+0x2c0>)
 8002c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c7c:	4b4f      	ldr	r3, [pc, #316]	; (8002dbc <HAL_GPIO_Init+0x2c0>)
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c88:	4a4d      	ldr	r2, [pc, #308]	; (8002dc0 <HAL_GPIO_Init+0x2c4>)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	3302      	adds	r3, #2
 8002c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	220f      	movs	r2, #15
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_GPIO_Init+0x1d4>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a43      	ldr	r2, [pc, #268]	; (8002dc4 <HAL_GPIO_Init+0x2c8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d007      	beq.n	8002ccc <HAL_GPIO_Init+0x1d0>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a42      	ldr	r2, [pc, #264]	; (8002dc8 <HAL_GPIO_Init+0x2cc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d101      	bne.n	8002cc8 <HAL_GPIO_Init+0x1cc>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e004      	b.n	8002cd2 <HAL_GPIO_Init+0x1d6>
 8002cc8:	2307      	movs	r3, #7
 8002cca:	e002      	b.n	8002cd2 <HAL_GPIO_Init+0x1d6>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_GPIO_Init+0x1d6>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	f002 0203 	and.w	r2, r2, #3
 8002cd8:	0092      	lsls	r2, r2, #2
 8002cda:	4093      	lsls	r3, r2
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ce2:	4937      	ldr	r1, [pc, #220]	; (8002dc0 <HAL_GPIO_Init+0x2c4>)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d14:	4a2d      	ldr	r2, [pc, #180]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d1a:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4013      	ands	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d3e:	4a23      	ldr	r2, [pc, #140]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d44:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d6e:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d92:	4a0e      	ldr	r2, [pc, #56]	; (8002dcc <HAL_GPIO_Init+0x2d0>)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f47f aeaf 	bne.w	8002b0c <HAL_GPIO_Init+0x10>
  }
}
 8002dae:	bf00      	nop
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40010000 	.word	0x40010000
 8002dc4:	48000400 	.word	0x48000400
 8002dc8:	48000800 	.word	0x48000800
 8002dcc:	40010400 	.word	0x40010400

08002dd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002dde:	e0ab      	b.n	8002f38 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002de0:	2201      	movs	r2, #1
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	409a      	lsls	r2, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	4013      	ands	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 809f 	beq.w	8002f32 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002df4:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <HAL_GPIO_DeInit+0x184>)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e00:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4013      	ands	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e1c:	d00d      	beq.n	8002e3a <HAL_GPIO_DeInit+0x6a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4d      	ldr	r2, [pc, #308]	; (8002f58 <HAL_GPIO_DeInit+0x188>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d007      	beq.n	8002e36 <HAL_GPIO_DeInit+0x66>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4c      	ldr	r2, [pc, #304]	; (8002f5c <HAL_GPIO_DeInit+0x18c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <HAL_GPIO_DeInit+0x62>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e004      	b.n	8002e3c <HAL_GPIO_DeInit+0x6c>
 8002e32:	2307      	movs	r3, #7
 8002e34:	e002      	b.n	8002e3c <HAL_GPIO_DeInit+0x6c>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_GPIO_DeInit+0x6c>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	f002 0203 	and.w	r2, r2, #3
 8002e42:	0092      	lsls	r2, r2, #2
 8002e44:	fa03 f202 	lsl.w	r2, r3, r2
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d132      	bne.n	8002eb4 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002e4e:	4944      	ldr	r1, [pc, #272]	; (8002f60 <HAL_GPIO_DeInit+0x190>)
 8002e50:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <HAL_GPIO_DeInit+0x190>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002e5c:	4940      	ldr	r1, [pc, #256]	; (8002f60 <HAL_GPIO_DeInit+0x190>)
 8002e5e:	4b40      	ldr	r3, [pc, #256]	; (8002f60 <HAL_GPIO_DeInit+0x190>)
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	4013      	ands	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002e6a:	493d      	ldr	r1, [pc, #244]	; (8002f60 <HAL_GPIO_DeInit+0x190>)
 8002e6c:	4b3c      	ldr	r3, [pc, #240]	; (8002f60 <HAL_GPIO_DeInit+0x190>)
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	4013      	ands	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002e78:	4939      	ldr	r1, [pc, #228]	; (8002f60 <HAL_GPIO_DeInit+0x190>)
 8002e7a:	4b39      	ldr	r3, [pc, #228]	; (8002f60 <HAL_GPIO_DeInit+0x190>)
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	4013      	ands	r3, r2
 8002e84:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	220f      	movs	r2, #15
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002e96:	482f      	ldr	r0, [pc, #188]	; (8002f54 <HAL_GPIO_DeInit+0x184>)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	492d      	ldr	r1, [pc, #180]	; (8002f54 <HAL_GPIO_DeInit+0x184>)
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	0892      	lsrs	r2, r2, #2
 8002ea2:	3202      	adds	r2, #2
 8002ea4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	43d2      	mvns	r2, r2
 8002eac:	400a      	ands	r2, r1
 8002eae:	3302      	adds	r3, #2
 8002eb0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	2103      	movs	r1, #3
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	08da      	lsrs	r2, r3, #3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	08d9      	lsrs	r1, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3108      	adds	r1, #8
 8002ed4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	200f      	movs	r0, #15
 8002ee2:	fa00 f303 	lsl.w	r3, r0, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	4019      	ands	r1, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3208      	adds	r2, #8
 8002eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2103      	movs	r1, #3
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	401a      	ands	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	401a      	ands	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2103      	movs	r1, #3
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3301      	adds	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f47f af4d 	bne.w	8002de0 <HAL_GPIO_DeInit+0x10>
  }
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40010000 	.word	0x40010000
 8002f58:	48000400 	.word	0x48000400
 8002f5c:	48000800 	.word	0x48000800
 8002f60:	40010400 	.word	0x40010400

08002f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	807b      	strh	r3, [r7, #2]
 8002f70:	4613      	mov	r3, r2
 8002f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f74:	787b      	ldrb	r3, [r7, #1]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f80:	e002      	b.n	8002f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fac:	887a      	ldrh	r2, [r7, #2]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002fb2:	e002      	b.n	8002fba <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fb4:	887a      	ldrh	r2, [r7, #2]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	619a      	str	r2, [r3, #24]
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fcc:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40007000 	.word	0x40007000

08002fe8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fec:	4b04      	ldr	r3, [pc, #16]	; (8003000 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40007000 	.word	0x40007000

08003004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003012:	d130      	bne.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003014:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800301c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003020:	d038      	beq.n	8003094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003022:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003024:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800302c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003030:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2232      	movs	r2, #50	; 0x32
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	4a1b      	ldr	r2, [pc, #108]	; (80030ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0c9b      	lsrs	r3, r3, #18
 8003044:	3301      	adds	r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003048:	e002      	b.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3b01      	subs	r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305c:	d102      	bne.n	8003064 <HAL_PWREx_ControlVoltageScaling+0x60>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f2      	bne.n	800304a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003064:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003070:	d110      	bne.n	8003094 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e00f      	b.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800307e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003082:	d007      	beq.n	8003094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003084:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003086:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800308e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003092:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40007000 	.word	0x40007000
 80030a8:	20000000 	.word	0x20000000
 80030ac:	431bde83 	.word	0x431bde83

080030b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e3db      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c2:	4ba4      	ldr	r3, [pc, #656]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030cc:	4ba1      	ldr	r3, [pc, #644]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80e1 	beq.w	80032a6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <HAL_RCC_OscConfig+0x4a>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b0c      	cmp	r3, #12
 80030ee:	f040 8088 	bne.w	8003202 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	f040 8084 	bne.w	8003202 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030fa:	4b96      	ldr	r3, [pc, #600]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x62>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e3b3      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1a      	ldr	r2, [r3, #32]
 8003116:	4b8f      	ldr	r3, [pc, #572]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d004      	beq.n	800312c <HAL_RCC_OscConfig+0x7c>
 8003122:	4b8c      	ldr	r3, [pc, #560]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800312a:	e005      	b.n	8003138 <HAL_RCC_OscConfig+0x88>
 800312c:	4b89      	ldr	r3, [pc, #548]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800312e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003138:	429a      	cmp	r2, r3
 800313a:	d923      	bls.n	8003184 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fd47 	bl	8003bd4 <RCC_SetFlashLatencyFromMSIRange>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e394      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003150:	4a80      	ldr	r2, [pc, #512]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003152:	4b80      	ldr	r3, [pc, #512]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f043 0308 	orr.w	r3, r3, #8
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	497d      	ldr	r1, [pc, #500]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800315e:	4b7d      	ldr	r3, [pc, #500]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800316e:	4979      	ldr	r1, [pc, #484]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003170:	4b78      	ldr	r3, [pc, #480]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
 8003182:	e022      	b.n	80031ca <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003184:	4a73      	ldr	r2, [pc, #460]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003186:	4b73      	ldr	r3, [pc, #460]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f043 0308 	orr.w	r3, r3, #8
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4970      	ldr	r1, [pc, #448]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003192:	4b70      	ldr	r3, [pc, #448]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031a2:	496c      	ldr	r1, [pc, #432]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 80031a4:	4b6b      	ldr	r3, [pc, #428]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fd0a 	bl	8003bd4 <RCC_SetFlashLatencyFromMSIRange>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e357      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ca:	f000 fc41 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 80031ce:	4601      	mov	r1, r0
 80031d0:	4b60      	ldr	r3, [pc, #384]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	4a5f      	ldr	r2, [pc, #380]	; (8003358 <HAL_RCC_OscConfig+0x2a8>)
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	fa21 f303 	lsr.w	r3, r1, r3
 80031e6:	4a5d      	ldr	r2, [pc, #372]	; (800335c <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031ea:	4b5d      	ldr	r3, [pc, #372]	; (8003360 <HAL_RCC_OscConfig+0x2b0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f8c6 	bl	8002380 <HAL_InitTick>
 80031f4:	4603      	mov	r3, r0
 80031f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d052      	beq.n	80032a4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	e33b      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d032      	beq.n	8003270 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800320a:	4a52      	ldr	r2, [pc, #328]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800320c:	4b51      	ldr	r3, [pc, #324]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003216:	f7ff f8ff 	bl	8002418 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800321e:	f7ff f8fb 	bl	8002418 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e324      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003230:	4b48      	ldr	r3, [pc, #288]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800323c:	4a45      	ldr	r2, [pc, #276]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800323e:	4b45      	ldr	r3, [pc, #276]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f043 0308 	orr.w	r3, r3, #8
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4942      	ldr	r1, [pc, #264]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800324a:	4b42      	ldr	r3, [pc, #264]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325a:	493e      	ldr	r1, [pc, #248]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800325c:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	4313      	orrs	r3, r2
 800326c:	604b      	str	r3, [r1, #4]
 800326e:	e01a      	b.n	80032a6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003270:	4a38      	ldr	r2, [pc, #224]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003272:	4b38      	ldr	r3, [pc, #224]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800327c:	f7ff f8cc 	bl	8002418 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003284:	f7ff f8c8 	bl	8002418 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e2f1      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003296:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x1d4>
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d074      	beq.n	800339c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_OscConfig+0x214>
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d10e      	bne.n	80032dc <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d10b      	bne.n	80032dc <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d064      	beq.n	800339a <HAL_RCC_OscConfig+0x2ea>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d160      	bne.n	800339a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e2ce      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d106      	bne.n	80032f4 <HAL_RCC_OscConfig+0x244>
 80032e6:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e01d      	b.n	8003330 <HAL_RCC_OscConfig+0x280>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x268>
 80032fe:	4a15      	ldr	r2, [pc, #84]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003300:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4a12      	ldr	r2, [pc, #72]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0x280>
 8003318:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800331a:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01c      	beq.n	8003372 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7ff f86e 	bl	8002418 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333e:	e011      	b.n	8003364 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7ff f86a 	bl	8002418 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d90a      	bls.n	8003364 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e293      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	08006250 	.word	0x08006250
 800335c:	20000000 	.word	0x20000000
 8003360:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003364:	4bae      	ldr	r3, [pc, #696]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0e7      	beq.n	8003340 <HAL_RCC_OscConfig+0x290>
 8003370:	e014      	b.n	800339c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7ff f851 	bl	8002418 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337a:	f7ff f84d 	bl	8002418 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b64      	cmp	r3, #100	; 0x64
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e276      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800338c:	4ba4      	ldr	r3, [pc, #656]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f0      	bne.n	800337a <HAL_RCC_OscConfig+0x2ca>
 8003398:	e000      	b.n	800339c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d060      	beq.n	800346a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d005      	beq.n	80033ba <HAL_RCC_OscConfig+0x30a>
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d119      	bne.n	80033e8 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d116      	bne.n	80033e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ba:	4b99      	ldr	r3, [pc, #612]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_RCC_OscConfig+0x322>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e253      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d2:	4993      	ldr	r1, [pc, #588]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80033d4:	4b92      	ldr	r3, [pc, #584]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	061b      	lsls	r3, r3, #24
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033e6:	e040      	b.n	800346a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d023      	beq.n	8003438 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f0:	4a8b      	ldr	r2, [pc, #556]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80033f2:	4b8b      	ldr	r3, [pc, #556]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7ff f80c 	bl	8002418 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003404:	f7ff f808 	bl	8002418 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e231      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003416:	4b82      	ldr	r3, [pc, #520]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003422:	497f      	ldr	r1, [pc, #508]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 8003424:	4b7e      	ldr	r3, [pc, #504]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	061b      	lsls	r3, r3, #24
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
 8003436:	e018      	b.n	800346a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003438:	4a79      	ldr	r2, [pc, #484]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 800343a:	4b79      	ldr	r3, [pc, #484]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fe ffe8 	bl	8002418 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344c:	f7fe ffe4 	bl	8002418 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e20d      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800345e:	4b70      	ldr	r3, [pc, #448]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d03c      	beq.n	80034f0 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01c      	beq.n	80034b8 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347e:	4a68      	ldr	r2, [pc, #416]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 8003480:	4b67      	ldr	r3, [pc, #412]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 8003482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fe ffc3 	bl	8002418 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003496:	f7fe ffbf 	bl	8002418 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e1e8      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034a8:	4b5d      	ldr	r3, [pc, #372]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ef      	beq.n	8003496 <HAL_RCC_OscConfig+0x3e6>
 80034b6:	e01b      	b.n	80034f0 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b8:	4a59      	ldr	r2, [pc, #356]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80034ba:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80034bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe ffa6 	bl	8002418 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d0:	f7fe ffa2 	bl	8002418 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e1cb      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034e2:	4b4f      	ldr	r3, [pc, #316]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80034e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ef      	bne.n	80034d0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80a5 	beq.w	8003648 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003502:	4b47      	ldr	r3, [pc, #284]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10d      	bne.n	800352a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	4a44      	ldr	r2, [pc, #272]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 8003510:	4b43      	ldr	r3, [pc, #268]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	6593      	str	r3, [r2, #88]	; 0x58
 800351a:	4b41      	ldr	r3, [pc, #260]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003526:	2301      	movs	r3, #1
 8003528:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352a:	4b3e      	ldr	r3, [pc, #248]	; (8003624 <HAL_RCC_OscConfig+0x574>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d118      	bne.n	8003568 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003536:	4a3b      	ldr	r2, [pc, #236]	; (8003624 <HAL_RCC_OscConfig+0x574>)
 8003538:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <HAL_RCC_OscConfig+0x574>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003542:	f7fe ff69 	bl	8002418 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354a:	f7fe ff65 	bl	8002418 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e18e      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355c:	4b31      	ldr	r3, [pc, #196]	; (8003624 <HAL_RCC_OscConfig+0x574>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d108      	bne.n	8003582 <HAL_RCC_OscConfig+0x4d2>
 8003570:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 8003572:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003580:	e024      	b.n	80035cc <HAL_RCC_OscConfig+0x51c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b05      	cmp	r3, #5
 8003588:	d110      	bne.n	80035ac <HAL_RCC_OscConfig+0x4fc>
 800358a:	4a25      	ldr	r2, [pc, #148]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 800358c:	4b24      	ldr	r3, [pc, #144]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800359a:	4a21      	ldr	r2, [pc, #132]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 800359c:	4b20      	ldr	r3, [pc, #128]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035aa:	e00f      	b.n	80035cc <HAL_RCC_OscConfig+0x51c>
 80035ac:	4a1c      	ldr	r2, [pc, #112]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80035ae:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f023 0304 	bic.w	r3, r3, #4
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d016      	beq.n	8003602 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7fe ff20 	bl	8002418 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7fe ff1c 	bl	8002418 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e143      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_OscConfig+0x570>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ed      	beq.n	80035dc <HAL_RCC_OscConfig+0x52c>
 8003600:	e019      	b.n	8003636 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003602:	f7fe ff09 	bl	8002418 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003608:	e00e      	b.n	8003628 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f7fe ff05 	bl	8002418 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d905      	bls.n	8003628 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e12c      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
 8003620:	40021000 	.word	0x40021000
 8003624:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003628:	4b96      	ldr	r3, [pc, #600]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e9      	bne.n	800360a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003636:	7ffb      	ldrb	r3, [r7, #31]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d105      	bne.n	8003648 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363c:	4a91      	ldr	r2, [pc, #580]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 800363e:	4b91      	ldr	r3, [pc, #580]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003646:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d03c      	beq.n	80036ce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01c      	beq.n	8003696 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800365c:	4a89      	ldr	r2, [pc, #548]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 800365e:	4b89      	ldr	r3, [pc, #548]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 8003660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fe fed4 	bl	8002418 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003674:	f7fe fed0 	bl	8002418 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0f9      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003686:	4b7f      	ldr	r3, [pc, #508]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 8003688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ef      	beq.n	8003674 <HAL_RCC_OscConfig+0x5c4>
 8003694:	e01b      	b.n	80036ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003696:	4a7b      	ldr	r2, [pc, #492]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 8003698:	4b7a      	ldr	r3, [pc, #488]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 800369a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fe feb7 	bl	8002418 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ae:	f7fe feb3 	bl	8002418 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e0dc      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036c0:	4b70      	ldr	r3, [pc, #448]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 80036c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ef      	bne.n	80036ae <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80d0 	beq.w	8003878 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	f000 808d 	beq.w	80037fa <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d15a      	bne.n	800379e <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e8:	4a66      	ldr	r2, [pc, #408]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 80036ea:	4b66      	ldr	r3, [pc, #408]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fe fe90 	bl	8002418 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fc:	f7fe fe8c 	bl	8002418 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0b5      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370e:	4b5d      	ldr	r3, [pc, #372]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800371a:	485a      	ldr	r0, [pc, #360]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 800371c:	4b59      	ldr	r3, [pc, #356]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	4b59      	ldr	r3, [pc, #356]	; (8003888 <HAL_RCC_OscConfig+0x7d8>)
 8003722:	4013      	ands	r3, r2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800372c:	3a01      	subs	r2, #1
 800372e:	0112      	lsls	r2, r2, #4
 8003730:	4311      	orrs	r1, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003736:	0212      	lsls	r2, r2, #8
 8003738:	4311      	orrs	r1, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800373e:	0852      	lsrs	r2, r2, #1
 8003740:	3a01      	subs	r2, #1
 8003742:	0552      	lsls	r2, r2, #21
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800374a:	0852      	lsrs	r2, r2, #1
 800374c:	3a01      	subs	r2, #1
 800374e:	0652      	lsls	r2, r2, #25
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003756:	06d2      	lsls	r2, r2, #27
 8003758:	430a      	orrs	r2, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	60c3      	str	r3, [r0, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800375e:	4a49      	ldr	r2, [pc, #292]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 8003760:	4b48      	ldr	r3, [pc, #288]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003768:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800376a:	4a46      	ldr	r2, [pc, #280]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 800376c:	4b45      	ldr	r3, [pc, #276]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003774:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fe fe4f 	bl	8002418 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377e:	f7fe fe4b 	bl	8002418 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e074      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003790:	4b3c      	ldr	r3, [pc, #240]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x6ce>
 800379c:	e06c      	b.n	8003878 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379e:	4a39      	ldr	r2, [pc, #228]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 80037a0:	4b38      	ldr	r3, [pc, #224]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037aa:	4b36      	ldr	r3, [pc, #216]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037b6:	4a33      	ldr	r2, [pc, #204]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f023 0303 	bic.w	r3, r3, #3
 80037c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80037c2:	4a30      	ldr	r2, [pc, #192]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 80037c4:	4b2f      	ldr	r3, [pc, #188]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fe fe21 	bl	8002418 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037da:	f7fe fe1d 	bl	8002418 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e046      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ec:	4b25      	ldr	r3, [pc, #148]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f0      	bne.n	80037da <HAL_RCC_OscConfig+0x72a>
 80037f8:	e03e      	b.n	8003878 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e039      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003806:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <HAL_RCC_OscConfig+0x7d4>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0203 	and.w	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	429a      	cmp	r2, r3
 8003818:	d12c      	bne.n	8003874 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	3b01      	subs	r3, #1
 8003826:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d123      	bne.n	8003874 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d11b      	bne.n	8003874 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d113      	bne.n	8003874 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	3b01      	subs	r3, #1
 800385a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d109      	bne.n	8003874 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	3b01      	subs	r3, #1
 800386e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	019d808c 	.word	0x019d808c

0800388c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0c8      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a0:	4b66      	ldr	r3, [pc, #408]	; (8003a3c <HAL_RCC_ClockConfig+0x1b0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0207 	and.w	r2, r3, #7
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d210      	bcs.n	80038d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4963      	ldr	r1, [pc, #396]	; (8003a3c <HAL_RCC_ClockConfig+0x1b0>)
 80038b0:	4b62      	ldr	r3, [pc, #392]	; (8003a3c <HAL_RCC_ClockConfig+0x1b0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 0207 	bic.w	r2, r3, #7
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b5f      	ldr	r3, [pc, #380]	; (8003a3c <HAL_RCC_ClockConfig+0x1b0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0207 	and.w	r2, r3, #7
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0b0      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d04c      	beq.n	8003976 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e4:	4b56      	ldr	r3, [pc, #344]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d121      	bne.n	8003934 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e09e      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d107      	bne.n	800390c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038fc:	4b50      	ldr	r3, [pc, #320]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d115      	bne.n	8003934 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e092      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d107      	bne.n	8003924 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003914:	4b4a      	ldr	r3, [pc, #296]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d109      	bne.n	8003934 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e086      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003924:	4b46      	ldr	r3, [pc, #280]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e07e      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003934:	4942      	ldr	r1, [pc, #264]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 8003936:	4b42      	ldr	r3, [pc, #264]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003946:	f7fe fd67 	bl	8002418 <HAL_GetTick>
 800394a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394c:	e00a      	b.n	8003964 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394e:	f7fe fd63 	bl	8002418 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e066      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003964:	4b36      	ldr	r3, [pc, #216]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 020c 	and.w	r2, r3, #12
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	429a      	cmp	r2, r3
 8003974:	d1eb      	bne.n	800394e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003982:	492f      	ldr	r1, [pc, #188]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 8003984:	4b2e      	ldr	r3, [pc, #184]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003994:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <HAL_RCC_ClockConfig+0x1b0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0207 	and.w	r2, r3, #7
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d910      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4926      	ldr	r1, [pc, #152]	; (8003a3c <HAL_RCC_ClockConfig+0x1b0>)
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <HAL_RCC_ClockConfig+0x1b0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 0207 	bic.w	r2, r3, #7
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <HAL_RCC_ClockConfig+0x1b0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0207 	and.w	r2, r3, #7
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e036      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	491b      	ldr	r1, [pc, #108]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4914      	ldr	r1, [pc, #80]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a02:	f000 f825 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8003a06:	4601      	mov	r1, r0
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <HAL_RCC_ClockConfig+0x1b4>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fcaa 	bl	8002380 <HAL_InitTick>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a30:	7afb      	ldrb	r3, [r7, #11]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40022000 	.word	0x40022000
 8003a40:	40021000 	.word	0x40021000
 8003a44:	08006250 	.word	0x08006250
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	20000004 	.word	0x20000004

08003a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	; 0x24
 8003a54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5e:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a68:	4b3a      	ldr	r3, [pc, #232]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x34>
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d121      	bne.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d11e      	bne.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a84:	4b33      	ldr	r3, [pc, #204]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a90:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	e005      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003aa0:	4b2c      	ldr	r3, [pc, #176]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003aac:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10d      	bne.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d102      	bne.n	8003ace <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ac8:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	e004      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ad4:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ad6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b0c      	cmp	r3, #12
 8003adc:	d133      	bne.n	8003b46 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d002      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0xa4>
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_GetSysClockFreq+0xaa>
 8003af2:	e005      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003af6:	617b      	str	r3, [r7, #20]
      break;
 8003af8:	e005      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003afa:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003afc:	617b      	str	r3, [r7, #20]
      break;
 8003afe:	e002      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	617b      	str	r3, [r7, #20]
      break;
 8003b04:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	3301      	adds	r3, #1
 8003b12:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	fb02 f203 	mul.w	r2, r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b2c:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	0e5b      	lsrs	r3, r3, #25
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	3301      	adds	r3, #1
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b46:	69bb      	ldr	r3, [r7, #24]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3724      	adds	r7, #36	; 0x24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	40021000 	.word	0x40021000
 8003b58:	08006268 	.word	0x08006268
 8003b5c:	00f42400 	.word	0x00f42400
 8003b60:	007a1200 	.word	0x007a1200

08003b64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000000 	.word	0x20000000

08003b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b80:	f7ff fff0 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003b84:	4601      	mov	r1, r0
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b92:	5cd3      	ldrb	r3, [r2, r3]
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	08006260 	.word	0x08006260

08003ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bac:	f7ff ffda 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003bb0:	4601      	mov	r1, r0
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	0adb      	lsrs	r3, r3, #11
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bbe:	5cd3      	ldrb	r3, [r2, r3]
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	08006260 	.word	0x08006260

08003bd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003be0:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bec:	f7ff f9fc 	bl	8002fe8 <HAL_PWREx_GetVoltageRange>
 8003bf0:	6178      	str	r0, [r7, #20]
 8003bf2:	e014      	b.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bf4:	4a25      	ldr	r2, [pc, #148]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf6:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8003c00:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c0c:	f7ff f9ec 	bl	8002fe8 <HAL_PWREx_GetVoltageRange>
 8003c10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c12:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c24:	d10b      	bne.n	8003c3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b80      	cmp	r3, #128	; 0x80
 8003c2a:	d919      	bls.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2ba0      	cmp	r3, #160	; 0xa0
 8003c30:	d902      	bls.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c32:	2302      	movs	r3, #2
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	e013      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c38:	2301      	movs	r3, #1
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	e010      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	d902      	bls.n	8003c4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c44:	2303      	movs	r3, #3
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	e00a      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b80      	cmp	r3, #128	; 0x80
 8003c4e:	d102      	bne.n	8003c56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c50:	2302      	movs	r3, #2
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	e004      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b70      	cmp	r3, #112	; 0x70
 8003c5a:	d101      	bne.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c60:	490b      	ldr	r1, [pc, #44]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 0207 	bic.w	r2, r3, #7
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0207 	and.w	r2, r3, #7
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d001      	beq.n	8003c82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40022000 	.word	0x40022000

08003c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02f      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cb8:	d005      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003cba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cbe:	d015      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d007      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003cc4:	e00f      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003cc6:	4aac      	ldr	r2, [pc, #688]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cc8:	4bab      	ldr	r3, [pc, #684]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cd2:	e00c      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f9cc 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ce4:	e003      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cea:	e000      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cee:	7cfb      	ldrb	r3, [r7, #19]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10b      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf4:	49a0      	ldr	r1, [pc, #640]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cf6:	4ba0      	ldr	r3, [pc, #640]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d0a:	e001      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8099 	beq.w	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d22:	4b95      	ldr	r3, [pc, #596]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003d32:	2300      	movs	r3, #0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00d      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	4a8f      	ldr	r2, [pc, #572]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d3a:	4b8f      	ldr	r3, [pc, #572]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d42:	6593      	str	r3, [r2, #88]	; 0x58
 8003d44:	4b8c      	ldr	r3, [pc, #560]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d50:	2301      	movs	r3, #1
 8003d52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d54:	4a89      	ldr	r2, [pc, #548]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d56:	4b89      	ldr	r3, [pc, #548]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d60:	f7fe fb5a 	bl	8002418 <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d66:	e009      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d68:	f7fe fb56 	bl	8002418 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d902      	bls.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	74fb      	strb	r3, [r7, #19]
        break;
 8003d7a:	e005      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d7c:	4b7f      	ldr	r3, [pc, #508]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ef      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d155      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d8e:	4b7a      	ldr	r3, [pc, #488]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01e      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d019      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003daa:	4b73      	ldr	r3, [pc, #460]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003db6:	4a70      	ldr	r2, [pc, #448]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003db8:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc6:	4a6c      	ldr	r2, [pc, #432]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003dc8:	4b6b      	ldr	r3, [pc, #428]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dd6:	4a68      	ldr	r2, [pc, #416]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d016      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fe fb16 	bl	8002418 <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dee:	e00b      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df0:	f7fe fb12 	bl	8002418 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d902      	bls.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	74fb      	strb	r3, [r7, #19]
            break;
 8003e06:	e006      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e08:	4b5b      	ldr	r3, [pc, #364]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0ec      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e1c:	4956      	ldr	r1, [pc, #344]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e1e:	4b56      	ldr	r3, [pc, #344]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e32:	e004      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	74bb      	strb	r3, [r7, #18]
 8003e38:	e001      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	7cfb      	ldrb	r3, [r7, #19]
 8003e3c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3e:	7c7b      	ldrb	r3, [r7, #17]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e44:	4a4c      	ldr	r2, [pc, #304]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e46:	4b4c      	ldr	r3, [pc, #304]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e5c:	4946      	ldr	r1, [pc, #280]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e5e:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	f023 0203 	bic.w	r2, r3, #3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e7e:	493e      	ldr	r1, [pc, #248]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e80:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f023 020c 	bic.w	r2, r3, #12
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ea0:	4935      	ldr	r1, [pc, #212]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ea2:	4b35      	ldr	r3, [pc, #212]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ec2:	492d      	ldr	r1, [pc, #180]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ec4:	4b2c      	ldr	r3, [pc, #176]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ee4:	4924      	ldr	r1, [pc, #144]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f06:	491c      	ldr	r1, [pc, #112]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f28:	4913      	ldr	r1, [pc, #76]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d02c      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f4a:	490b      	ldr	r1, [pc, #44]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f68:	d10a      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f6a:	4a03      	ldr	r2, [pc, #12]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f6c:	4b02      	ldr	r3, [pc, #8]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f74:	60d3      	str	r3, [r2, #12]
 8003f76:	e015      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	2101      	movs	r1, #1
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 f871 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f9a:	7cfb      	ldrb	r3, [r7, #19]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d028      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fb0:	4930      	ldr	r1, [pc, #192]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb2:	4b30      	ldr	r3, [pc, #192]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fce:	d106      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd0:	4a28      	ldr	r2, [pc, #160]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd2:	4b28      	ldr	r3, [pc, #160]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fda:	60d3      	str	r3, [r2, #12]
 8003fdc:	e011      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fe6:	d10c      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	2101      	movs	r1, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f842 	bl	8004078 <RCCEx_PLLSAI1_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01c      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800400e:	4919      	ldr	r1, [pc, #100]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800402c:	d10c      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3304      	adds	r3, #4
 8004032:	2102      	movs	r1, #2
 8004034:	4618      	mov	r0, r3
 8004036:	f000 f81f 	bl	8004078 <RCCEx_PLLSAI1_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004054:	4907      	ldr	r1, [pc, #28]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800406a:	7cbb      	ldrb	r3, [r7, #18]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40021000 	.word	0x40021000

08004078 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004086:	4b73      	ldr	r3, [pc, #460]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d018      	beq.n	80040c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004092:	4b70      	ldr	r3, [pc, #448]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0203 	and.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d10d      	bne.n	80040be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
       ||
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040aa:	4b6a      	ldr	r3, [pc, #424]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
       ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d044      	beq.n	8004148 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	e041      	b.n	8004148 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d00c      	beq.n	80040e6 <RCCEx_PLLSAI1_Config+0x6e>
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d013      	beq.n	80040f8 <RCCEx_PLLSAI1_Config+0x80>
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d120      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040d4:	4b5f      	ldr	r3, [pc, #380]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d11d      	bne.n	800411c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e4:	e01a      	b.n	800411c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040e6:	4b5b      	ldr	r3, [pc, #364]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d116      	bne.n	8004120 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f6:	e013      	b.n	8004120 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040f8:	4b56      	ldr	r3, [pc, #344]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10f      	bne.n	8004124 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004104:	4b53      	ldr	r3, [pc, #332]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004114:	e006      	b.n	8004124 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
      break;
 800411a:	e004      	b.n	8004126 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800411c:	bf00      	nop
 800411e:	e002      	b.n	8004126 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004120:	bf00      	nop
 8004122:	e000      	b.n	8004126 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004124:	bf00      	nop
    }

    if(status == HAL_OK)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10d      	bne.n	8004148 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800412c:	4849      	ldr	r0, [pc, #292]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 800412e:	4b49      	ldr	r3, [pc, #292]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6819      	ldr	r1, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	3b01      	subs	r3, #1
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	430b      	orrs	r3, r1
 8004144:	4313      	orrs	r3, r2
 8004146:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d17c      	bne.n	8004248 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800414e:	4a41      	ldr	r2, [pc, #260]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004150:	4b40      	ldr	r3, [pc, #256]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800415a:	f7fe f95d 	bl	8002418 <HAL_GetTick>
 800415e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004160:	e009      	b.n	8004176 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004162:	f7fe f959 	bl	8002418 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d902      	bls.n	8004176 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	73fb      	strb	r3, [r7, #15]
        break;
 8004174:	e005      	b.n	8004182 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004176:	4b37      	ldr	r3, [pc, #220]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1ef      	bne.n	8004162 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d15f      	bne.n	8004248 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d110      	bne.n	80041b0 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800418e:	4831      	ldr	r0, [pc, #196]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004190:	4b30      	ldr	r3, [pc, #192]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004198:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6892      	ldr	r2, [r2, #8]
 80041a0:	0211      	lsls	r1, r2, #8
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68d2      	ldr	r2, [r2, #12]
 80041a6:	06d2      	lsls	r2, r2, #27
 80041a8:	430a      	orrs	r2, r1
 80041aa:	4313      	orrs	r3, r2
 80041ac:	6103      	str	r3, [r0, #16]
 80041ae:	e027      	b.n	8004200 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d112      	bne.n	80041dc <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041b6:	4827      	ldr	r0, [pc, #156]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041b8:	4b26      	ldr	r3, [pc, #152]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6892      	ldr	r2, [r2, #8]
 80041c8:	0211      	lsls	r1, r2, #8
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6912      	ldr	r2, [r2, #16]
 80041ce:	0852      	lsrs	r2, r2, #1
 80041d0:	3a01      	subs	r2, #1
 80041d2:	0552      	lsls	r2, r2, #21
 80041d4:	430a      	orrs	r2, r1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	6103      	str	r3, [r0, #16]
 80041da:	e011      	b.n	8004200 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041dc:	481d      	ldr	r0, [pc, #116]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041de:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6892      	ldr	r2, [r2, #8]
 80041ee:	0211      	lsls	r1, r2, #8
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6952      	ldr	r2, [r2, #20]
 80041f4:	0852      	lsrs	r2, r2, #1
 80041f6:	3a01      	subs	r2, #1
 80041f8:	0652      	lsls	r2, r2, #25
 80041fa:	430a      	orrs	r2, r1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800420a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fe f904 	bl	8002418 <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004212:	e009      	b.n	8004228 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004214:	f7fe f900 	bl	8002418 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d902      	bls.n	8004228 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	73fb      	strb	r3, [r7, #15]
          break;
 8004226:	e005      	b.n	8004234 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0ef      	beq.n	8004214 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800423a:	4906      	ldr	r1, [pc, #24]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <RCCEx_PLLSAI1_Config+0x1dc>)
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	4313      	orrs	r3, r2
 8004246:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000

08004258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e040      	b.n	80042ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd ff9a 	bl	80021b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	f022 0201 	bic.w	r2, r2, #1
 8004294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 faaa 	bl	80047f0 <UART_SetConfig>
 800429c:	4603      	mov	r3, r0
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e022      	b.n	80042ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fd5c 	bl	8004d6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	6852      	ldr	r2, [r2, #4]
 80042be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	6892      	ldr	r2, [r2, #8]
 80042ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fde3 	bl	8004eb0 <UART_CheckIdleState>
 80042ea:	4603      	mov	r3, r0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e027      	b.n	8004356 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2224      	movs	r2, #36	; 0x24
 800430a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	f022 0201 	bic.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2200      	movs	r2, #0
 8004332:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7fd ffd3 	bl	80022e0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b08a      	sub	sp, #40	; 0x28
 8004362:	af02      	add	r7, sp, #8
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	4613      	mov	r3, r2
 800436c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004372:	2b20      	cmp	r3, #32
 8004374:	f040 8081 	bne.w	800447a <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_UART_Transmit+0x26>
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e079      	b.n	800447c <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_UART_Transmit+0x38>
 8004392:	2302      	movs	r3, #2
 8004394:	e072      	b.n	800447c <HAL_UART_Transmit+0x11e>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2221      	movs	r2, #33	; 0x21
 80043a8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80043aa:	f7fe f835 	bl	8002418 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	88fa      	ldrh	r2, [r7, #6]
 80043bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c8:	d108      	bne.n	80043dc <HAL_UART_Transmit+0x7e>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	e003      	b.n	80043e4 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043e4:	e02d      	b.n	8004442 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2200      	movs	r2, #0
 80043ee:	2180      	movs	r1, #128	; 0x80
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fda2 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e03d      	b.n	800447c <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10b      	bne.n	800441e <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	8812      	ldrh	r2, [r2, #0]
 800440e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004412:	b292      	uxth	r2, r2
 8004414:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	3302      	adds	r3, #2
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	e008      	b.n	8004430 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	7812      	ldrb	r2, [r2, #0]
 8004426:	b292      	uxth	r2, r2
 8004428:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3301      	adds	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1cb      	bne.n	80043e6 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2200      	movs	r2, #0
 8004456:	2140      	movs	r1, #64	; 0x40
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fd6e 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e009      	b.n	800447c <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e000      	b.n	800447c <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
  }
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004496:	2b20      	cmp	r3, #32
 8004498:	f040 808a 	bne.w	80045b0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_UART_Receive_IT+0x24>
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e082      	b.n	80045b2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Receive_IT+0x36>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e07b      	b.n	80045b2 <HAL_UART_Receive_IT+0x12e>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	88fa      	ldrh	r2, [r7, #6]
 80044cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e6:	d10e      	bne.n	8004506 <HAL_UART_Receive_IT+0x82>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <HAL_UART_Receive_IT+0x78>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044fa:	e02d      	b.n	8004558 <HAL_UART_Receive_IT+0xd4>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	22ff      	movs	r2, #255	; 0xff
 8004500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004504:	e028      	b.n	8004558 <HAL_UART_Receive_IT+0xd4>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10d      	bne.n	800452a <HAL_UART_Receive_IT+0xa6>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <HAL_UART_Receive_IT+0x9c>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	22ff      	movs	r2, #255	; 0xff
 800451a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800451e:	e01b      	b.n	8004558 <HAL_UART_Receive_IT+0xd4>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	227f      	movs	r2, #127	; 0x7f
 8004524:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004528:	e016      	b.n	8004558 <HAL_UART_Receive_IT+0xd4>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004532:	d10d      	bne.n	8004550 <HAL_UART_Receive_IT+0xcc>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <HAL_UART_Receive_IT+0xc2>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	227f      	movs	r2, #127	; 0x7f
 8004540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004544:	e008      	b.n	8004558 <HAL_UART_Receive_IT+0xd4>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	223f      	movs	r2, #63	; 0x3f
 800454a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800454e:	e003      	b.n	8004558 <HAL_UART_Receive_IT+0xd4>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2222      	movs	r2, #34	; 0x22
 8004562:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	6892      	ldr	r2, [r2, #8]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d107      	bne.n	800458e <HAL_UART_Receive_IT+0x10a>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4a0d      	ldr	r2, [pc, #52]	; (80045c0 <HAL_UART_Receive_IT+0x13c>)
 800458a:	661a      	str	r2, [r3, #96]	; 0x60
 800458c:	e002      	b.n	8004594 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <HAL_UART_Receive_IT+0x140>)
 8004592:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80045aa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e000      	b.n	80045b2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	0800524b 	.word	0x0800524b
 80045c4:	080051a1 	.word	0x080051a1

080045c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d164      	bne.n	80046a8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_UART_Transmit_DMA+0x22>
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e05d      	b.n	80046aa <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_UART_Transmit_DMA+0x34>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e056      	b.n	80046aa <HAL_UART_Transmit_DMA+0xe2>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	88fa      	ldrh	r2, [r7, #6]
 800460e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	88fa      	ldrh	r2, [r7, #6]
 8004616:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2221      	movs	r2, #33	; 0x21
 8004624:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800462a:	2b00      	cmp	r3, #0
 800462c:	d02a      	beq.n	8004684 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004632:	4a20      	ldr	r2, [pc, #128]	; (80046b4 <HAL_UART_Transmit_DMA+0xec>)
 8004634:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800463a:	4a1f      	ldr	r2, [pc, #124]	; (80046b8 <HAL_UART_Transmit_DMA+0xf0>)
 800463c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004642:	4a1e      	ldr	r2, [pc, #120]	; (80046bc <HAL_UART_Transmit_DMA+0xf4>)
 8004644:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800464a:	2200      	movs	r2, #0
 800464c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004656:	4619      	mov	r1, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3328      	adds	r3, #40	; 0x28
 800465e:	461a      	mov	r2, r3
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	f7fe f913 	bl	800288c <HAL_DMA_Start_IT>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00b      	beq.n	8004684 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2210      	movs	r2, #16
 8004670:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e012      	b.n	80046aa <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2240      	movs	r2, #64	; 0x40
 800468a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	6892      	ldr	r2, [r2, #8]
 800469e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046a2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	08005035 	.word	0x08005035
 80046b8:	08005089 	.word	0x08005089
 80046bc:	08005129 	.word	0x08005129

080046c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	4613      	mov	r3, r2
 80046cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d16c      	bne.n	80047b0 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_UART_Receive_DMA+0x22>
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e065      	b.n	80047b2 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_UART_Receive_DMA+0x34>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e05e      	b.n	80047b2 <HAL_UART_Receive_DMA+0xf2>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	88fa      	ldrh	r2, [r7, #6]
 8004706:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2222      	movs	r2, #34	; 0x22
 8004714:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d02a      	beq.n	8004774 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004722:	4a26      	ldr	r2, [pc, #152]	; (80047bc <HAL_UART_Receive_DMA+0xfc>)
 8004724:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800472a:	4a25      	ldr	r2, [pc, #148]	; (80047c0 <HAL_UART_Receive_DMA+0x100>)
 800472c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004732:	4a24      	ldr	r2, [pc, #144]	; (80047c4 <HAL_UART_Receive_DMA+0x104>)
 8004734:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473a:	2200      	movs	r2, #0
 800473c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3324      	adds	r3, #36	; 0x24
 8004748:	4619      	mov	r1, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	461a      	mov	r2, r3
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	f7fe f89b 	bl	800288c <HAL_DMA_Start_IT>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2210      	movs	r2, #16
 8004760:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e01e      	b.n	80047b2 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800478a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	6892      	ldr	r2, [r2, #8]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	6892      	ldr	r2, [r2, #8]
 80047a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047aa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	e000      	b.n	80047b2 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80047b0:	2302      	movs	r3, #2
  }
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	080050a5 	.word	0x080050a5
 80047c0:	0800510d 	.word	0x0800510d
 80047c4:	08005129 	.word	0x08005129

080047c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80047f4:	b088      	sub	sp, #32
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4313      	orrs	r3, r2
 800481c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6819      	ldr	r1, [r3, #0]
 8004828:	4bb5      	ldr	r3, [pc, #724]	; (8004b00 <UART_SetConfig+0x310>)
 800482a:	400b      	ands	r3, r1
 800482c:	69f9      	ldr	r1, [r7, #28]
 800482e:	430b      	orrs	r3, r1
 8004830:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	6852      	ldr	r2, [r2, #4]
 800483c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	68d2      	ldr	r2, [r2, #12]
 8004844:	430a      	orrs	r2, r1
 8004846:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4aac      	ldr	r2, [pc, #688]	; (8004b04 <UART_SetConfig+0x314>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	4313      	orrs	r3, r2
 8004860:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	6892      	ldr	r2, [r2, #8]
 800486c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	430a      	orrs	r2, r1
 8004874:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4aa3      	ldr	r2, [pc, #652]	; (8004b08 <UART_SetConfig+0x318>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d121      	bne.n	80048c4 <UART_SetConfig+0xd4>
 8004880:	4ba2      	ldr	r3, [pc, #648]	; (8004b0c <UART_SetConfig+0x31c>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b03      	cmp	r3, #3
 800488c:	d816      	bhi.n	80048bc <UART_SetConfig+0xcc>
 800488e:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <UART_SetConfig+0xa4>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048a5 	.word	0x080048a5
 8004898:	080048b1 	.word	0x080048b1
 800489c:	080048ab 	.word	0x080048ab
 80048a0:	080048b7 	.word	0x080048b7
 80048a4:	2301      	movs	r3, #1
 80048a6:	76fb      	strb	r3, [r7, #27]
 80048a8:	e072      	b.n	8004990 <UART_SetConfig+0x1a0>
 80048aa:	2302      	movs	r3, #2
 80048ac:	76fb      	strb	r3, [r7, #27]
 80048ae:	e06f      	b.n	8004990 <UART_SetConfig+0x1a0>
 80048b0:	2304      	movs	r3, #4
 80048b2:	76fb      	strb	r3, [r7, #27]
 80048b4:	e06c      	b.n	8004990 <UART_SetConfig+0x1a0>
 80048b6:	2308      	movs	r3, #8
 80048b8:	76fb      	strb	r3, [r7, #27]
 80048ba:	e069      	b.n	8004990 <UART_SetConfig+0x1a0>
 80048bc:	2310      	movs	r3, #16
 80048be:	76fb      	strb	r3, [r7, #27]
 80048c0:	bf00      	nop
 80048c2:	e065      	b.n	8004990 <UART_SetConfig+0x1a0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a91      	ldr	r2, [pc, #580]	; (8004b10 <UART_SetConfig+0x320>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d134      	bne.n	8004938 <UART_SetConfig+0x148>
 80048ce:	4b8f      	ldr	r3, [pc, #572]	; (8004b0c <UART_SetConfig+0x31c>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b0c      	cmp	r3, #12
 80048da:	d829      	bhi.n	8004930 <UART_SetConfig+0x140>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0xf4>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	08004919 	.word	0x08004919
 80048e8:	08004931 	.word	0x08004931
 80048ec:	08004931 	.word	0x08004931
 80048f0:	08004931 	.word	0x08004931
 80048f4:	08004925 	.word	0x08004925
 80048f8:	08004931 	.word	0x08004931
 80048fc:	08004931 	.word	0x08004931
 8004900:	08004931 	.word	0x08004931
 8004904:	0800491f 	.word	0x0800491f
 8004908:	08004931 	.word	0x08004931
 800490c:	08004931 	.word	0x08004931
 8004910:	08004931 	.word	0x08004931
 8004914:	0800492b 	.word	0x0800492b
 8004918:	2300      	movs	r3, #0
 800491a:	76fb      	strb	r3, [r7, #27]
 800491c:	e038      	b.n	8004990 <UART_SetConfig+0x1a0>
 800491e:	2302      	movs	r3, #2
 8004920:	76fb      	strb	r3, [r7, #27]
 8004922:	e035      	b.n	8004990 <UART_SetConfig+0x1a0>
 8004924:	2304      	movs	r3, #4
 8004926:	76fb      	strb	r3, [r7, #27]
 8004928:	e032      	b.n	8004990 <UART_SetConfig+0x1a0>
 800492a:	2308      	movs	r3, #8
 800492c:	76fb      	strb	r3, [r7, #27]
 800492e:	e02f      	b.n	8004990 <UART_SetConfig+0x1a0>
 8004930:	2310      	movs	r3, #16
 8004932:	76fb      	strb	r3, [r7, #27]
 8004934:	bf00      	nop
 8004936:	e02b      	b.n	8004990 <UART_SetConfig+0x1a0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a71      	ldr	r2, [pc, #452]	; (8004b04 <UART_SetConfig+0x314>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d124      	bne.n	800498c <UART_SetConfig+0x19c>
 8004942:	4b72      	ldr	r3, [pc, #456]	; (8004b0c <UART_SetConfig+0x31c>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800494c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004950:	d012      	beq.n	8004978 <UART_SetConfig+0x188>
 8004952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004956:	d802      	bhi.n	800495e <UART_SetConfig+0x16e>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d007      	beq.n	800496c <UART_SetConfig+0x17c>
 800495c:	e012      	b.n	8004984 <UART_SetConfig+0x194>
 800495e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004962:	d006      	beq.n	8004972 <UART_SetConfig+0x182>
 8004964:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004968:	d009      	beq.n	800497e <UART_SetConfig+0x18e>
 800496a:	e00b      	b.n	8004984 <UART_SetConfig+0x194>
 800496c:	2300      	movs	r3, #0
 800496e:	76fb      	strb	r3, [r7, #27]
 8004970:	e00e      	b.n	8004990 <UART_SetConfig+0x1a0>
 8004972:	2302      	movs	r3, #2
 8004974:	76fb      	strb	r3, [r7, #27]
 8004976:	e00b      	b.n	8004990 <UART_SetConfig+0x1a0>
 8004978:	2304      	movs	r3, #4
 800497a:	76fb      	strb	r3, [r7, #27]
 800497c:	e008      	b.n	8004990 <UART_SetConfig+0x1a0>
 800497e:	2308      	movs	r3, #8
 8004980:	76fb      	strb	r3, [r7, #27]
 8004982:	e005      	b.n	8004990 <UART_SetConfig+0x1a0>
 8004984:	2310      	movs	r3, #16
 8004986:	76fb      	strb	r3, [r7, #27]
 8004988:	bf00      	nop
 800498a:	e001      	b.n	8004990 <UART_SetConfig+0x1a0>
 800498c:	2310      	movs	r3, #16
 800498e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a5b      	ldr	r2, [pc, #364]	; (8004b04 <UART_SetConfig+0x314>)
 8004996:	4293      	cmp	r3, r2
 8004998:	f040 80e8 	bne.w	8004b6c <UART_SetConfig+0x37c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800499c:	7efb      	ldrb	r3, [r7, #27]
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d823      	bhi.n	80049ea <UART_SetConfig+0x1fa>
 80049a2:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <UART_SetConfig+0x1b8>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	080049cd 	.word	0x080049cd
 80049ac:	080049eb 	.word	0x080049eb
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049eb 	.word	0x080049eb
 80049b8:	080049db 	.word	0x080049db
 80049bc:	080049eb 	.word	0x080049eb
 80049c0:	080049eb 	.word	0x080049eb
 80049c4:	080049eb 	.word	0x080049eb
 80049c8:	080049e3 	.word	0x080049e3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80049cc:	f7ff f8d6 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 80049d0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049d2:	e00d      	b.n	80049f0 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80049d4:	4b4f      	ldr	r3, [pc, #316]	; (8004b14 <UART_SetConfig+0x324>)
 80049d6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049d8:	e00a      	b.n	80049f0 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80049da:	f7ff f839 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 80049de:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049e0:	e006      	b.n	80049f0 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80049e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049e8:	e002      	b.n	80049f0 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	74fb      	strb	r3, [r7, #19]
        break;
 80049ee:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 81ad 	beq.w	8004d52 <UART_SetConfig+0x562>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	441a      	add	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d805      	bhi.n	8004a14 <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d202      	bcs.n	8004a1a <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	74fb      	strb	r3, [r7, #19]
 8004a18:	e19b      	b.n	8004d52 <UART_SetConfig+0x562>
      }
      else
      {
        switch (clocksource)
 8004a1a:	7efb      	ldrb	r3, [r7, #27]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	f200 8092 	bhi.w	8004b46 <UART_SetConfig+0x356>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <UART_SetConfig+0x238>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a4d 	.word	0x08004a4d
 8004a2c:	08004b47 	.word	0x08004b47
 8004a30:	08004a8d 	.word	0x08004a8d
 8004a34:	08004b47 	.word	0x08004b47
 8004a38:	08004ac1 	.word	0x08004ac1
 8004a3c:	08004b47 	.word	0x08004b47
 8004a40:	08004b47 	.word	0x08004b47
 8004a44:	08004b47 	.word	0x08004b47
 8004a48:	08004b1d 	.word	0x08004b1d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004a4c:	f7ff f896 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f04f 0400 	mov.w	r4, #0
 8004a56:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8004a5a:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8004a5e:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	f04f 0400 	mov.w	r4, #0
 8004a6c:	eb18 0003 	adds.w	r0, r8, r3
 8004a70:	eb49 0104 	adc.w	r1, r9, r4
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f04f 0400 	mov.w	r4, #0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4623      	mov	r3, r4
 8004a80:	f7fb fbf6 	bl	8000270 <__aeabi_uldivmod>
 8004a84:	4603      	mov	r3, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004a8a:	e05f      	b.n	8004b4c <UART_SetConfig+0x35c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	f04f 0400 	mov.w	r4, #0
 8004a96:	4920      	ldr	r1, [pc, #128]	; (8004b18 <UART_SetConfig+0x328>)
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	eb13 0801 	adds.w	r8, r3, r1
 8004aa0:	eb44 0902 	adc.w	r9, r4, r2
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f04f 0400 	mov.w	r4, #0
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	f7fb fbdc 	bl	8000270 <__aeabi_uldivmod>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004abe:	e045      	b.n	8004b4c <UART_SetConfig+0x35c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004ac0:	f7fe ffc6 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	021d      	lsls	r5, r3, #8
 8004ace:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8004ad2:	0214      	lsls	r4, r2, #8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	085b      	lsrs	r3, r3, #1
 8004ada:	461a      	mov	r2, r3
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	18a0      	adds	r0, r4, r2
 8004ae2:	eb45 0103 	adc.w	r1, r5, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f04f 0400 	mov.w	r4, #0
 8004aee:	461a      	mov	r2, r3
 8004af0:	4623      	mov	r3, r4
 8004af2:	f7fb fbbd 	bl	8000270 <__aeabi_uldivmod>
 8004af6:	4603      	mov	r3, r0
 8004af8:	460c      	mov	r4, r1
 8004afa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004afc:	e026      	b.n	8004b4c <UART_SetConfig+0x35c>
 8004afe:	bf00      	nop
 8004b00:	efff69f3 	.word	0xefff69f3
 8004b04:	40008000 	.word	0x40008000
 8004b08:	40013800 	.word	0x40013800
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40004400 	.word	0x40004400
 8004b14:	00f42400 	.word	0x00f42400
 8004b18:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	f04f 0400 	mov.w	r4, #0
 8004b26:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004b2a:	f144 0100 	adc.w	r1, r4, #0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f04f 0400 	mov.w	r4, #0
 8004b36:	461a      	mov	r2, r3
 8004b38:	4623      	mov	r3, r4
 8004b3a:	f7fb fb99 	bl	8000270 <__aeabi_uldivmod>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	460c      	mov	r4, r1
 8004b42:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004b44:	e002      	b.n	8004b4c <UART_SetConfig+0x35c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	74fb      	strb	r3, [r7, #19]
            break;
 8004b4a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b52:	d308      	bcc.n	8004b66 <UART_SetConfig+0x376>
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b5a:	d204      	bcs.n	8004b66 <UART_SetConfig+0x376>
        {
          huart->Instance->BRR = usartdiv;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	60da      	str	r2, [r3, #12]
 8004b64:	e0f5      	b.n	8004d52 <UART_SetConfig+0x562>
        }
        else
        {
          ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	74fb      	strb	r3, [r7, #19]
 8004b6a:	e0f2      	b.n	8004d52 <UART_SetConfig+0x562>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b74:	d17f      	bne.n	8004c76 <UART_SetConfig+0x486>
  {
    switch (clocksource)
 8004b76:	7efb      	ldrb	r3, [r7, #27]
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d85c      	bhi.n	8004c36 <UART_SetConfig+0x446>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <UART_SetConfig+0x394>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004be5 	.word	0x08004be5
 8004b90:	08004c37 	.word	0x08004c37
 8004b94:	08004c01 	.word	0x08004c01
 8004b98:	08004c37 	.word	0x08004c37
 8004b9c:	08004c37 	.word	0x08004c37
 8004ba0:	08004c37 	.word	0x08004c37
 8004ba4:	08004c1f 	.word	0x08004c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ba8:	f7fe ffe8 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004bac:	4603      	mov	r3, r0
 8004bae:	005a      	lsls	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	085b      	lsrs	r3, r3, #1
 8004bb6:	441a      	add	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bc4:	e03a      	b.n	8004c3c <UART_SetConfig+0x44c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004bc6:	f7fe ffef 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	005a      	lsls	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	441a      	add	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004be2:	e02b      	b.n	8004c3c <UART_SetConfig+0x44c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004bee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6852      	ldr	r2, [r2, #4]
 8004bf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bfe:	e01d      	b.n	8004c3c <UART_SetConfig+0x44c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004c00:	f7fe ff26 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8004c04:	4603      	mov	r3, r0
 8004c06:	005a      	lsls	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	441a      	add	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c1c:	e00e      	b.n	8004c3c <UART_SetConfig+0x44c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c34:	e002      	b.n	8004c3c <UART_SetConfig+0x44c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	74fb      	strb	r3, [r7, #19]
        break;
 8004c3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	d916      	bls.n	8004c70 <UART_SetConfig+0x480>
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c48:	d212      	bcs.n	8004c70 <UART_SetConfig+0x480>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f023 030f 	bic.w	r3, r3, #15
 8004c52:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	897b      	ldrh	r3, [r7, #10]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	897a      	ldrh	r2, [r7, #10]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	e070      	b.n	8004d52 <UART_SetConfig+0x562>
    }
    else
    {
      ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	74fb      	strb	r3, [r7, #19]
 8004c74:	e06d      	b.n	8004d52 <UART_SetConfig+0x562>
    }
  }
  else
  {
    switch (clocksource)
 8004c76:	7efb      	ldrb	r3, [r7, #27]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d859      	bhi.n	8004d30 <UART_SetConfig+0x540>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x494>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cc5 	.word	0x08004cc5
 8004c8c:	08004ce1 	.word	0x08004ce1
 8004c90:	08004d31 	.word	0x08004d31
 8004c94:	08004cfd 	.word	0x08004cfd
 8004c98:	08004d31 	.word	0x08004d31
 8004c9c:	08004d31 	.word	0x08004d31
 8004ca0:	08004d31 	.word	0x08004d31
 8004ca4:	08004d19 	.word	0x08004d19
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ca8:	f7fe ff68 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004cac:	4602      	mov	r2, r0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	085b      	lsrs	r3, r3, #1
 8004cb4:	441a      	add	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cc2:	e038      	b.n	8004d36 <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004cc4:	f7fe ff70 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	441a      	add	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cde:	e02a      	b.n	8004d36 <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	085b      	lsrs	r3, r3, #1
 8004ce6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004cea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6852      	ldr	r2, [r2, #4]
 8004cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cfa:	e01c      	b.n	8004d36 <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004cfc:	f7fe fea8 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8004d00:	4602      	mov	r2, r0
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	441a      	add	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d16:	e00e      	b.n	8004d36 <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d2e:	e002      	b.n	8004d36 <UART_SetConfig+0x546>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	74fb      	strb	r3, [r7, #19]
        break;
 8004d34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b0f      	cmp	r3, #15
 8004d3a:	d908      	bls.n	8004d4e <UART_SetConfig+0x55e>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d42:	d204      	bcs.n	8004d4e <UART_SetConfig+0x55e>
    {
      huart->Instance->BRR = usartdiv;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	60da      	str	r2, [r3, #12]
 8004d4c:	e001      	b.n	8004d52 <UART_SetConfig+0x562>
    }
    else
    {
      ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004d5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d6a:	bf00      	nop

08004d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	6852      	ldr	r2, [r2, #4]
 8004d8a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	6852      	ldr	r2, [r2, #4]
 8004dac:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	6852      	ldr	r2, [r2, #4]
 8004dce:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	6852      	ldr	r2, [r2, #4]
 8004df0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	6892      	ldr	r2, [r2, #8]
 8004e12:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	6892      	ldr	r2, [r2, #8]
 8004e34:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	6852      	ldr	r2, [r2, #4]
 8004e56:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e6a:	d10a      	bne.n	8004e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	6852      	ldr	r2, [r2, #4]
 8004e76:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	6852      	ldr	r2, [r2, #4]
 8004e98:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ebe:	f7fd faab 	bl	8002418 <HAL_GetTick>
 8004ec2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d10e      	bne.n	8004ef0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f82a 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e020      	b.n	8004f32 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d10e      	bne.n	8004f1c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004efe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f814 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e00a      	b.n	8004f32 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2220      	movs	r2, #32
 8004f26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4a:	e02a      	b.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d026      	beq.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f54:	f7fd fa60 	bl	8002418 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	1ad2      	subs	r2, r2, r3
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d802      	bhi.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d11b      	bne.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	6892      	ldr	r2, [r2, #8]
 8004f84:	f022 0201 	bic.w	r2, r2, #1
 8004f88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e00f      	b.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	401a      	ands	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	bf0c      	ite	eq
 8004fb2:	2301      	moveq	r3, #1
 8004fb4:	2300      	movne	r3, #0
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d0c5      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004fe0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800500a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	6892      	ldr	r2, [r2, #8]
 8005016:	f022 0201 	bic.w	r2, r2, #1
 800501a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d114      	bne.n	800507a <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	6892      	ldr	r2, [r2, #8]
 8005062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005066:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005076:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005078:	e002      	b.n	8005080 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7fd f858 	bl	8002130 <HAL_UART_TxCpltCallback>
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f7ff fb96 	bl	80047c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d11e      	bne.n	80050fe <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050d6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	6892      	ldr	r2, [r2, #8]
 80050e2:	f022 0201 	bic.w	r2, r2, #1
 80050e6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	6892      	ldr	r2, [r2, #8]
 80050f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7fd f842 	bl	8002188 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f7ff fb5e 	bl	80047dc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005140:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514c:	2b80      	cmp	r3, #128	; 0x80
 800514e:	d109      	bne.n	8005164 <UART_DMAError+0x3c>
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	2b21      	cmp	r3, #33	; 0x21
 8005154:	d106      	bne.n	8005164 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2200      	movs	r2, #0
 800515a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800515e:	6978      	ldr	r0, [r7, #20]
 8005160:	f7ff ff33 	bl	8004fca <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516e:	2b40      	cmp	r3, #64	; 0x40
 8005170:	d109      	bne.n	8005186 <UART_DMAError+0x5e>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b22      	cmp	r3, #34	; 0x22
 8005176:	d106      	bne.n	8005186 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2200      	movs	r2, #0
 800517c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005180:	6978      	ldr	r0, [r7, #20]
 8005182:	f7ff ff37 	bl	8004ff4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800518a:	f043 0210 	orr.w	r2, r3, #16
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005192:	6978      	ldr	r0, [r7, #20]
 8005194:	f7fc ffd6 	bl	8002144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005198:	bf00      	nop
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051ae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051b4:	2b22      	cmp	r3, #34	; 0x22
 80051b6:	d13a      	bne.n	800522e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051be:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c4:	89ba      	ldrh	r2, [r7, #12]
 80051c6:	b2d1      	uxtb	r1, r2
 80051c8:	89fa      	ldrh	r2, [r7, #14]
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	400a      	ands	r2, r1
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d123      	bne.n	8005242 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005208:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	6892      	ldr	r2, [r2, #8]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fc ffae 	bl	8002188 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800522c:	e009      	b.n	8005242 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	8b12      	ldrh	r2, [r2, #24]
 8005238:	b292      	uxth	r2, r2
 800523a:	f042 0208 	orr.w	r2, r2, #8
 800523e:	b292      	uxth	r2, r2
 8005240:	831a      	strh	r2, [r3, #24]
}
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005258:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800525e:	2b22      	cmp	r3, #34	; 0x22
 8005260:	d13a      	bne.n	80052d8 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005268:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005270:	89ba      	ldrh	r2, [r7, #12]
 8005272:	89fb      	ldrh	r3, [r7, #14]
 8005274:	4013      	ands	r3, r2
 8005276:	b29a      	uxth	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005280:	1c9a      	adds	r2, r3, #2
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d123      	bne.n	80052ec <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052b2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	6892      	ldr	r2, [r2, #8]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fc ff59 	bl	8002188 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052d6:	e009      	b.n	80052ec <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	8b12      	ldrh	r2, [r2, #24]
 80052e2:	b292      	uxth	r2, r2
 80052e4:	f042 0208 	orr.w	r2, r2, #8
 80052e8:	b292      	uxth	r2, r2
 80052ea:	831a      	strh	r2, [r3, #24]
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <main>:




int main(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  hwInit();
 80052f8:	f7fd f814 	bl	8002324 <hwInit>
  apInit();
 80052fc:	f7fc f8bc 	bl	8001478 <_Z6apInitv>

  apMain();
 8005300:	f7fc f8c4 	bl	800148c <_Z6apMainv>

  return 0;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <__errno>:
 800530c:	4b01      	ldr	r3, [pc, #4]	; (8005314 <__errno+0x8>)
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	2000000c 	.word	0x2000000c

08005318 <__libc_init_array>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	4e0d      	ldr	r6, [pc, #52]	; (8005350 <__libc_init_array+0x38>)
 800531c:	4c0d      	ldr	r4, [pc, #52]	; (8005354 <__libc_init_array+0x3c>)
 800531e:	1ba4      	subs	r4, r4, r6
 8005320:	10a4      	asrs	r4, r4, #2
 8005322:	2500      	movs	r5, #0
 8005324:	42a5      	cmp	r5, r4
 8005326:	d109      	bne.n	800533c <__libc_init_array+0x24>
 8005328:	4e0b      	ldr	r6, [pc, #44]	; (8005358 <__libc_init_array+0x40>)
 800532a:	4c0c      	ldr	r4, [pc, #48]	; (800535c <__libc_init_array+0x44>)
 800532c:	f000 ff70 	bl	8006210 <_init>
 8005330:	1ba4      	subs	r4, r4, r6
 8005332:	10a4      	asrs	r4, r4, #2
 8005334:	2500      	movs	r5, #0
 8005336:	42a5      	cmp	r5, r4
 8005338:	d105      	bne.n	8005346 <__libc_init_array+0x2e>
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005340:	4798      	blx	r3
 8005342:	3501      	adds	r5, #1
 8005344:	e7ee      	b.n	8005324 <__libc_init_array+0xc>
 8005346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800534a:	4798      	blx	r3
 800534c:	3501      	adds	r5, #1
 800534e:	e7f2      	b.n	8005336 <__libc_init_array+0x1e>
 8005350:	0800643c 	.word	0x0800643c
 8005354:	0800643c 	.word	0x0800643c
 8005358:	0800643c 	.word	0x0800643c
 800535c:	08006440 	.word	0x08006440

08005360 <memset>:
 8005360:	4402      	add	r2, r0
 8005362:	4603      	mov	r3, r0
 8005364:	4293      	cmp	r3, r2
 8005366:	d100      	bne.n	800536a <memset+0xa>
 8005368:	4770      	bx	lr
 800536a:	f803 1b01 	strb.w	r1, [r3], #1
 800536e:	e7f9      	b.n	8005364 <memset+0x4>

08005370 <iprintf>:
 8005370:	b40f      	push	{r0, r1, r2, r3}
 8005372:	4b0a      	ldr	r3, [pc, #40]	; (800539c <iprintf+0x2c>)
 8005374:	b513      	push	{r0, r1, r4, lr}
 8005376:	681c      	ldr	r4, [r3, #0]
 8005378:	b124      	cbz	r4, 8005384 <iprintf+0x14>
 800537a:	69a3      	ldr	r3, [r4, #24]
 800537c:	b913      	cbnz	r3, 8005384 <iprintf+0x14>
 800537e:	4620      	mov	r0, r4
 8005380:	f000 f84e 	bl	8005420 <__sinit>
 8005384:	ab05      	add	r3, sp, #20
 8005386:	9a04      	ldr	r2, [sp, #16]
 8005388:	68a1      	ldr	r1, [r4, #8]
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	4620      	mov	r0, r4
 800538e:	f000 f959 	bl	8005644 <_vfiprintf_r>
 8005392:	b002      	add	sp, #8
 8005394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005398:	b004      	add	sp, #16
 800539a:	4770      	bx	lr
 800539c:	2000000c 	.word	0x2000000c

080053a0 <_cleanup_r>:
 80053a0:	4901      	ldr	r1, [pc, #4]	; (80053a8 <_cleanup_r+0x8>)
 80053a2:	f000 b8a9 	b.w	80054f8 <_fwalk_reent>
 80053a6:	bf00      	nop
 80053a8:	08005f19 	.word	0x08005f19

080053ac <std.isra.0>:
 80053ac:	2300      	movs	r3, #0
 80053ae:	b510      	push	{r4, lr}
 80053b0:	4604      	mov	r4, r0
 80053b2:	6003      	str	r3, [r0, #0]
 80053b4:	6043      	str	r3, [r0, #4]
 80053b6:	6083      	str	r3, [r0, #8]
 80053b8:	8181      	strh	r1, [r0, #12]
 80053ba:	6643      	str	r3, [r0, #100]	; 0x64
 80053bc:	81c2      	strh	r2, [r0, #14]
 80053be:	6103      	str	r3, [r0, #16]
 80053c0:	6143      	str	r3, [r0, #20]
 80053c2:	6183      	str	r3, [r0, #24]
 80053c4:	4619      	mov	r1, r3
 80053c6:	2208      	movs	r2, #8
 80053c8:	305c      	adds	r0, #92	; 0x5c
 80053ca:	f7ff ffc9 	bl	8005360 <memset>
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <std.isra.0+0x38>)
 80053d0:	6263      	str	r3, [r4, #36]	; 0x24
 80053d2:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <std.isra.0+0x3c>)
 80053d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80053d6:	4b05      	ldr	r3, [pc, #20]	; (80053ec <std.isra.0+0x40>)
 80053d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053da:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <std.isra.0+0x44>)
 80053dc:	6224      	str	r4, [r4, #32]
 80053de:	6323      	str	r3, [r4, #48]	; 0x30
 80053e0:	bd10      	pop	{r4, pc}
 80053e2:	bf00      	nop
 80053e4:	08005bbd 	.word	0x08005bbd
 80053e8:	08005bdf 	.word	0x08005bdf
 80053ec:	08005c17 	.word	0x08005c17
 80053f0:	08005c3b 	.word	0x08005c3b

080053f4 <__sfmoreglue>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	1e4a      	subs	r2, r1, #1
 80053f8:	2568      	movs	r5, #104	; 0x68
 80053fa:	4355      	muls	r5, r2
 80053fc:	460e      	mov	r6, r1
 80053fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005402:	f000 f897 	bl	8005534 <_malloc_r>
 8005406:	4604      	mov	r4, r0
 8005408:	b140      	cbz	r0, 800541c <__sfmoreglue+0x28>
 800540a:	2100      	movs	r1, #0
 800540c:	e880 0042 	stmia.w	r0, {r1, r6}
 8005410:	300c      	adds	r0, #12
 8005412:	60a0      	str	r0, [r4, #8]
 8005414:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005418:	f7ff ffa2 	bl	8005360 <memset>
 800541c:	4620      	mov	r0, r4
 800541e:	bd70      	pop	{r4, r5, r6, pc}

08005420 <__sinit>:
 8005420:	6983      	ldr	r3, [r0, #24]
 8005422:	b510      	push	{r4, lr}
 8005424:	4604      	mov	r4, r0
 8005426:	bb33      	cbnz	r3, 8005476 <__sinit+0x56>
 8005428:	6483      	str	r3, [r0, #72]	; 0x48
 800542a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800542c:	6503      	str	r3, [r0, #80]	; 0x50
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <__sinit+0x58>)
 8005430:	4a12      	ldr	r2, [pc, #72]	; (800547c <__sinit+0x5c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6282      	str	r2, [r0, #40]	; 0x28
 8005436:	4298      	cmp	r0, r3
 8005438:	bf04      	itt	eq
 800543a:	2301      	moveq	r3, #1
 800543c:	6183      	streq	r3, [r0, #24]
 800543e:	f000 f81f 	bl	8005480 <__sfp>
 8005442:	6060      	str	r0, [r4, #4]
 8005444:	4620      	mov	r0, r4
 8005446:	f000 f81b 	bl	8005480 <__sfp>
 800544a:	60a0      	str	r0, [r4, #8]
 800544c:	4620      	mov	r0, r4
 800544e:	f000 f817 	bl	8005480 <__sfp>
 8005452:	2200      	movs	r2, #0
 8005454:	60e0      	str	r0, [r4, #12]
 8005456:	2104      	movs	r1, #4
 8005458:	6860      	ldr	r0, [r4, #4]
 800545a:	f7ff ffa7 	bl	80053ac <std.isra.0>
 800545e:	2201      	movs	r2, #1
 8005460:	2109      	movs	r1, #9
 8005462:	68a0      	ldr	r0, [r4, #8]
 8005464:	f7ff ffa2 	bl	80053ac <std.isra.0>
 8005468:	2202      	movs	r2, #2
 800546a:	2112      	movs	r1, #18
 800546c:	68e0      	ldr	r0, [r4, #12]
 800546e:	f7ff ff9d 	bl	80053ac <std.isra.0>
 8005472:	2301      	movs	r3, #1
 8005474:	61a3      	str	r3, [r4, #24]
 8005476:	bd10      	pop	{r4, pc}
 8005478:	080062a0 	.word	0x080062a0
 800547c:	080053a1 	.word	0x080053a1

08005480 <__sfp>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	4b1c      	ldr	r3, [pc, #112]	; (80054f4 <__sfp+0x74>)
 8005484:	681e      	ldr	r6, [r3, #0]
 8005486:	69b3      	ldr	r3, [r6, #24]
 8005488:	4607      	mov	r7, r0
 800548a:	b913      	cbnz	r3, 8005492 <__sfp+0x12>
 800548c:	4630      	mov	r0, r6
 800548e:	f7ff ffc7 	bl	8005420 <__sinit>
 8005492:	3648      	adds	r6, #72	; 0x48
 8005494:	68b4      	ldr	r4, [r6, #8]
 8005496:	6873      	ldr	r3, [r6, #4]
 8005498:	3b01      	subs	r3, #1
 800549a:	d503      	bpl.n	80054a4 <__sfp+0x24>
 800549c:	6833      	ldr	r3, [r6, #0]
 800549e:	b133      	cbz	r3, 80054ae <__sfp+0x2e>
 80054a0:	6836      	ldr	r6, [r6, #0]
 80054a2:	e7f7      	b.n	8005494 <__sfp+0x14>
 80054a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054a8:	b16d      	cbz	r5, 80054c6 <__sfp+0x46>
 80054aa:	3468      	adds	r4, #104	; 0x68
 80054ac:	e7f4      	b.n	8005498 <__sfp+0x18>
 80054ae:	2104      	movs	r1, #4
 80054b0:	4638      	mov	r0, r7
 80054b2:	f7ff ff9f 	bl	80053f4 <__sfmoreglue>
 80054b6:	6030      	str	r0, [r6, #0]
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d1f1      	bne.n	80054a0 <__sfp+0x20>
 80054bc:	230c      	movs	r3, #12
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4604      	mov	r4, r0
 80054c2:	4620      	mov	r0, r4
 80054c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054ca:	81e3      	strh	r3, [r4, #14]
 80054cc:	2301      	movs	r3, #1
 80054ce:	81a3      	strh	r3, [r4, #12]
 80054d0:	6665      	str	r5, [r4, #100]	; 0x64
 80054d2:	6025      	str	r5, [r4, #0]
 80054d4:	60a5      	str	r5, [r4, #8]
 80054d6:	6065      	str	r5, [r4, #4]
 80054d8:	6125      	str	r5, [r4, #16]
 80054da:	6165      	str	r5, [r4, #20]
 80054dc:	61a5      	str	r5, [r4, #24]
 80054de:	2208      	movs	r2, #8
 80054e0:	4629      	mov	r1, r5
 80054e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054e6:	f7ff ff3b 	bl	8005360 <memset>
 80054ea:	6365      	str	r5, [r4, #52]	; 0x34
 80054ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80054ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80054f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80054f2:	e7e6      	b.n	80054c2 <__sfp+0x42>
 80054f4:	080062a0 	.word	0x080062a0

080054f8 <_fwalk_reent>:
 80054f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054fc:	4680      	mov	r8, r0
 80054fe:	4689      	mov	r9, r1
 8005500:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005504:	2600      	movs	r6, #0
 8005506:	b914      	cbnz	r4, 800550e <_fwalk_reent+0x16>
 8005508:	4630      	mov	r0, r6
 800550a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800550e:	68a5      	ldr	r5, [r4, #8]
 8005510:	6867      	ldr	r7, [r4, #4]
 8005512:	3f01      	subs	r7, #1
 8005514:	d501      	bpl.n	800551a <_fwalk_reent+0x22>
 8005516:	6824      	ldr	r4, [r4, #0]
 8005518:	e7f5      	b.n	8005506 <_fwalk_reent+0xe>
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d907      	bls.n	8005530 <_fwalk_reent+0x38>
 8005520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005524:	3301      	adds	r3, #1
 8005526:	d003      	beq.n	8005530 <_fwalk_reent+0x38>
 8005528:	4629      	mov	r1, r5
 800552a:	4640      	mov	r0, r8
 800552c:	47c8      	blx	r9
 800552e:	4306      	orrs	r6, r0
 8005530:	3568      	adds	r5, #104	; 0x68
 8005532:	e7ee      	b.n	8005512 <_fwalk_reent+0x1a>

08005534 <_malloc_r>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	1ccd      	adds	r5, r1, #3
 8005538:	f025 0503 	bic.w	r5, r5, #3
 800553c:	3508      	adds	r5, #8
 800553e:	2d0c      	cmp	r5, #12
 8005540:	bf38      	it	cc
 8005542:	250c      	movcc	r5, #12
 8005544:	2d00      	cmp	r5, #0
 8005546:	4606      	mov	r6, r0
 8005548:	db01      	blt.n	800554e <_malloc_r+0x1a>
 800554a:	42a9      	cmp	r1, r5
 800554c:	d903      	bls.n	8005556 <_malloc_r+0x22>
 800554e:	230c      	movs	r3, #12
 8005550:	6033      	str	r3, [r6, #0]
 8005552:	2000      	movs	r0, #0
 8005554:	bd70      	pop	{r4, r5, r6, pc}
 8005556:	f000 fd8a 	bl	800606e <__malloc_lock>
 800555a:	4a23      	ldr	r2, [pc, #140]	; (80055e8 <_malloc_r+0xb4>)
 800555c:	6814      	ldr	r4, [r2, #0]
 800555e:	4621      	mov	r1, r4
 8005560:	b991      	cbnz	r1, 8005588 <_malloc_r+0x54>
 8005562:	4c22      	ldr	r4, [pc, #136]	; (80055ec <_malloc_r+0xb8>)
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	b91b      	cbnz	r3, 8005570 <_malloc_r+0x3c>
 8005568:	4630      	mov	r0, r6
 800556a:	f000 fb17 	bl	8005b9c <_sbrk_r>
 800556e:	6020      	str	r0, [r4, #0]
 8005570:	4629      	mov	r1, r5
 8005572:	4630      	mov	r0, r6
 8005574:	f000 fb12 	bl	8005b9c <_sbrk_r>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d126      	bne.n	80055ca <_malloc_r+0x96>
 800557c:	230c      	movs	r3, #12
 800557e:	6033      	str	r3, [r6, #0]
 8005580:	4630      	mov	r0, r6
 8005582:	f000 fd75 	bl	8006070 <__malloc_unlock>
 8005586:	e7e4      	b.n	8005552 <_malloc_r+0x1e>
 8005588:	680b      	ldr	r3, [r1, #0]
 800558a:	1b5b      	subs	r3, r3, r5
 800558c:	d41a      	bmi.n	80055c4 <_malloc_r+0x90>
 800558e:	2b0b      	cmp	r3, #11
 8005590:	d90f      	bls.n	80055b2 <_malloc_r+0x7e>
 8005592:	600b      	str	r3, [r1, #0]
 8005594:	50cd      	str	r5, [r1, r3]
 8005596:	18cc      	adds	r4, r1, r3
 8005598:	4630      	mov	r0, r6
 800559a:	f000 fd69 	bl	8006070 <__malloc_unlock>
 800559e:	f104 000b 	add.w	r0, r4, #11
 80055a2:	1d23      	adds	r3, r4, #4
 80055a4:	f020 0007 	bic.w	r0, r0, #7
 80055a8:	1ac3      	subs	r3, r0, r3
 80055aa:	d01b      	beq.n	80055e4 <_malloc_r+0xb0>
 80055ac:	425a      	negs	r2, r3
 80055ae:	50e2      	str	r2, [r4, r3]
 80055b0:	bd70      	pop	{r4, r5, r6, pc}
 80055b2:	428c      	cmp	r4, r1
 80055b4:	bf0d      	iteet	eq
 80055b6:	6863      	ldreq	r3, [r4, #4]
 80055b8:	684b      	ldrne	r3, [r1, #4]
 80055ba:	6063      	strne	r3, [r4, #4]
 80055bc:	6013      	streq	r3, [r2, #0]
 80055be:	bf18      	it	ne
 80055c0:	460c      	movne	r4, r1
 80055c2:	e7e9      	b.n	8005598 <_malloc_r+0x64>
 80055c4:	460c      	mov	r4, r1
 80055c6:	6849      	ldr	r1, [r1, #4]
 80055c8:	e7ca      	b.n	8005560 <_malloc_r+0x2c>
 80055ca:	1cc4      	adds	r4, r0, #3
 80055cc:	f024 0403 	bic.w	r4, r4, #3
 80055d0:	42a0      	cmp	r0, r4
 80055d2:	d005      	beq.n	80055e0 <_malloc_r+0xac>
 80055d4:	1a21      	subs	r1, r4, r0
 80055d6:	4630      	mov	r0, r6
 80055d8:	f000 fae0 	bl	8005b9c <_sbrk_r>
 80055dc:	3001      	adds	r0, #1
 80055de:	d0cd      	beq.n	800557c <_malloc_r+0x48>
 80055e0:	6025      	str	r5, [r4, #0]
 80055e2:	e7d9      	b.n	8005598 <_malloc_r+0x64>
 80055e4:	bd70      	pop	{r4, r5, r6, pc}
 80055e6:	bf00      	nop
 80055e8:	200008c8 	.word	0x200008c8
 80055ec:	200008cc 	.word	0x200008cc

080055f0 <__sfputc_r>:
 80055f0:	6893      	ldr	r3, [r2, #8]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	b410      	push	{r4}
 80055f8:	6093      	str	r3, [r2, #8]
 80055fa:	da09      	bge.n	8005610 <__sfputc_r+0x20>
 80055fc:	6994      	ldr	r4, [r2, #24]
 80055fe:	42a3      	cmp	r3, r4
 8005600:	db02      	blt.n	8005608 <__sfputc_r+0x18>
 8005602:	b2cb      	uxtb	r3, r1
 8005604:	2b0a      	cmp	r3, #10
 8005606:	d103      	bne.n	8005610 <__sfputc_r+0x20>
 8005608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800560c:	f000 bb1a 	b.w	8005c44 <__swbuf_r>
 8005610:	6813      	ldr	r3, [r2, #0]
 8005612:	1c58      	adds	r0, r3, #1
 8005614:	6010      	str	r0, [r2, #0]
 8005616:	7019      	strb	r1, [r3, #0]
 8005618:	b2c8      	uxtb	r0, r1
 800561a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800561e:	4770      	bx	lr

08005620 <__sfputs_r>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	4606      	mov	r6, r0
 8005624:	460f      	mov	r7, r1
 8005626:	4614      	mov	r4, r2
 8005628:	18d5      	adds	r5, r2, r3
 800562a:	42ac      	cmp	r4, r5
 800562c:	d101      	bne.n	8005632 <__sfputs_r+0x12>
 800562e:	2000      	movs	r0, #0
 8005630:	e007      	b.n	8005642 <__sfputs_r+0x22>
 8005632:	463a      	mov	r2, r7
 8005634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005638:	4630      	mov	r0, r6
 800563a:	f7ff ffd9 	bl	80055f0 <__sfputc_r>
 800563e:	1c43      	adds	r3, r0, #1
 8005640:	d1f3      	bne.n	800562a <__sfputs_r+0xa>
 8005642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005644 <_vfiprintf_r>:
 8005644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005648:	b09d      	sub	sp, #116	; 0x74
 800564a:	460c      	mov	r4, r1
 800564c:	4617      	mov	r7, r2
 800564e:	9303      	str	r3, [sp, #12]
 8005650:	4606      	mov	r6, r0
 8005652:	b118      	cbz	r0, 800565c <_vfiprintf_r+0x18>
 8005654:	6983      	ldr	r3, [r0, #24]
 8005656:	b90b      	cbnz	r3, 800565c <_vfiprintf_r+0x18>
 8005658:	f7ff fee2 	bl	8005420 <__sinit>
 800565c:	4b7c      	ldr	r3, [pc, #496]	; (8005850 <_vfiprintf_r+0x20c>)
 800565e:	429c      	cmp	r4, r3
 8005660:	d157      	bne.n	8005712 <_vfiprintf_r+0xce>
 8005662:	6874      	ldr	r4, [r6, #4]
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	0718      	lsls	r0, r3, #28
 8005668:	d55d      	bpl.n	8005726 <_vfiprintf_r+0xe2>
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d05a      	beq.n	8005726 <_vfiprintf_r+0xe2>
 8005670:	2300      	movs	r3, #0
 8005672:	9309      	str	r3, [sp, #36]	; 0x24
 8005674:	2320      	movs	r3, #32
 8005676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800567a:	2330      	movs	r3, #48	; 0x30
 800567c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005680:	f04f 0b01 	mov.w	fp, #1
 8005684:	46b8      	mov	r8, r7
 8005686:	4645      	mov	r5, r8
 8005688:	f815 3b01 	ldrb.w	r3, [r5], #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d155      	bne.n	800573c <_vfiprintf_r+0xf8>
 8005690:	ebb8 0a07 	subs.w	sl, r8, r7
 8005694:	d00b      	beq.n	80056ae <_vfiprintf_r+0x6a>
 8005696:	4653      	mov	r3, sl
 8005698:	463a      	mov	r2, r7
 800569a:	4621      	mov	r1, r4
 800569c:	4630      	mov	r0, r6
 800569e:	f7ff ffbf 	bl	8005620 <__sfputs_r>
 80056a2:	3001      	adds	r0, #1
 80056a4:	f000 80c4 	beq.w	8005830 <_vfiprintf_r+0x1ec>
 80056a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056aa:	4453      	add	r3, sl
 80056ac:	9309      	str	r3, [sp, #36]	; 0x24
 80056ae:	f898 3000 	ldrb.w	r3, [r8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80bc 	beq.w	8005830 <_vfiprintf_r+0x1ec>
 80056b8:	2300      	movs	r3, #0
 80056ba:	f04f 32ff 	mov.w	r2, #4294967295
 80056be:	9304      	str	r3, [sp, #16]
 80056c0:	9307      	str	r3, [sp, #28]
 80056c2:	9205      	str	r2, [sp, #20]
 80056c4:	9306      	str	r3, [sp, #24]
 80056c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056ca:	931a      	str	r3, [sp, #104]	; 0x68
 80056cc:	2205      	movs	r2, #5
 80056ce:	7829      	ldrb	r1, [r5, #0]
 80056d0:	4860      	ldr	r0, [pc, #384]	; (8005854 <_vfiprintf_r+0x210>)
 80056d2:	f7fa fd7d 	bl	80001d0 <memchr>
 80056d6:	f105 0801 	add.w	r8, r5, #1
 80056da:	9b04      	ldr	r3, [sp, #16]
 80056dc:	2800      	cmp	r0, #0
 80056de:	d131      	bne.n	8005744 <_vfiprintf_r+0x100>
 80056e0:	06d9      	lsls	r1, r3, #27
 80056e2:	bf44      	itt	mi
 80056e4:	2220      	movmi	r2, #32
 80056e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056ea:	071a      	lsls	r2, r3, #28
 80056ec:	bf44      	itt	mi
 80056ee:	222b      	movmi	r2, #43	; 0x2b
 80056f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056f4:	782a      	ldrb	r2, [r5, #0]
 80056f6:	2a2a      	cmp	r2, #42	; 0x2a
 80056f8:	d02c      	beq.n	8005754 <_vfiprintf_r+0x110>
 80056fa:	9a07      	ldr	r2, [sp, #28]
 80056fc:	2100      	movs	r1, #0
 80056fe:	200a      	movs	r0, #10
 8005700:	46a8      	mov	r8, r5
 8005702:	3501      	adds	r5, #1
 8005704:	f898 3000 	ldrb.w	r3, [r8]
 8005708:	3b30      	subs	r3, #48	; 0x30
 800570a:	2b09      	cmp	r3, #9
 800570c:	d96d      	bls.n	80057ea <_vfiprintf_r+0x1a6>
 800570e:	b371      	cbz	r1, 800576e <_vfiprintf_r+0x12a>
 8005710:	e026      	b.n	8005760 <_vfiprintf_r+0x11c>
 8005712:	4b51      	ldr	r3, [pc, #324]	; (8005858 <_vfiprintf_r+0x214>)
 8005714:	429c      	cmp	r4, r3
 8005716:	d101      	bne.n	800571c <_vfiprintf_r+0xd8>
 8005718:	68b4      	ldr	r4, [r6, #8]
 800571a:	e7a3      	b.n	8005664 <_vfiprintf_r+0x20>
 800571c:	4b4f      	ldr	r3, [pc, #316]	; (800585c <_vfiprintf_r+0x218>)
 800571e:	429c      	cmp	r4, r3
 8005720:	bf08      	it	eq
 8005722:	68f4      	ldreq	r4, [r6, #12]
 8005724:	e79e      	b.n	8005664 <_vfiprintf_r+0x20>
 8005726:	4621      	mov	r1, r4
 8005728:	4630      	mov	r0, r6
 800572a:	f000 faef 	bl	8005d0c <__swsetup_r>
 800572e:	2800      	cmp	r0, #0
 8005730:	d09e      	beq.n	8005670 <_vfiprintf_r+0x2c>
 8005732:	f04f 30ff 	mov.w	r0, #4294967295
 8005736:	b01d      	add	sp, #116	; 0x74
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	2b25      	cmp	r3, #37	; 0x25
 800573e:	d0a7      	beq.n	8005690 <_vfiprintf_r+0x4c>
 8005740:	46a8      	mov	r8, r5
 8005742:	e7a0      	b.n	8005686 <_vfiprintf_r+0x42>
 8005744:	4a43      	ldr	r2, [pc, #268]	; (8005854 <_vfiprintf_r+0x210>)
 8005746:	1a80      	subs	r0, r0, r2
 8005748:	fa0b f000 	lsl.w	r0, fp, r0
 800574c:	4318      	orrs	r0, r3
 800574e:	9004      	str	r0, [sp, #16]
 8005750:	4645      	mov	r5, r8
 8005752:	e7bb      	b.n	80056cc <_vfiprintf_r+0x88>
 8005754:	9a03      	ldr	r2, [sp, #12]
 8005756:	1d11      	adds	r1, r2, #4
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	9103      	str	r1, [sp, #12]
 800575c:	2a00      	cmp	r2, #0
 800575e:	db01      	blt.n	8005764 <_vfiprintf_r+0x120>
 8005760:	9207      	str	r2, [sp, #28]
 8005762:	e004      	b.n	800576e <_vfiprintf_r+0x12a>
 8005764:	4252      	negs	r2, r2
 8005766:	f043 0302 	orr.w	r3, r3, #2
 800576a:	9207      	str	r2, [sp, #28]
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	f898 3000 	ldrb.w	r3, [r8]
 8005772:	2b2e      	cmp	r3, #46	; 0x2e
 8005774:	d110      	bne.n	8005798 <_vfiprintf_r+0x154>
 8005776:	f898 3001 	ldrb.w	r3, [r8, #1]
 800577a:	2b2a      	cmp	r3, #42	; 0x2a
 800577c:	f108 0101 	add.w	r1, r8, #1
 8005780:	d137      	bne.n	80057f2 <_vfiprintf_r+0x1ae>
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	1d1a      	adds	r2, r3, #4
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	9203      	str	r2, [sp, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	bfb8      	it	lt
 800578e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005792:	f108 0802 	add.w	r8, r8, #2
 8005796:	9305      	str	r3, [sp, #20]
 8005798:	4d31      	ldr	r5, [pc, #196]	; (8005860 <_vfiprintf_r+0x21c>)
 800579a:	f898 1000 	ldrb.w	r1, [r8]
 800579e:	2203      	movs	r2, #3
 80057a0:	4628      	mov	r0, r5
 80057a2:	f7fa fd15 	bl	80001d0 <memchr>
 80057a6:	b140      	cbz	r0, 80057ba <_vfiprintf_r+0x176>
 80057a8:	2340      	movs	r3, #64	; 0x40
 80057aa:	1b40      	subs	r0, r0, r5
 80057ac:	fa03 f000 	lsl.w	r0, r3, r0
 80057b0:	9b04      	ldr	r3, [sp, #16]
 80057b2:	4303      	orrs	r3, r0
 80057b4:	9304      	str	r3, [sp, #16]
 80057b6:	f108 0801 	add.w	r8, r8, #1
 80057ba:	f898 1000 	ldrb.w	r1, [r8]
 80057be:	4829      	ldr	r0, [pc, #164]	; (8005864 <_vfiprintf_r+0x220>)
 80057c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057c4:	2206      	movs	r2, #6
 80057c6:	f108 0701 	add.w	r7, r8, #1
 80057ca:	f7fa fd01 	bl	80001d0 <memchr>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d034      	beq.n	800583c <_vfiprintf_r+0x1f8>
 80057d2:	4b25      	ldr	r3, [pc, #148]	; (8005868 <_vfiprintf_r+0x224>)
 80057d4:	bb03      	cbnz	r3, 8005818 <_vfiprintf_r+0x1d4>
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	3307      	adds	r3, #7
 80057da:	f023 0307 	bic.w	r3, r3, #7
 80057de:	3308      	adds	r3, #8
 80057e0:	9303      	str	r3, [sp, #12]
 80057e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e4:	444b      	add	r3, r9
 80057e6:	9309      	str	r3, [sp, #36]	; 0x24
 80057e8:	e74c      	b.n	8005684 <_vfiprintf_r+0x40>
 80057ea:	fb00 3202 	mla	r2, r0, r2, r3
 80057ee:	2101      	movs	r1, #1
 80057f0:	e786      	b.n	8005700 <_vfiprintf_r+0xbc>
 80057f2:	2300      	movs	r3, #0
 80057f4:	9305      	str	r3, [sp, #20]
 80057f6:	4618      	mov	r0, r3
 80057f8:	250a      	movs	r5, #10
 80057fa:	4688      	mov	r8, r1
 80057fc:	3101      	adds	r1, #1
 80057fe:	f898 2000 	ldrb.w	r2, [r8]
 8005802:	3a30      	subs	r2, #48	; 0x30
 8005804:	2a09      	cmp	r2, #9
 8005806:	d903      	bls.n	8005810 <_vfiprintf_r+0x1cc>
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0c5      	beq.n	8005798 <_vfiprintf_r+0x154>
 800580c:	9005      	str	r0, [sp, #20]
 800580e:	e7c3      	b.n	8005798 <_vfiprintf_r+0x154>
 8005810:	fb05 2000 	mla	r0, r5, r0, r2
 8005814:	2301      	movs	r3, #1
 8005816:	e7f0      	b.n	80057fa <_vfiprintf_r+0x1b6>
 8005818:	ab03      	add	r3, sp, #12
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	4622      	mov	r2, r4
 800581e:	4b13      	ldr	r3, [pc, #76]	; (800586c <_vfiprintf_r+0x228>)
 8005820:	a904      	add	r1, sp, #16
 8005822:	4630      	mov	r0, r6
 8005824:	f3af 8000 	nop.w
 8005828:	f1b0 3fff 	cmp.w	r0, #4294967295
 800582c:	4681      	mov	r9, r0
 800582e:	d1d8      	bne.n	80057e2 <_vfiprintf_r+0x19e>
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	065b      	lsls	r3, r3, #25
 8005834:	f53f af7d 	bmi.w	8005732 <_vfiprintf_r+0xee>
 8005838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800583a:	e77c      	b.n	8005736 <_vfiprintf_r+0xf2>
 800583c:	ab03      	add	r3, sp, #12
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	4622      	mov	r2, r4
 8005842:	4b0a      	ldr	r3, [pc, #40]	; (800586c <_vfiprintf_r+0x228>)
 8005844:	a904      	add	r1, sp, #16
 8005846:	4630      	mov	r0, r6
 8005848:	f000 f888 	bl	800595c <_printf_i>
 800584c:	e7ec      	b.n	8005828 <_vfiprintf_r+0x1e4>
 800584e:	bf00      	nop
 8005850:	080062c4 	.word	0x080062c4
 8005854:	08006304 	.word	0x08006304
 8005858:	080062e4 	.word	0x080062e4
 800585c:	080062a4 	.word	0x080062a4
 8005860:	0800630a 	.word	0x0800630a
 8005864:	0800630e 	.word	0x0800630e
 8005868:	00000000 	.word	0x00000000
 800586c:	08005621 	.word	0x08005621

08005870 <_printf_common>:
 8005870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005874:	4691      	mov	r9, r2
 8005876:	461f      	mov	r7, r3
 8005878:	688a      	ldr	r2, [r1, #8]
 800587a:	690b      	ldr	r3, [r1, #16]
 800587c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005880:	4293      	cmp	r3, r2
 8005882:	bfb8      	it	lt
 8005884:	4613      	movlt	r3, r2
 8005886:	f8c9 3000 	str.w	r3, [r9]
 800588a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800588e:	4606      	mov	r6, r0
 8005890:	460c      	mov	r4, r1
 8005892:	b112      	cbz	r2, 800589a <_printf_common+0x2a>
 8005894:	3301      	adds	r3, #1
 8005896:	f8c9 3000 	str.w	r3, [r9]
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	0699      	lsls	r1, r3, #26
 800589e:	bf42      	ittt	mi
 80058a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80058a4:	3302      	addmi	r3, #2
 80058a6:	f8c9 3000 	strmi.w	r3, [r9]
 80058aa:	6825      	ldr	r5, [r4, #0]
 80058ac:	f015 0506 	ands.w	r5, r5, #6
 80058b0:	d107      	bne.n	80058c2 <_printf_common+0x52>
 80058b2:	f104 0a19 	add.w	sl, r4, #25
 80058b6:	68e3      	ldr	r3, [r4, #12]
 80058b8:	f8d9 2000 	ldr.w	r2, [r9]
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	429d      	cmp	r5, r3
 80058c0:	db29      	blt.n	8005916 <_printf_common+0xa6>
 80058c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	3300      	adds	r3, #0
 80058ca:	bf18      	it	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	0692      	lsls	r2, r2, #26
 80058d0:	d42e      	bmi.n	8005930 <_printf_common+0xc0>
 80058d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d6:	4639      	mov	r1, r7
 80058d8:	4630      	mov	r0, r6
 80058da:	47c0      	blx	r8
 80058dc:	3001      	adds	r0, #1
 80058de:	d021      	beq.n	8005924 <_printf_common+0xb4>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	68e5      	ldr	r5, [r4, #12]
 80058e4:	f8d9 2000 	ldr.w	r2, [r9]
 80058e8:	f003 0306 	and.w	r3, r3, #6
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	bf08      	it	eq
 80058f0:	1aad      	subeq	r5, r5, r2
 80058f2:	68a3      	ldr	r3, [r4, #8]
 80058f4:	6922      	ldr	r2, [r4, #16]
 80058f6:	bf0c      	ite	eq
 80058f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058fc:	2500      	movne	r5, #0
 80058fe:	4293      	cmp	r3, r2
 8005900:	bfc4      	itt	gt
 8005902:	1a9b      	subgt	r3, r3, r2
 8005904:	18ed      	addgt	r5, r5, r3
 8005906:	f04f 0900 	mov.w	r9, #0
 800590a:	341a      	adds	r4, #26
 800590c:	454d      	cmp	r5, r9
 800590e:	d11b      	bne.n	8005948 <_printf_common+0xd8>
 8005910:	2000      	movs	r0, #0
 8005912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005916:	2301      	movs	r3, #1
 8005918:	4652      	mov	r2, sl
 800591a:	4639      	mov	r1, r7
 800591c:	4630      	mov	r0, r6
 800591e:	47c0      	blx	r8
 8005920:	3001      	adds	r0, #1
 8005922:	d103      	bne.n	800592c <_printf_common+0xbc>
 8005924:	f04f 30ff 	mov.w	r0, #4294967295
 8005928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592c:	3501      	adds	r5, #1
 800592e:	e7c2      	b.n	80058b6 <_printf_common+0x46>
 8005930:	18e1      	adds	r1, r4, r3
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	2030      	movs	r0, #48	; 0x30
 8005936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800593a:	4422      	add	r2, r4
 800593c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005944:	3302      	adds	r3, #2
 8005946:	e7c4      	b.n	80058d2 <_printf_common+0x62>
 8005948:	2301      	movs	r3, #1
 800594a:	4622      	mov	r2, r4
 800594c:	4639      	mov	r1, r7
 800594e:	4630      	mov	r0, r6
 8005950:	47c0      	blx	r8
 8005952:	3001      	adds	r0, #1
 8005954:	d0e6      	beq.n	8005924 <_printf_common+0xb4>
 8005956:	f109 0901 	add.w	r9, r9, #1
 800595a:	e7d7      	b.n	800590c <_printf_common+0x9c>

0800595c <_printf_i>:
 800595c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005960:	4617      	mov	r7, r2
 8005962:	7e0a      	ldrb	r2, [r1, #24]
 8005964:	b085      	sub	sp, #20
 8005966:	2a6e      	cmp	r2, #110	; 0x6e
 8005968:	4698      	mov	r8, r3
 800596a:	4606      	mov	r6, r0
 800596c:	460c      	mov	r4, r1
 800596e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005970:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005974:	f000 80bc 	beq.w	8005af0 <_printf_i+0x194>
 8005978:	d81a      	bhi.n	80059b0 <_printf_i+0x54>
 800597a:	2a63      	cmp	r2, #99	; 0x63
 800597c:	d02e      	beq.n	80059dc <_printf_i+0x80>
 800597e:	d80a      	bhi.n	8005996 <_printf_i+0x3a>
 8005980:	2a00      	cmp	r2, #0
 8005982:	f000 80c8 	beq.w	8005b16 <_printf_i+0x1ba>
 8005986:	2a58      	cmp	r2, #88	; 0x58
 8005988:	f000 808a 	beq.w	8005aa0 <_printf_i+0x144>
 800598c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005990:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005994:	e02a      	b.n	80059ec <_printf_i+0x90>
 8005996:	2a64      	cmp	r2, #100	; 0x64
 8005998:	d001      	beq.n	800599e <_printf_i+0x42>
 800599a:	2a69      	cmp	r2, #105	; 0x69
 800599c:	d1f6      	bne.n	800598c <_printf_i+0x30>
 800599e:	6821      	ldr	r1, [r4, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80059a6:	d023      	beq.n	80059f0 <_printf_i+0x94>
 80059a8:	1d11      	adds	r1, r2, #4
 80059aa:	6019      	str	r1, [r3, #0]
 80059ac:	6813      	ldr	r3, [r2, #0]
 80059ae:	e027      	b.n	8005a00 <_printf_i+0xa4>
 80059b0:	2a73      	cmp	r2, #115	; 0x73
 80059b2:	f000 80b4 	beq.w	8005b1e <_printf_i+0x1c2>
 80059b6:	d808      	bhi.n	80059ca <_printf_i+0x6e>
 80059b8:	2a6f      	cmp	r2, #111	; 0x6f
 80059ba:	d02a      	beq.n	8005a12 <_printf_i+0xb6>
 80059bc:	2a70      	cmp	r2, #112	; 0x70
 80059be:	d1e5      	bne.n	800598c <_printf_i+0x30>
 80059c0:	680a      	ldr	r2, [r1, #0]
 80059c2:	f042 0220 	orr.w	r2, r2, #32
 80059c6:	600a      	str	r2, [r1, #0]
 80059c8:	e003      	b.n	80059d2 <_printf_i+0x76>
 80059ca:	2a75      	cmp	r2, #117	; 0x75
 80059cc:	d021      	beq.n	8005a12 <_printf_i+0xb6>
 80059ce:	2a78      	cmp	r2, #120	; 0x78
 80059d0:	d1dc      	bne.n	800598c <_printf_i+0x30>
 80059d2:	2278      	movs	r2, #120	; 0x78
 80059d4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80059d8:	496e      	ldr	r1, [pc, #440]	; (8005b94 <_printf_i+0x238>)
 80059da:	e064      	b.n	8005aa6 <_printf_i+0x14a>
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80059e2:	1d11      	adds	r1, r2, #4
 80059e4:	6019      	str	r1, [r3, #0]
 80059e6:	6813      	ldr	r3, [r2, #0]
 80059e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0a3      	b.n	8005b38 <_printf_i+0x1dc>
 80059f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80059f4:	f102 0104 	add.w	r1, r2, #4
 80059f8:	6019      	str	r1, [r3, #0]
 80059fa:	d0d7      	beq.n	80059ac <_printf_i+0x50>
 80059fc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da03      	bge.n	8005a0c <_printf_i+0xb0>
 8005a04:	222d      	movs	r2, #45	; 0x2d
 8005a06:	425b      	negs	r3, r3
 8005a08:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a0c:	4962      	ldr	r1, [pc, #392]	; (8005b98 <_printf_i+0x23c>)
 8005a0e:	220a      	movs	r2, #10
 8005a10:	e017      	b.n	8005a42 <_printf_i+0xe6>
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	6819      	ldr	r1, [r3, #0]
 8005a16:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005a1a:	d003      	beq.n	8005a24 <_printf_i+0xc8>
 8005a1c:	1d08      	adds	r0, r1, #4
 8005a1e:	6018      	str	r0, [r3, #0]
 8005a20:	680b      	ldr	r3, [r1, #0]
 8005a22:	e006      	b.n	8005a32 <_printf_i+0xd6>
 8005a24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a28:	f101 0004 	add.w	r0, r1, #4
 8005a2c:	6018      	str	r0, [r3, #0]
 8005a2e:	d0f7      	beq.n	8005a20 <_printf_i+0xc4>
 8005a30:	880b      	ldrh	r3, [r1, #0]
 8005a32:	4959      	ldr	r1, [pc, #356]	; (8005b98 <_printf_i+0x23c>)
 8005a34:	2a6f      	cmp	r2, #111	; 0x6f
 8005a36:	bf14      	ite	ne
 8005a38:	220a      	movne	r2, #10
 8005a3a:	2208      	moveq	r2, #8
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005a42:	6865      	ldr	r5, [r4, #4]
 8005a44:	60a5      	str	r5, [r4, #8]
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	f2c0 809c 	blt.w	8005b84 <_printf_i+0x228>
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	f020 0004 	bic.w	r0, r0, #4
 8005a52:	6020      	str	r0, [r4, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d13f      	bne.n	8005ad8 <_printf_i+0x17c>
 8005a58:	2d00      	cmp	r5, #0
 8005a5a:	f040 8095 	bne.w	8005b88 <_printf_i+0x22c>
 8005a5e:	4675      	mov	r5, lr
 8005a60:	2a08      	cmp	r2, #8
 8005a62:	d10b      	bne.n	8005a7c <_printf_i+0x120>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	07da      	lsls	r2, r3, #31
 8005a68:	d508      	bpl.n	8005a7c <_printf_i+0x120>
 8005a6a:	6923      	ldr	r3, [r4, #16]
 8005a6c:	6862      	ldr	r2, [r4, #4]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	bfde      	ittt	le
 8005a72:	2330      	movle	r3, #48	; 0x30
 8005a74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a7c:	ebae 0305 	sub.w	r3, lr, r5
 8005a80:	6123      	str	r3, [r4, #16]
 8005a82:	f8cd 8000 	str.w	r8, [sp]
 8005a86:	463b      	mov	r3, r7
 8005a88:	aa03      	add	r2, sp, #12
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f7ff feef 	bl	8005870 <_printf_common>
 8005a92:	3001      	adds	r0, #1
 8005a94:	d155      	bne.n	8005b42 <_printf_i+0x1e6>
 8005a96:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9a:	b005      	add	sp, #20
 8005a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005aa0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005aa4:	493c      	ldr	r1, [pc, #240]	; (8005b98 <_printf_i+0x23c>)
 8005aa6:	6822      	ldr	r2, [r4, #0]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005aae:	f100 0504 	add.w	r5, r0, #4
 8005ab2:	601d      	str	r5, [r3, #0]
 8005ab4:	d001      	beq.n	8005aba <_printf_i+0x15e>
 8005ab6:	6803      	ldr	r3, [r0, #0]
 8005ab8:	e002      	b.n	8005ac0 <_printf_i+0x164>
 8005aba:	0655      	lsls	r5, r2, #25
 8005abc:	d5fb      	bpl.n	8005ab6 <_printf_i+0x15a>
 8005abe:	8803      	ldrh	r3, [r0, #0]
 8005ac0:	07d0      	lsls	r0, r2, #31
 8005ac2:	bf44      	itt	mi
 8005ac4:	f042 0220 	orrmi.w	r2, r2, #32
 8005ac8:	6022      	strmi	r2, [r4, #0]
 8005aca:	b91b      	cbnz	r3, 8005ad4 <_printf_i+0x178>
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	f022 0220 	bic.w	r2, r2, #32
 8005ad2:	6022      	str	r2, [r4, #0]
 8005ad4:	2210      	movs	r2, #16
 8005ad6:	e7b1      	b.n	8005a3c <_printf_i+0xe0>
 8005ad8:	4675      	mov	r5, lr
 8005ada:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ade:	fb02 3310 	mls	r3, r2, r0, r3
 8005ae2:	5ccb      	ldrb	r3, [r1, r3]
 8005ae4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d1f5      	bne.n	8005ada <_printf_i+0x17e>
 8005aee:	e7b7      	b.n	8005a60 <_printf_i+0x104>
 8005af0:	6808      	ldr	r0, [r1, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	6949      	ldr	r1, [r1, #20]
 8005af6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005afa:	d004      	beq.n	8005b06 <_printf_i+0x1aa>
 8005afc:	1d10      	adds	r0, r2, #4
 8005afe:	6018      	str	r0, [r3, #0]
 8005b00:	6813      	ldr	r3, [r2, #0]
 8005b02:	6019      	str	r1, [r3, #0]
 8005b04:	e007      	b.n	8005b16 <_printf_i+0x1ba>
 8005b06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b0a:	f102 0004 	add.w	r0, r2, #4
 8005b0e:	6018      	str	r0, [r3, #0]
 8005b10:	6813      	ldr	r3, [r2, #0]
 8005b12:	d0f6      	beq.n	8005b02 <_printf_i+0x1a6>
 8005b14:	8019      	strh	r1, [r3, #0]
 8005b16:	2300      	movs	r3, #0
 8005b18:	6123      	str	r3, [r4, #16]
 8005b1a:	4675      	mov	r5, lr
 8005b1c:	e7b1      	b.n	8005a82 <_printf_i+0x126>
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	1d11      	adds	r1, r2, #4
 8005b22:	6019      	str	r1, [r3, #0]
 8005b24:	6815      	ldr	r5, [r2, #0]
 8005b26:	6862      	ldr	r2, [r4, #4]
 8005b28:	2100      	movs	r1, #0
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f7fa fb50 	bl	80001d0 <memchr>
 8005b30:	b108      	cbz	r0, 8005b36 <_printf_i+0x1da>
 8005b32:	1b40      	subs	r0, r0, r5
 8005b34:	6060      	str	r0, [r4, #4]
 8005b36:	6863      	ldr	r3, [r4, #4]
 8005b38:	6123      	str	r3, [r4, #16]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b40:	e79f      	b.n	8005a82 <_printf_i+0x126>
 8005b42:	6923      	ldr	r3, [r4, #16]
 8005b44:	462a      	mov	r2, r5
 8005b46:	4639      	mov	r1, r7
 8005b48:	4630      	mov	r0, r6
 8005b4a:	47c0      	blx	r8
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d0a2      	beq.n	8005a96 <_printf_i+0x13a>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	079b      	lsls	r3, r3, #30
 8005b54:	d507      	bpl.n	8005b66 <_printf_i+0x20a>
 8005b56:	2500      	movs	r5, #0
 8005b58:	f104 0919 	add.w	r9, r4, #25
 8005b5c:	68e3      	ldr	r3, [r4, #12]
 8005b5e:	9a03      	ldr	r2, [sp, #12]
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	429d      	cmp	r5, r3
 8005b64:	db05      	blt.n	8005b72 <_printf_i+0x216>
 8005b66:	68e0      	ldr	r0, [r4, #12]
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	4298      	cmp	r0, r3
 8005b6c:	bfb8      	it	lt
 8005b6e:	4618      	movlt	r0, r3
 8005b70:	e793      	b.n	8005a9a <_printf_i+0x13e>
 8005b72:	2301      	movs	r3, #1
 8005b74:	464a      	mov	r2, r9
 8005b76:	4639      	mov	r1, r7
 8005b78:	4630      	mov	r0, r6
 8005b7a:	47c0      	blx	r8
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d08a      	beq.n	8005a96 <_printf_i+0x13a>
 8005b80:	3501      	adds	r5, #1
 8005b82:	e7eb      	b.n	8005b5c <_printf_i+0x200>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1a7      	bne.n	8005ad8 <_printf_i+0x17c>
 8005b88:	780b      	ldrb	r3, [r1, #0]
 8005b8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b92:	e765      	b.n	8005a60 <_printf_i+0x104>
 8005b94:	08006326 	.word	0x08006326
 8005b98:	08006315 	.word	0x08006315

08005b9c <_sbrk_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4c06      	ldr	r4, [pc, #24]	; (8005bb8 <_sbrk_r+0x1c>)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4605      	mov	r5, r0
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	f7fb fde6 	bl	8001778 <_sbrk>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_sbrk_r+0x1a>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_sbrk_r+0x1a>
 8005bb4:	602b      	str	r3, [r5, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	2000099c 	.word	0x2000099c

08005bbc <__sread>:
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc4:	f000 faa4 	bl	8006110 <_read_r>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	bfab      	itete	ge
 8005bcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bce:	89a3      	ldrhlt	r3, [r4, #12]
 8005bd0:	181b      	addge	r3, r3, r0
 8005bd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bd6:	bfac      	ite	ge
 8005bd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bda:	81a3      	strhlt	r3, [r4, #12]
 8005bdc:	bd10      	pop	{r4, pc}

08005bde <__swrite>:
 8005bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be2:	461f      	mov	r7, r3
 8005be4:	898b      	ldrh	r3, [r1, #12]
 8005be6:	05db      	lsls	r3, r3, #23
 8005be8:	4605      	mov	r5, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	4616      	mov	r6, r2
 8005bee:	d505      	bpl.n	8005bfc <__swrite+0x1e>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf8:	f000 f9b8 	bl	8005f6c <_lseek_r>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	4632      	mov	r2, r6
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c12:	f000 b869 	b.w	8005ce8 <_write_r>

08005c16 <__sseek>:
 8005c16:	b510      	push	{r4, lr}
 8005c18:	460c      	mov	r4, r1
 8005c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c1e:	f000 f9a5 	bl	8005f6c <_lseek_r>
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	bf15      	itete	ne
 8005c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c32:	81a3      	strheq	r3, [r4, #12]
 8005c34:	bf18      	it	ne
 8005c36:	81a3      	strhne	r3, [r4, #12]
 8005c38:	bd10      	pop	{r4, pc}

08005c3a <__sclose>:
 8005c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3e:	f000 b8d3 	b.w	8005de8 <_close_r>
	...

08005c44 <__swbuf_r>:
 8005c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c46:	460e      	mov	r6, r1
 8005c48:	4614      	mov	r4, r2
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	b118      	cbz	r0, 8005c56 <__swbuf_r+0x12>
 8005c4e:	6983      	ldr	r3, [r0, #24]
 8005c50:	b90b      	cbnz	r3, 8005c56 <__swbuf_r+0x12>
 8005c52:	f7ff fbe5 	bl	8005420 <__sinit>
 8005c56:	4b21      	ldr	r3, [pc, #132]	; (8005cdc <__swbuf_r+0x98>)
 8005c58:	429c      	cmp	r4, r3
 8005c5a:	d12a      	bne.n	8005cb2 <__swbuf_r+0x6e>
 8005c5c:	686c      	ldr	r4, [r5, #4]
 8005c5e:	69a3      	ldr	r3, [r4, #24]
 8005c60:	60a3      	str	r3, [r4, #8]
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	071a      	lsls	r2, r3, #28
 8005c66:	d52e      	bpl.n	8005cc6 <__swbuf_r+0x82>
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	b363      	cbz	r3, 8005cc6 <__swbuf_r+0x82>
 8005c6c:	6923      	ldr	r3, [r4, #16]
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	1ac0      	subs	r0, r0, r3
 8005c72:	6963      	ldr	r3, [r4, #20]
 8005c74:	b2f6      	uxtb	r6, r6
 8005c76:	4298      	cmp	r0, r3
 8005c78:	4637      	mov	r7, r6
 8005c7a:	db04      	blt.n	8005c86 <__swbuf_r+0x42>
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f000 f94a 	bl	8005f18 <_fflush_r>
 8005c84:	bb28      	cbnz	r0, 8005cd2 <__swbuf_r+0x8e>
 8005c86:	68a3      	ldr	r3, [r4, #8]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	60a3      	str	r3, [r4, #8]
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	6022      	str	r2, [r4, #0]
 8005c92:	701e      	strb	r6, [r3, #0]
 8005c94:	6963      	ldr	r3, [r4, #20]
 8005c96:	3001      	adds	r0, #1
 8005c98:	4298      	cmp	r0, r3
 8005c9a:	d004      	beq.n	8005ca6 <__swbuf_r+0x62>
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	07db      	lsls	r3, r3, #31
 8005ca0:	d519      	bpl.n	8005cd6 <__swbuf_r+0x92>
 8005ca2:	2e0a      	cmp	r6, #10
 8005ca4:	d117      	bne.n	8005cd6 <__swbuf_r+0x92>
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f000 f935 	bl	8005f18 <_fflush_r>
 8005cae:	b190      	cbz	r0, 8005cd6 <__swbuf_r+0x92>
 8005cb0:	e00f      	b.n	8005cd2 <__swbuf_r+0x8e>
 8005cb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <__swbuf_r+0x9c>)
 8005cb4:	429c      	cmp	r4, r3
 8005cb6:	d101      	bne.n	8005cbc <__swbuf_r+0x78>
 8005cb8:	68ac      	ldr	r4, [r5, #8]
 8005cba:	e7d0      	b.n	8005c5e <__swbuf_r+0x1a>
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <__swbuf_r+0xa0>)
 8005cbe:	429c      	cmp	r4, r3
 8005cc0:	bf08      	it	eq
 8005cc2:	68ec      	ldreq	r4, [r5, #12]
 8005cc4:	e7cb      	b.n	8005c5e <__swbuf_r+0x1a>
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f000 f81f 	bl	8005d0c <__swsetup_r>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d0cc      	beq.n	8005c6c <__swbuf_r+0x28>
 8005cd2:	f04f 37ff 	mov.w	r7, #4294967295
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	080062c4 	.word	0x080062c4
 8005ce0:	080062e4 	.word	0x080062e4
 8005ce4:	080062a4 	.word	0x080062a4

08005ce8 <_write_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4c07      	ldr	r4, [pc, #28]	; (8005d08 <_write_r+0x20>)
 8005cec:	4605      	mov	r5, r0
 8005cee:	4608      	mov	r0, r1
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	6022      	str	r2, [r4, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f7fb fd96 	bl	8001828 <_write>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_write_r+0x1e>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_write_r+0x1e>
 8005d04:	602b      	str	r3, [r5, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	2000099c 	.word	0x2000099c

08005d0c <__swsetup_r>:
 8005d0c:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <__swsetup_r+0xcc>)
 8005d0e:	b570      	push	{r4, r5, r6, lr}
 8005d10:	681d      	ldr	r5, [r3, #0]
 8005d12:	4606      	mov	r6, r0
 8005d14:	460c      	mov	r4, r1
 8005d16:	b125      	cbz	r5, 8005d22 <__swsetup_r+0x16>
 8005d18:	69ab      	ldr	r3, [r5, #24]
 8005d1a:	b913      	cbnz	r3, 8005d22 <__swsetup_r+0x16>
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f7ff fb7f 	bl	8005420 <__sinit>
 8005d22:	4b2e      	ldr	r3, [pc, #184]	; (8005ddc <__swsetup_r+0xd0>)
 8005d24:	429c      	cmp	r4, r3
 8005d26:	d10f      	bne.n	8005d48 <__swsetup_r+0x3c>
 8005d28:	686c      	ldr	r4, [r5, #4]
 8005d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	0715      	lsls	r5, r2, #28
 8005d32:	d42c      	bmi.n	8005d8e <__swsetup_r+0x82>
 8005d34:	06d0      	lsls	r0, r2, #27
 8005d36:	d411      	bmi.n	8005d5c <__swsetup_r+0x50>
 8005d38:	2209      	movs	r2, #9
 8005d3a:	6032      	str	r2, [r6, #0]
 8005d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	f04f 30ff 	mov.w	r0, #4294967295
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	4b25      	ldr	r3, [pc, #148]	; (8005de0 <__swsetup_r+0xd4>)
 8005d4a:	429c      	cmp	r4, r3
 8005d4c:	d101      	bne.n	8005d52 <__swsetup_r+0x46>
 8005d4e:	68ac      	ldr	r4, [r5, #8]
 8005d50:	e7eb      	b.n	8005d2a <__swsetup_r+0x1e>
 8005d52:	4b24      	ldr	r3, [pc, #144]	; (8005de4 <__swsetup_r+0xd8>)
 8005d54:	429c      	cmp	r4, r3
 8005d56:	bf08      	it	eq
 8005d58:	68ec      	ldreq	r4, [r5, #12]
 8005d5a:	e7e6      	b.n	8005d2a <__swsetup_r+0x1e>
 8005d5c:	0751      	lsls	r1, r2, #29
 8005d5e:	d512      	bpl.n	8005d86 <__swsetup_r+0x7a>
 8005d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d62:	b141      	cbz	r1, 8005d76 <__swsetup_r+0x6a>
 8005d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d68:	4299      	cmp	r1, r3
 8005d6a:	d002      	beq.n	8005d72 <__swsetup_r+0x66>
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f000 f981 	bl	8006074 <_free_r>
 8005d72:	2300      	movs	r3, #0
 8005d74:	6363      	str	r3, [r4, #52]	; 0x34
 8005d76:	89a3      	ldrh	r3, [r4, #12]
 8005d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6063      	str	r3, [r4, #4]
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	f043 0308 	orr.w	r3, r3, #8
 8005d8c:	81a3      	strh	r3, [r4, #12]
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	b94b      	cbnz	r3, 8005da6 <__swsetup_r+0x9a>
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d9c:	d003      	beq.n	8005da6 <__swsetup_r+0x9a>
 8005d9e:	4621      	mov	r1, r4
 8005da0:	4630      	mov	r0, r6
 8005da2:	f000 f919 	bl	8005fd8 <__smakebuf_r>
 8005da6:	89a2      	ldrh	r2, [r4, #12]
 8005da8:	f012 0301 	ands.w	r3, r2, #1
 8005dac:	d00c      	beq.n	8005dc8 <__swsetup_r+0xbc>
 8005dae:	2300      	movs	r3, #0
 8005db0:	60a3      	str	r3, [r4, #8]
 8005db2:	6963      	ldr	r3, [r4, #20]
 8005db4:	425b      	negs	r3, r3
 8005db6:	61a3      	str	r3, [r4, #24]
 8005db8:	6923      	ldr	r3, [r4, #16]
 8005dba:	b953      	cbnz	r3, 8005dd2 <__swsetup_r+0xc6>
 8005dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dc0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005dc4:	d1ba      	bne.n	8005d3c <__swsetup_r+0x30>
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
 8005dc8:	0792      	lsls	r2, r2, #30
 8005dca:	bf58      	it	pl
 8005dcc:	6963      	ldrpl	r3, [r4, #20]
 8005dce:	60a3      	str	r3, [r4, #8]
 8005dd0:	e7f2      	b.n	8005db8 <__swsetup_r+0xac>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	e7f7      	b.n	8005dc6 <__swsetup_r+0xba>
 8005dd6:	bf00      	nop
 8005dd8:	2000000c 	.word	0x2000000c
 8005ddc:	080062c4 	.word	0x080062c4
 8005de0:	080062e4 	.word	0x080062e4
 8005de4:	080062a4 	.word	0x080062a4

08005de8 <_close_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4c06      	ldr	r4, [pc, #24]	; (8005e04 <_close_r+0x1c>)
 8005dec:	2300      	movs	r3, #0
 8005dee:	4605      	mov	r5, r0
 8005df0:	4608      	mov	r0, r1
 8005df2:	6023      	str	r3, [r4, #0]
 8005df4:	f7fb fd34 	bl	8001860 <_close>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_close_r+0x1a>
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_close_r+0x1a>
 8005e00:	602b      	str	r3, [r5, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	2000099c 	.word	0x2000099c

08005e08 <__sflush_r>:
 8005e08:	898a      	ldrh	r2, [r1, #12]
 8005e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0e:	4605      	mov	r5, r0
 8005e10:	0710      	lsls	r0, r2, #28
 8005e12:	460c      	mov	r4, r1
 8005e14:	d45a      	bmi.n	8005ecc <__sflush_r+0xc4>
 8005e16:	684b      	ldr	r3, [r1, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	dc05      	bgt.n	8005e28 <__sflush_r+0x20>
 8005e1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	dc02      	bgt.n	8005e28 <__sflush_r+0x20>
 8005e22:	2000      	movs	r0, #0
 8005e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e2a:	2e00      	cmp	r6, #0
 8005e2c:	d0f9      	beq.n	8005e22 <__sflush_r+0x1a>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e34:	682f      	ldr	r7, [r5, #0]
 8005e36:	602b      	str	r3, [r5, #0]
 8005e38:	d033      	beq.n	8005ea2 <__sflush_r+0x9a>
 8005e3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	075a      	lsls	r2, r3, #29
 8005e40:	d505      	bpl.n	8005e4e <__sflush_r+0x46>
 8005e42:	6863      	ldr	r3, [r4, #4]
 8005e44:	1ac0      	subs	r0, r0, r3
 8005e46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e48:	b10b      	cbz	r3, 8005e4e <__sflush_r+0x46>
 8005e4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e4c:	1ac0      	subs	r0, r0, r3
 8005e4e:	2300      	movs	r3, #0
 8005e50:	4602      	mov	r2, r0
 8005e52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e54:	6a21      	ldr	r1, [r4, #32]
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b0      	blx	r6
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	d106      	bne.n	8005e6e <__sflush_r+0x66>
 8005e60:	6829      	ldr	r1, [r5, #0]
 8005e62:	291d      	cmp	r1, #29
 8005e64:	d84b      	bhi.n	8005efe <__sflush_r+0xf6>
 8005e66:	4a2b      	ldr	r2, [pc, #172]	; (8005f14 <__sflush_r+0x10c>)
 8005e68:	40ca      	lsrs	r2, r1
 8005e6a:	07d6      	lsls	r6, r2, #31
 8005e6c:	d547      	bpl.n	8005efe <__sflush_r+0xf6>
 8005e6e:	2200      	movs	r2, #0
 8005e70:	6062      	str	r2, [r4, #4]
 8005e72:	04d9      	lsls	r1, r3, #19
 8005e74:	6922      	ldr	r2, [r4, #16]
 8005e76:	6022      	str	r2, [r4, #0]
 8005e78:	d504      	bpl.n	8005e84 <__sflush_r+0x7c>
 8005e7a:	1c42      	adds	r2, r0, #1
 8005e7c:	d101      	bne.n	8005e82 <__sflush_r+0x7a>
 8005e7e:	682b      	ldr	r3, [r5, #0]
 8005e80:	b903      	cbnz	r3, 8005e84 <__sflush_r+0x7c>
 8005e82:	6560      	str	r0, [r4, #84]	; 0x54
 8005e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e86:	602f      	str	r7, [r5, #0]
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	d0ca      	beq.n	8005e22 <__sflush_r+0x1a>
 8005e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e90:	4299      	cmp	r1, r3
 8005e92:	d002      	beq.n	8005e9a <__sflush_r+0x92>
 8005e94:	4628      	mov	r0, r5
 8005e96:	f000 f8ed 	bl	8006074 <_free_r>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	6360      	str	r0, [r4, #52]	; 0x34
 8005e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ea2:	6a21      	ldr	r1, [r4, #32]
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b0      	blx	r6
 8005eaa:	1c41      	adds	r1, r0, #1
 8005eac:	d1c6      	bne.n	8005e3c <__sflush_r+0x34>
 8005eae:	682b      	ldr	r3, [r5, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0c3      	beq.n	8005e3c <__sflush_r+0x34>
 8005eb4:	2b1d      	cmp	r3, #29
 8005eb6:	d001      	beq.n	8005ebc <__sflush_r+0xb4>
 8005eb8:	2b16      	cmp	r3, #22
 8005eba:	d101      	bne.n	8005ec0 <__sflush_r+0xb8>
 8005ebc:	602f      	str	r7, [r5, #0]
 8005ebe:	e7b0      	b.n	8005e22 <__sflush_r+0x1a>
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ecc:	690f      	ldr	r7, [r1, #16]
 8005ece:	2f00      	cmp	r7, #0
 8005ed0:	d0a7      	beq.n	8005e22 <__sflush_r+0x1a>
 8005ed2:	0793      	lsls	r3, r2, #30
 8005ed4:	680e      	ldr	r6, [r1, #0]
 8005ed6:	bf08      	it	eq
 8005ed8:	694b      	ldreq	r3, [r1, #20]
 8005eda:	600f      	str	r7, [r1, #0]
 8005edc:	bf18      	it	ne
 8005ede:	2300      	movne	r3, #0
 8005ee0:	eba6 0807 	sub.w	r8, r6, r7
 8005ee4:	608b      	str	r3, [r1, #8]
 8005ee6:	f1b8 0f00 	cmp.w	r8, #0
 8005eea:	dd9a      	ble.n	8005e22 <__sflush_r+0x1a>
 8005eec:	4643      	mov	r3, r8
 8005eee:	463a      	mov	r2, r7
 8005ef0:	6a21      	ldr	r1, [r4, #32]
 8005ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b0      	blx	r6
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	dc07      	bgt.n	8005f0c <__sflush_r+0x104>
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f0c:	4407      	add	r7, r0
 8005f0e:	eba8 0800 	sub.w	r8, r8, r0
 8005f12:	e7e8      	b.n	8005ee6 <__sflush_r+0xde>
 8005f14:	20400001 	.word	0x20400001

08005f18 <_fflush_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	690b      	ldr	r3, [r1, #16]
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	b1db      	cbz	r3, 8005f5a <_fflush_r+0x42>
 8005f22:	b118      	cbz	r0, 8005f2c <_fflush_r+0x14>
 8005f24:	6983      	ldr	r3, [r0, #24]
 8005f26:	b90b      	cbnz	r3, 8005f2c <_fflush_r+0x14>
 8005f28:	f7ff fa7a 	bl	8005420 <__sinit>
 8005f2c:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <_fflush_r+0x48>)
 8005f2e:	429c      	cmp	r4, r3
 8005f30:	d109      	bne.n	8005f46 <_fflush_r+0x2e>
 8005f32:	686c      	ldr	r4, [r5, #4]
 8005f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f38:	b17b      	cbz	r3, 8005f5a <_fflush_r+0x42>
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f42:	f7ff bf61 	b.w	8005e08 <__sflush_r>
 8005f46:	4b07      	ldr	r3, [pc, #28]	; (8005f64 <_fflush_r+0x4c>)
 8005f48:	429c      	cmp	r4, r3
 8005f4a:	d101      	bne.n	8005f50 <_fflush_r+0x38>
 8005f4c:	68ac      	ldr	r4, [r5, #8]
 8005f4e:	e7f1      	b.n	8005f34 <_fflush_r+0x1c>
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <_fflush_r+0x50>)
 8005f52:	429c      	cmp	r4, r3
 8005f54:	bf08      	it	eq
 8005f56:	68ec      	ldreq	r4, [r5, #12]
 8005f58:	e7ec      	b.n	8005f34 <_fflush_r+0x1c>
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	bd38      	pop	{r3, r4, r5, pc}
 8005f5e:	bf00      	nop
 8005f60:	080062c4 	.word	0x080062c4
 8005f64:	080062e4 	.word	0x080062e4
 8005f68:	080062a4 	.word	0x080062a4

08005f6c <_lseek_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4c07      	ldr	r4, [pc, #28]	; (8005f8c <_lseek_r+0x20>)
 8005f70:	4605      	mov	r5, r0
 8005f72:	4608      	mov	r0, r1
 8005f74:	4611      	mov	r1, r2
 8005f76:	2200      	movs	r2, #0
 8005f78:	6022      	str	r2, [r4, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f7fb fc9b 	bl	80018b6 <_lseek>
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	d102      	bne.n	8005f8a <_lseek_r+0x1e>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	b103      	cbz	r3, 8005f8a <_lseek_r+0x1e>
 8005f88:	602b      	str	r3, [r5, #0]
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
 8005f8c:	2000099c 	.word	0x2000099c

08005f90 <__swhatbuf_r>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	460e      	mov	r6, r1
 8005f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	b090      	sub	sp, #64	; 0x40
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	da07      	bge.n	8005fb2 <__swhatbuf_r+0x22>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	602b      	str	r3, [r5, #0]
 8005fa6:	89b3      	ldrh	r3, [r6, #12]
 8005fa8:	061a      	lsls	r2, r3, #24
 8005faa:	d410      	bmi.n	8005fce <__swhatbuf_r+0x3e>
 8005fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fb0:	e00e      	b.n	8005fd0 <__swhatbuf_r+0x40>
 8005fb2:	aa01      	add	r2, sp, #4
 8005fb4:	f000 f8be 	bl	8006134 <_fstat_r>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	dbf2      	blt.n	8005fa2 <__swhatbuf_r+0x12>
 8005fbc:	9a02      	ldr	r2, [sp, #8]
 8005fbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005fc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005fc6:	425a      	negs	r2, r3
 8005fc8:	415a      	adcs	r2, r3
 8005fca:	602a      	str	r2, [r5, #0]
 8005fcc:	e7ee      	b.n	8005fac <__swhatbuf_r+0x1c>
 8005fce:	2340      	movs	r3, #64	; 0x40
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	6023      	str	r3, [r4, #0]
 8005fd4:	b010      	add	sp, #64	; 0x40
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}

08005fd8 <__smakebuf_r>:
 8005fd8:	898b      	ldrh	r3, [r1, #12]
 8005fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fdc:	079d      	lsls	r5, r3, #30
 8005fde:	4606      	mov	r6, r0
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	d507      	bpl.n	8005ff4 <__smakebuf_r+0x1c>
 8005fe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	6123      	str	r3, [r4, #16]
 8005fec:	2301      	movs	r3, #1
 8005fee:	6163      	str	r3, [r4, #20]
 8005ff0:	b002      	add	sp, #8
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
 8005ff4:	ab01      	add	r3, sp, #4
 8005ff6:	466a      	mov	r2, sp
 8005ff8:	f7ff ffca 	bl	8005f90 <__swhatbuf_r>
 8005ffc:	9900      	ldr	r1, [sp, #0]
 8005ffe:	4605      	mov	r5, r0
 8006000:	4630      	mov	r0, r6
 8006002:	f7ff fa97 	bl	8005534 <_malloc_r>
 8006006:	b948      	cbnz	r0, 800601c <__smakebuf_r+0x44>
 8006008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800600c:	059a      	lsls	r2, r3, #22
 800600e:	d4ef      	bmi.n	8005ff0 <__smakebuf_r+0x18>
 8006010:	f023 0303 	bic.w	r3, r3, #3
 8006014:	f043 0302 	orr.w	r3, r3, #2
 8006018:	81a3      	strh	r3, [r4, #12]
 800601a:	e7e3      	b.n	8005fe4 <__smakebuf_r+0xc>
 800601c:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <__smakebuf_r+0x7c>)
 800601e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	6020      	str	r0, [r4, #0]
 8006024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006028:	81a3      	strh	r3, [r4, #12]
 800602a:	9b00      	ldr	r3, [sp, #0]
 800602c:	6163      	str	r3, [r4, #20]
 800602e:	9b01      	ldr	r3, [sp, #4]
 8006030:	6120      	str	r0, [r4, #16]
 8006032:	b15b      	cbz	r3, 800604c <__smakebuf_r+0x74>
 8006034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006038:	4630      	mov	r0, r6
 800603a:	f000 f88d 	bl	8006158 <_isatty_r>
 800603e:	b128      	cbz	r0, 800604c <__smakebuf_r+0x74>
 8006040:	89a3      	ldrh	r3, [r4, #12]
 8006042:	f023 0303 	bic.w	r3, r3, #3
 8006046:	f043 0301 	orr.w	r3, r3, #1
 800604a:	81a3      	strh	r3, [r4, #12]
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	431d      	orrs	r5, r3
 8006050:	81a5      	strh	r5, [r4, #12]
 8006052:	e7cd      	b.n	8005ff0 <__smakebuf_r+0x18>
 8006054:	080053a1 	.word	0x080053a1

08006058 <memcpy>:
 8006058:	b510      	push	{r4, lr}
 800605a:	1e43      	subs	r3, r0, #1
 800605c:	440a      	add	r2, r1
 800605e:	4291      	cmp	r1, r2
 8006060:	d100      	bne.n	8006064 <memcpy+0xc>
 8006062:	bd10      	pop	{r4, pc}
 8006064:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800606c:	e7f7      	b.n	800605e <memcpy+0x6>

0800606e <__malloc_lock>:
 800606e:	4770      	bx	lr

08006070 <__malloc_unlock>:
 8006070:	4770      	bx	lr
	...

08006074 <_free_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4605      	mov	r5, r0
 8006078:	2900      	cmp	r1, #0
 800607a:	d045      	beq.n	8006108 <_free_r+0x94>
 800607c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006080:	1f0c      	subs	r4, r1, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfb8      	it	lt
 8006086:	18e4      	addlt	r4, r4, r3
 8006088:	f7ff fff1 	bl	800606e <__malloc_lock>
 800608c:	4a1f      	ldr	r2, [pc, #124]	; (800610c <_free_r+0x98>)
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	4610      	mov	r0, r2
 8006092:	b933      	cbnz	r3, 80060a2 <_free_r+0x2e>
 8006094:	6063      	str	r3, [r4, #4]
 8006096:	6014      	str	r4, [r2, #0]
 8006098:	4628      	mov	r0, r5
 800609a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800609e:	f7ff bfe7 	b.w	8006070 <__malloc_unlock>
 80060a2:	42a3      	cmp	r3, r4
 80060a4:	d90c      	bls.n	80060c0 <_free_r+0x4c>
 80060a6:	6821      	ldr	r1, [r4, #0]
 80060a8:	1862      	adds	r2, r4, r1
 80060aa:	4293      	cmp	r3, r2
 80060ac:	bf04      	itt	eq
 80060ae:	681a      	ldreq	r2, [r3, #0]
 80060b0:	685b      	ldreq	r3, [r3, #4]
 80060b2:	6063      	str	r3, [r4, #4]
 80060b4:	bf04      	itt	eq
 80060b6:	1852      	addeq	r2, r2, r1
 80060b8:	6022      	streq	r2, [r4, #0]
 80060ba:	6004      	str	r4, [r0, #0]
 80060bc:	e7ec      	b.n	8006098 <_free_r+0x24>
 80060be:	4613      	mov	r3, r2
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	b10a      	cbz	r2, 80060c8 <_free_r+0x54>
 80060c4:	42a2      	cmp	r2, r4
 80060c6:	d9fa      	bls.n	80060be <_free_r+0x4a>
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	1858      	adds	r0, r3, r1
 80060cc:	42a0      	cmp	r0, r4
 80060ce:	d10b      	bne.n	80060e8 <_free_r+0x74>
 80060d0:	6820      	ldr	r0, [r4, #0]
 80060d2:	4401      	add	r1, r0
 80060d4:	1858      	adds	r0, r3, r1
 80060d6:	4282      	cmp	r2, r0
 80060d8:	6019      	str	r1, [r3, #0]
 80060da:	d1dd      	bne.n	8006098 <_free_r+0x24>
 80060dc:	6810      	ldr	r0, [r2, #0]
 80060de:	6852      	ldr	r2, [r2, #4]
 80060e0:	605a      	str	r2, [r3, #4]
 80060e2:	4401      	add	r1, r0
 80060e4:	6019      	str	r1, [r3, #0]
 80060e6:	e7d7      	b.n	8006098 <_free_r+0x24>
 80060e8:	d902      	bls.n	80060f0 <_free_r+0x7c>
 80060ea:	230c      	movs	r3, #12
 80060ec:	602b      	str	r3, [r5, #0]
 80060ee:	e7d3      	b.n	8006098 <_free_r+0x24>
 80060f0:	6820      	ldr	r0, [r4, #0]
 80060f2:	1821      	adds	r1, r4, r0
 80060f4:	428a      	cmp	r2, r1
 80060f6:	bf04      	itt	eq
 80060f8:	6811      	ldreq	r1, [r2, #0]
 80060fa:	6852      	ldreq	r2, [r2, #4]
 80060fc:	6062      	str	r2, [r4, #4]
 80060fe:	bf04      	itt	eq
 8006100:	1809      	addeq	r1, r1, r0
 8006102:	6021      	streq	r1, [r4, #0]
 8006104:	605c      	str	r4, [r3, #4]
 8006106:	e7c7      	b.n	8006098 <_free_r+0x24>
 8006108:	bd38      	pop	{r3, r4, r5, pc}
 800610a:	bf00      	nop
 800610c:	200008c8 	.word	0x200008c8

08006110 <_read_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4c07      	ldr	r4, [pc, #28]	; (8006130 <_read_r+0x20>)
 8006114:	4605      	mov	r5, r0
 8006116:	4608      	mov	r0, r1
 8006118:	4611      	mov	r1, r2
 800611a:	2200      	movs	r2, #0
 800611c:	6022      	str	r2, [r4, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	f7fb fbd6 	bl	80018d0 <_read>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_read_r+0x1e>
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	b103      	cbz	r3, 800612e <_read_r+0x1e>
 800612c:	602b      	str	r3, [r5, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	2000099c 	.word	0x2000099c

08006134 <_fstat_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4c07      	ldr	r4, [pc, #28]	; (8006154 <_fstat_r+0x20>)
 8006138:	2300      	movs	r3, #0
 800613a:	4605      	mov	r5, r0
 800613c:	4608      	mov	r0, r1
 800613e:	4611      	mov	r1, r2
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	f7fb fb9d 	bl	8001880 <_fstat>
 8006146:	1c43      	adds	r3, r0, #1
 8006148:	d102      	bne.n	8006150 <_fstat_r+0x1c>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	b103      	cbz	r3, 8006150 <_fstat_r+0x1c>
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	bd38      	pop	{r3, r4, r5, pc}
 8006152:	bf00      	nop
 8006154:	2000099c 	.word	0x2000099c

08006158 <_isatty_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4c06      	ldr	r4, [pc, #24]	; (8006174 <_isatty_r+0x1c>)
 800615c:	2300      	movs	r3, #0
 800615e:	4605      	mov	r5, r0
 8006160:	4608      	mov	r0, r1
 8006162:	6023      	str	r3, [r4, #0]
 8006164:	f7fb fb9c 	bl	80018a0 <_isatty>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_isatty_r+0x1a>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	b103      	cbz	r3, 8006172 <_isatty_r+0x1a>
 8006170:	602b      	str	r3, [r5, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	2000099c 	.word	0x2000099c

08006178 <abort>:
 8006178:	b508      	push	{r3, lr}
 800617a:	2006      	movs	r0, #6
 800617c:	f000 f82c 	bl	80061d8 <raise>
 8006180:	2001      	movs	r0, #1
 8006182:	f7fb fb47 	bl	8001814 <_exit>

08006186 <_raise_r>:
 8006186:	291f      	cmp	r1, #31
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4604      	mov	r4, r0
 800618c:	460d      	mov	r5, r1
 800618e:	d904      	bls.n	800619a <_raise_r+0x14>
 8006190:	2316      	movs	r3, #22
 8006192:	6003      	str	r3, [r0, #0]
 8006194:	f04f 30ff 	mov.w	r0, #4294967295
 8006198:	bd38      	pop	{r3, r4, r5, pc}
 800619a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800619c:	b112      	cbz	r2, 80061a4 <_raise_r+0x1e>
 800619e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061a2:	b94b      	cbnz	r3, 80061b8 <_raise_r+0x32>
 80061a4:	4620      	mov	r0, r4
 80061a6:	f000 f831 	bl	800620c <_getpid_r>
 80061aa:	462a      	mov	r2, r5
 80061ac:	4601      	mov	r1, r0
 80061ae:	4620      	mov	r0, r4
 80061b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061b4:	f000 b818 	b.w	80061e8 <_kill_r>
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d00a      	beq.n	80061d2 <_raise_r+0x4c>
 80061bc:	1c59      	adds	r1, r3, #1
 80061be:	d103      	bne.n	80061c8 <_raise_r+0x42>
 80061c0:	2316      	movs	r3, #22
 80061c2:	6003      	str	r3, [r0, #0]
 80061c4:	2001      	movs	r0, #1
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	2400      	movs	r4, #0
 80061ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061ce:	4628      	mov	r0, r5
 80061d0:	4798      	blx	r3
 80061d2:	2000      	movs	r0, #0
 80061d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080061d8 <raise>:
 80061d8:	4b02      	ldr	r3, [pc, #8]	; (80061e4 <raise+0xc>)
 80061da:	4601      	mov	r1, r0
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	f7ff bfd2 	b.w	8006186 <_raise_r>
 80061e2:	bf00      	nop
 80061e4:	2000000c 	.word	0x2000000c

080061e8 <_kill_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4c07      	ldr	r4, [pc, #28]	; (8006208 <_kill_r+0x20>)
 80061ec:	2300      	movs	r3, #0
 80061ee:	4605      	mov	r5, r0
 80061f0:	4608      	mov	r0, r1
 80061f2:	4611      	mov	r1, r2
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	f7fb fafd 	bl	80017f4 <_kill>
 80061fa:	1c43      	adds	r3, r0, #1
 80061fc:	d102      	bne.n	8006204 <_kill_r+0x1c>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	b103      	cbz	r3, 8006204 <_kill_r+0x1c>
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	bd38      	pop	{r3, r4, r5, pc}
 8006206:	bf00      	nop
 8006208:	2000099c 	.word	0x2000099c

0800620c <_getpid_r>:
 800620c:	f7fb baea 	b.w	80017e4 <_getpid>

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
